!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABOVE	extern/QGLViewer/VRender/gpc.cpp	106;"	d	file:
ALIGN_CAMERA	extern/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
ALIGN_FRAME	extern/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
ANIMATION	extern/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
AR	extern/QGLViewer/Makefile	/^AR            = ar cqs$/;"	m
AXIS	extern/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
AddBackground	extern/QGLViewer/VRender/VRender.h	/^						AddBackground           = 0x10,$/;"	e	enum:vrender::VRenderParams::VRenderOption
AdvancedTopologicalSort	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderSortMethod { NoSorting, BSPSort, TopologicalSort, AdvancedTopologicalSort };$/;"	e	enum:vrender::VRenderParams::VRenderSortMethod
AxisAlignedBox	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	template<class T> AxisAlignedBox<T>::AxisAlignedBox()$/;"	f	class:vrender::AxisAlignedBox
AxisAlignedBox	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	template<class T> AxisAlignedBox<T>::AxisAlignedBox(const T& v)$/;"	f	class:vrender::AxisAlignedBox
AxisAlignedBox	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	template<class T> AxisAlignedBox<T>::AxisAlignedBox(const T& v,const T& w)$/;"	f	class:vrender::AxisAlignedBox
AxisAlignedBox	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	template<class T> class AxisAlignedBox$/;"	c	namespace:vrender
AxisAlignedBox_xy	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	typedef AxisAlignedBox< Vector2 > AxisAlignedBox_xy ;$/;"	t	namespace:vrender
AxisAlignedBox_xyz	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	typedef AxisAlignedBox< Vector3 > AxisAlignedBox_xyz ;$/;"	t	namespace:vrender
AxisPlaneConstraint	extern/QGLViewer/constraint.cpp	/^AxisPlaneConstraint::AxisPlaneConstraint()$/;"	f	class:AxisPlaneConstraint
AxisPlaneConstraint	extern/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT AxisPlaneConstraint : public Constraint$/;"	c	namespace:qglviewer
BED	extern/QGLViewer/VRender/gpc.cpp	/^  BED,                              \/* Bottom edge                       *\/$/;"	e	enum:__anon8	file:
BELOW	extern/QGLViewer/VRender/gpc.cpp	107;"	d	file:
BH	extern/QGLViewer/VRender/gpc.cpp	/^  BH,                               \/* Bottom horizontal edge            *\/$/;"	e	enum:__anon9	file:
BSPNode	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^BSPNode::BSPNode(Polygone *P)$/;"	f	class:BSPNode
BSPNode	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^class BSPNode$/;"	c	file:
BSPPosition	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^typedef enum { BSP_CROSS_PLANE, BSP_UPPER, BSP_LOWER } BSPPosition;$/;"	t	typeref:enum:__anon6	file:
BSPSort	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderSortMethod { NoSorting, BSPSort, TopologicalSort, AdvancedTopologicalSort };$/;"	e	enum:vrender::VRenderParams::VRenderSortMethod
BSPSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^			BSPSortMethod() {} ;$/;"	f	class:vrender::BSPSortMethod
BSPSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^	class BSPSortMethod: public SortMethod$/;"	c	namespace:vrender
BSPTree	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^BSPTree::BSPTree()$/;"	f	class:BSPTree
BSPTree	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^class BSPTree$/;"	c	file:
BSP_CROSS_PLANE	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^typedef enum { BSP_CROSS_PLANE, BSP_UPPER, BSP_LOWER } BSPPosition;$/;"	e	enum:__anon6	file:
BSP_LOWER	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^typedef enum { BSP_CROSS_PLANE, BSP_UPPER, BSP_LOWER } BSPPosition;$/;"	e	enum:__anon6	file:
BSP_UPPER	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^typedef enum { BSP_CROSS_PLANE, BSP_UPPER, BSP_LOWER } BSPPosition;$/;"	e	enum:__anon6	file:
BUNDLE_HEAD	extern/QGLViewer/VRender/gpc.cpp	/^  BUNDLE_HEAD,                      \/* Bundle head node                  *\/$/;"	e	enum:__anon10	file:
BUNDLE_TAIL	extern/QGLViewer/VRender/gpc.cpp	/^  BUNDLE_TAIL                       \/* Passive bundle tail node          *\/$/;"	e	enum:__anon10	file:
BackFaceCullingOptimizer	extern/QGLViewer/VRender/Optimizer.h	/^	class BackFaceCullingOptimizer: public Optimizer$/;"	c	namespace:vrender
CAMERA	extern/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	e	enum:QGLViewer::MouseHandler
CAMERA_MODE	extern/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
CAMERA_PATH_ID	CameraFollowMode.cpp	28;"	d	file:
CC	extern/QGLViewer/Makefile	/^CC            = gcc$/;"	m
CENTER_FRAME	extern/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
CENTER_SCENE	extern/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
CFLAGS	extern/QGLViewer/Makefile	/^CFLAGS        = -m64 -pipe -O2 -D_REENTRANT -Wall -W -fPIC $(DEFINES)$/;"	m
CHK_DIR_EXISTS	extern/QGLViewer/Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
CLIP	extern/QGLViewer/VRender/gpc.cpp	109;"	d	file:
COMPRESS	extern/QGLViewer/Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	extern/QGLViewer/Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	extern/QGLViewer/Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	extern/QGLViewer/Makefile	/^COPY_FILE     = $(COPY) -P$/;"	m
CREATOR	extern/QGLViewer/VRender/EPSExporter.cpp	/^const char *EPSExporter::CREATOR = "VRender library - (c) Cyril Soler 2005" ;$/;"	m	class:EPSExporter	file:
CREATOR	extern/QGLViewer/VRender/Exporter.h	/^			static const char *CREATOR ;$/;"	m	class:vrender::EPSExporter
CXX	extern/QGLViewer/Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	extern/QGLViewer/Makefile	/^CXXFLAGS      = -m64 -pipe -O2 -D_REENTRANT -Wall -W -fPIC $(DEFINES)$/;"	m
Camera	extern/QGLViewer/camera.cpp	/^Camera::Camera()$/;"	f	class:Camera
Camera	extern/QGLViewer/camera.cpp	/^Camera::Camera(const Camera& camera)$/;"	f	class:Camera
Camera	extern/QGLViewer/camera.h	/^  class QGLVIEWER_EXPORT Camera : public QObject$/;"	c	namespace:qglviewer
CameraConstraint	extern/QGLViewer/constraint.cpp	/^CameraConstraint::CameraConstraint(const Camera* const camera)$/;"	f	class:CameraConstraint
CameraConstraint	extern/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT CameraConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer
CameraFollowMode	CameraFollowMode.cpp	/^CameraFollowMode::CameraFollowMode(octomap::ScanGraph *graph)$/;"	f	class:CameraFollowMode
CancelButton	extern/QGLViewer/ui_VRenderInterface.h	/^    QPushButton *CancelButton;$/;"	m	class:Ui_VRenderInterface
Classify	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^int BSPNode::Classify(Point *P)$/;"	f	class:BSPNode
Classify	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPNode::Classify(Polygone *P, Polygone * & moins_, Polygone * & plus_)$/;"	f	class:BSPNode
Classify	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPNode::Classify(Segment *S, Segment * & moins_, Segment * & plus_)$/;"	f	class:BSPNode
ClickAction	extern/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	g	class:QGLViewer
ClickActionPrivate	extern/QGLViewer/qglviewer.h	/^	struct ClickActionPrivate {$/;"	s	class:QGLViewer
ColorOcTreeDrawer	ColorOcTreeDrawer.cpp	/^  ColorOcTreeDrawer::ColorOcTreeDrawer() $/;"	f	class:octomap::ColorOcTreeDrawer
ComputeBufferBB	extern/QGLViewer/VRender/ParserGL.cpp	/^void ParserUtils::ComputeBufferBB(GLint size, GLfloat * buffer,$/;"	f	class:ParserUtils
ComputePrimitiveBB	extern/QGLViewer/VRender/ParserGL.cpp	/^void ParserUtils::ComputePrimitiveBB(GLfloat * & loc,GLfloat & xmin,GLfloat & xmax,GLfloat & ymin,GLfloat & ymax, GLfloat & zmin,GLfloat & zmax)$/;"	f	class:ParserUtils
Const	extern/QGLViewer/VRender/Primitive.h	/^        FLOAT Const() const { return _C ; }$/;"	f	class:vrender::Primitive
Constraint	extern/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT Constraint$/;"	c	namespace:qglviewer
CullHiddenFaces	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderOption {	CullHiddenFaces         = 0x1,$/;"	e	enum:vrender::VRenderParams::VRenderOption
DEBUG_TS	extern/QGLViewer/VRender/PrimitivePositioning.cpp	97;"	d	file:
DECREASE_FLYSPEED	extern/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
DEFINES	extern/QGLViewer/Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_NO_KEYWORDS -DQT_XML_LIB -DQT_OPENGL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	extern/QGLViewer/Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	extern/QGLViewer/Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	extern/QGLViewer/Makefile	/^DESTDIR       = $/;"	m
DISPLAY_FPS	extern/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
DIST	extern/QGLViewer/Makefile	/^DIST          = qglviewer-icon.xpm \\$/;"	m
DRAW_AXIS	extern/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
DRAW_GRID	extern/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
DRIVE	extern/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
DVector3	extern/QGLViewer/VRender/Types.h	/^	typedef T_Vect3<double> DVector3 ;$/;"	t	namespace:vrender
DepthIndex	extern/QGLViewer/VRender/ParserGL.cpp	/^} DepthIndex;$/;"	t	typeref:struct:_DepthIndex	file:
DomUtils	extern/QGLViewer/domUtils.h	/^class DomUtils$/;"	c
DontSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^			DontSortMethod() {}$/;"	f	class:vrender::DontSortMethod
DontSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^	class DontSortMethod: public SortMethod$/;"	c	namespace:vrender
EDIT_CAMERA	extern/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
EGALITY_EPS	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^double EGALITY_EPS 		= 0.0001;$/;"	v
EGALITY_EPS	extern/QGLViewer/VRender/ParserGL.cpp	/^		static const double EGALITY_EPS ;$/;"	m	class:ParserUtils	file:
EGALITY_EPS	extern/QGLViewer/VRender/ParserGL.cpp	/^const double ParserUtils::EGALITY_EPS = 0.00001 ;$/;"	m	class:ParserUtils	file:
ELI	extern/QGLViewer/VRender/gpc.cpp	/^  ELI,                              \/* External left intermediate        *\/$/;"	e	enum:__anon8	file:
EMM	extern/QGLViewer/VRender/gpc.cpp	/^  EMM,                              \/* External maximum and minimum      *\/$/;"	e	enum:__anon8	file:
EMN	extern/QGLViewer/VRender/gpc.cpp	/^  EMN,                              \/* External minimum                  *\/$/;"	e	enum:__anon8	file:
EMX	extern/QGLViewer/VRender/gpc.cpp	/^  EMX,                              \/* External maximum                  *\/$/;"	e	enum:__anon8	file:
ENABLE_TEXT	extern/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
EPS	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderFormat     { EPS, PS, XFIG, SVG };$/;"	e	enum:vrender::VRenderParams::VRenderFormat
EPSExporter	extern/QGLViewer/VRender/EPSExporter.cpp	/^EPSExporter::EPSExporter()$/;"	f	class:EPSExporter
EPSExporter	extern/QGLViewer/VRender/Exporter.h	/^	class EPSExporter: public Exporter$/;"	c	namespace:vrender
EPS_GOURAUD_THRESHOLD	extern/QGLViewer/VRender/EPSExporter.cpp	/^const double EPSExporter::EPS_GOURAUD_THRESHOLD = 0.05 ;$/;"	m	class:EPSExporter	file:
EPS_GOURAUD_THRESHOLD	extern/QGLViewer/VRender/Exporter.h	/^			static const double EPS_GOURAUD_THRESHOLD ;$/;"	m	class:vrender::EPSExporter
EPS_SMOOTH_LINE_FACTOR	extern/QGLViewer/VRender/Primitive.h	70;"	d
EQ	extern/QGLViewer/VRender/gpc.cpp	121;"	d	file:
ERI	extern/QGLViewer/VRender/gpc.cpp	/^  ERI,                              \/* External right intermediate       *\/$/;"	e	enum:__anon8	file:
EXIT_VIEWER	extern/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	e	enum:QGLViewer::KeyboardAction
Equation	extern/QGLViewer/VRender/Primitive.h	/^        inline FLOAT Equation(const Vect3& p) { return p*_normal-_C ; }$/;"	f	class:vrender::Primitive
Exporter	extern/QGLViewer/VRender/Exporter.cpp	/^Exporter::Exporter()$/;"	f	class:Exporter
Exporter	extern/QGLViewer/VRender/Exporter.h	/^	class Exporter$/;"	c	namespace:vrender
FALSE	extern/QGLViewer/VRender/gpc.cpp	99;"	d	file:
FDFormatString	extern/QGLViewer/saveSnapshot.cpp	/^static QMap<QString, QString> FDFormatString;$/;"	v	file:
FIGExporter	extern/QGLViewer/VRender/Exporter.h	/^	class FIGExporter: public Exporter$/;"	c	namespace:vrender
FIGExporter	extern/QGLViewer/VRender/FIGExporter.cpp	/^FIGExporter::FIGExporter()$/;"	f	class:FIGExporter
FLAT_POLYGON_EPS	extern/QGLViewer/VRender/Types.h	/^	const float FLAT_POLYGON_EPS = 1e-5f ;$/;"	m	namespace:vrender
FLOAT	extern/QGLViewer/VRender/Types.h	/^	typedef double FLOAT ;$/;"	t	namespace:vrender
FLT_MAX	extern/QGLViewer/VRender/Vector3.h	51;"	d
FORBIDDEN	extern/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
FPSIsDisplayed	extern/QGLViewer/qglviewer.h	/^	bool FPSIsDisplayed() const { return FPSIsDisplayed_; };$/;"	f	class:QGLViewer
FPSIsDisplayedChanged	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::FPSIsDisplayedChanged(bool _t1)$/;"	f	class:QGLViewer
FPSIsDisplayed_	extern/QGLViewer/qglviewer.h	/^	bool FPSIsDisplayed_;	\/\/ Frame Per Seconds$/;"	m	class:QGLViewer
FRAME	extern/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	e	enum:QGLViewer::MouseHandler
FREE	extern/QGLViewer/VRender/gpc.cpp	155;"	d	file:
FREE	extern/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
FUL	extern/QGLViewer/VRender/gpc.cpp	/^  FUL                               \/* Full non-intersection             *\/$/;"	e	enum:__anon8	file:
FULL_SCREEN	extern/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
FWD_MIN	extern/QGLViewer/VRender/gpc.cpp	129;"	d	file:
Feedback3DColor	extern/QGLViewer/VRender/Primitive.h	/^        Feedback3DColor(FLOAT x, FLOAT y, FLOAT z, GLfloat r, GLfloat g, GLfloat b, GLfloat a)$/;"	f	class:vrender::Feedback3DColor
Feedback3DColor	extern/QGLViewer/VRender/Primitive.h	/^        Feedback3DColor(GLfloat *loc)$/;"	f	class:vrender::Feedback3DColor
Feedback3DColor	extern/QGLViewer/VRender/Primitive.h	/^    class Feedback3DColor$/;"	c	namespace:vrender
FigCoordX	extern/QGLViewer/VRender/FIGExporter.cpp	/^int FIGExporter::FigCoordX(double x) const$/;"	f	class:FIGExporter
FigCoordY	extern/QGLViewer/VRender/FIGExporter.cpp	/^int FIGExporter::FigCoordY(double y) const$/;"	f	class:FIGExporter
FigGrayScaleIndex	extern/QGLViewer/VRender/FIGExporter.cpp	/^int FIGExporter::FigGrayScaleIndex(float red, float green, float blue) const$/;"	f	class:FIGExporter
FlatFactor	extern/QGLViewer/VRender/Primitive.h	/^        FLOAT FlatFactor() const { return anglefactor ; }$/;"	f	class:vrender::Polygone
Frame	extern/QGLViewer/frame.cpp	/^Frame::Frame()$/;"	f	class:Frame
Frame	extern/QGLViewer/frame.cpp	/^Frame::Frame(const Frame& frame)$/;"	f	class:Frame
Frame	extern/QGLViewer/frame.cpp	/^Frame::Frame(const Vec& position, const Quaternion& orientation)$/;"	f	class:Frame
Frame	extern/QGLViewer/frame.h	/^  class QGLVIEWER_EXPORT Frame : public QObject$/;"	c	namespace:qglviewer
GLFLOAT	extern/QGLViewer/VRender/Types.h	/^	typedef GLdouble GLFLOAT ;$/;"	t	namespace:vrender
GOURAUD_TRIANGLE_EPS	extern/QGLViewer/VRender/EPSExporter.cpp	/^const char *EPSExporter::GOURAUD_TRIANGLE_EPS[] =$/;"	m	class:EPSExporter	file:
GOURAUD_TRIANGLE_EPS	extern/QGLViewer/VRender/Exporter.h	/^			static const char *GOURAUD_TRIANGLE_EPS[] ;$/;"	m	class:vrender::EPSExporter
GPC_DIFF	extern/QGLViewer/VRender/gpc.h	/^  GPC_DIFF,                         \/* Difference                        *\/$/;"	e	enum:__anon1
GPC_EPSILON	extern/QGLViewer/VRender/gpc.h	92;"	d
GPC_INT	extern/QGLViewer/VRender/gpc.h	/^  GPC_INT,                          \/* Intersection                      *\/$/;"	e	enum:__anon1
GPC_UNION	extern/QGLViewer/VRender/gpc.h	/^  GPC_UNION                         \/* Union                             *\/$/;"	e	enum:__anon1
GPC_VERSION	extern/QGLViewer/VRender/gpc.h	94;"	d
GPC_XOR	extern/QGLViewer/VRender/gpc.h	/^  GPC_XOR,                          \/* Exclusive or                      *\/$/;"	e	enum:__anon1
HELP	extern/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
ILI	extern/QGLViewer/VRender/gpc.cpp	/^  ILI,                              \/* Internal left intermediate        *\/$/;"	e	enum:__anon8	file:
IMM	extern/QGLViewer/VRender/gpc.cpp	/^  IMM,                              \/* Internal maximum and minimum      *\/$/;"	e	enum:__anon8	file:
IMN	extern/QGLViewer/VRender/gpc.cpp	/^  IMN,                              \/* Internal minimum                  *\/$/;"	e	enum:__anon8	file:
IMX	extern/QGLViewer/VRender/gpc.cpp	/^  IMX,                              \/* Internal maximum                  *\/$/;"	e	enum:__anon8	file:
INCPATH	extern/QGLViewer/Makefile	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++-64 -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4\/QtOpenGL -I\/usr\/include\/qt4\/QtXml -I\/usr\/include\/qt4 -I\/usr\/X11R6\/include -I.moc -I.$/;"	m
INCREASE_FLYSPEED	extern/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
INSTALL_DIR	extern/QGLViewer/Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	extern/QGLViewer/Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	extern/QGLViewer/Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
INVERT_TRISTRIPS	extern/QGLViewer/VRender/gpc.cpp	112;"	d	file:
IODistance	extern/QGLViewer/camera.h	/^    float IODistance() const { return IODistance_; };$/;"	f	class:qglviewer::Camera
IODistance_	extern/QGLViewer/camera.h	/^    float IODistance_;		     \/\/ inter-ocular distance, in meters$/;"	m	class:qglviewer::Camera
IRI	extern/QGLViewer/VRender/gpc.cpp	/^  IRI,                              \/* Internal right intermediate       *\/$/;"	e	enum:__anon8	file:
ImageInterface	extern/QGLViewer/saveSnapshot.cpp	/^ public: ImageInterface(QWidget *parent) : QDialog(parent) { setupUi(this); }$/;"	f	class:ImageInterface
ImageInterface	extern/QGLViewer/saveSnapshot.cpp	/^class ImageInterface: public QDialog, public Ui::ImageInterface$/;"	c	file:
ImageInterface	extern/QGLViewer/ui_ImageInterface.h	/^    class ImageInterface: public Ui_ImageInterface {};$/;"	c	namespace:Ui
Independent	extern/QGLViewer/VRender/PrimitivePositioning.h	/^			typedef enum { Independent = 0x0,$/;"	e	enum:vrender::PrimitivePositioning::__anon7
IsAPolygon	extern/QGLViewer/VRender/Primitive.h	/^        virtual int IsAPolygon() { return 1 ; }$/;"	f	class:vrender::Polygone
KeyFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^KeyFrameInterpolator::KeyFrame::KeyFrame(const Frame& fr, float t)$/;"	f	class:KeyFrameInterpolator::KeyFrame
KeyFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^KeyFrameInterpolator::KeyFrame::KeyFrame(const Frame* fr, float t)$/;"	f	class:KeyFrameInterpolator::KeyFrame
KeyFrame	extern/QGLViewer/keyFrameInterpolator.h	/^    class KeyFrame$/;"	c	class:qglviewer::KeyFrameInterpolator
KeyFrameInterpolator	extern/QGLViewer/keyFrameInterpolator.cpp	/^KeyFrameInterpolator::KeyFrameInterpolator(Frame* frame)$/;"	f	class:KeyFrameInterpolator
KeyFrameInterpolator	extern/QGLViewer/keyFrameInterpolator.h	/^  class QGLVIEWER_EXPORT KeyFrameInterpolator : public QObject$/;"	c	namespace:qglviewer
KeyboardAction	extern/QGLViewer/qglviewer.h	/^	enum KeyboardAction { DRAW_AXIS, DRAW_GRID, DISPLAY_FPS, ENABLE_TEXT, EXIT_VIEWER,$/;"	g	class:QGLViewer
KeyboardModifierMask	extern/QGLViewer/qglviewer.cpp	57;"	d	file:
LED	extern/QGLViewer/VRender/gpc.cpp	/^  LED,                              \/* Left edge                         *\/$/;"	e	enum:__anon8	file:
LEFT	extern/QGLViewer/VRender/gpc.cpp	103;"	d	file:
LFLAGS	extern/QGLViewer/Makefile	/^LFLAGS        = -m64 -Wl,-O1 -shared -Wl,-soname,libQGLViewer.so.2$/;"	m
LIBS	extern/QGLViewer/Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/X11R6\/lib64 -L\/usr\/lib\/x86_64-linux-gnu -lpthread -lGL -lQtXml -lQtOpenGL -lQtGui -lQtCore $/;"	m
LINE_EGALITY_EPS	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^double LINE_EGALITY_EPS = 0.0001;$/;"	v
LINK	extern/QGLViewer/Makefile	/^LINK          = g++$/;"	m
LOOK_AROUND	extern/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
LocalConstraint	extern/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT LocalConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer
Lower	extern/QGLViewer/VRender/PrimitivePositioning.h	/^								Lower 		= 0x2 } RelativePosition ;$/;"	e	enum:vrender::PrimitivePositioning::__anon7
MALLOC	extern/QGLViewer/VRender/gpc.cpp	150;"	d	file:
MKDIR	extern/QGLViewer/Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	extern/QGLViewer/Makefile	/^MOVE          = mv -f$/;"	m
MOVE_BACKWARD	extern/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
MOVE_CAMERA_DOWN	extern/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_CAMERA_LEFT	extern/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_CAMERA_RIGHT	extern/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_CAMERA_UP	extern/QGLViewer/qglviewer.h	/^		MOVE_CAMERA_LEFT, MOVE_CAMERA_RIGHT, MOVE_CAMERA_UP, MOVE_CAMERA_DOWN,$/;"	e	enum:QGLViewer::KeyboardAction
MOVE_FORWARD	extern/QGLViewer/qglviewer.h	/^		MOVE_FORWARD, LOOK_AROUND, MOVE_BACKWARD,$/;"	e	enum:QGLViewer::MouseAction
M_PI	extern/QGLViewer/config.h	50;"	d
M_PI_2	ViewerWidget.cpp	29;"	d	file:
ManipulatedCameraFrame	extern/QGLViewer/manipulatedCameraFrame.cpp	/^ManipulatedCameraFrame::ManipulatedCameraFrame()$/;"	f	class:ManipulatedCameraFrame
ManipulatedCameraFrame	extern/QGLViewer/manipulatedCameraFrame.cpp	/^ManipulatedCameraFrame::ManipulatedCameraFrame(const ManipulatedCameraFrame& mcf)$/;"	f	class:ManipulatedCameraFrame
ManipulatedCameraFrame	extern/QGLViewer/manipulatedCameraFrame.h	/^  class QGLVIEWER_EXPORT ManipulatedCameraFrame : public ManipulatedFrame$/;"	c	namespace:qglviewer
ManipulatedFrame	extern/QGLViewer/manipulatedFrame.cpp	/^ManipulatedFrame::ManipulatedFrame()$/;"	f	class:ManipulatedFrame
ManipulatedFrame	extern/QGLViewer/manipulatedFrame.cpp	/^ManipulatedFrame::ManipulatedFrame(const ManipulatedFrame& mf)$/;"	f	class:ManipulatedFrame
ManipulatedFrame	extern/QGLViewer/manipulatedFrame.h	/^  class QGLVIEWER_EXPORT ManipulatedFrame : public Frame, public MouseGrabber$/;"	c	namespace:qglviewer
MouseAction	extern/QGLViewer/qglviewer.h	/^	enum MouseAction { NO_MOUSE_ACTION,$/;"	g	class:QGLViewer
MouseActionPrivate	extern/QGLViewer/qglviewer.h	/^	struct MouseActionPrivate {$/;"	s	class:QGLViewer
MouseGrabber	extern/QGLViewer/mouseGrabber.cpp	/^MouseGrabber::MouseGrabber()$/;"	f	class:MouseGrabber
MouseGrabber	extern/QGLViewer/mouseGrabber.h	/^  class QGLVIEWER_EXPORT MouseGrabber$/;"	c	namespace:qglviewer
MouseGrabberPool	extern/QGLViewer/mouseGrabber.h	/^    static const QList<MouseGrabber*>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber
MouseGrabberPool	extern/QGLViewer/mouseGrabber.h	/^    static const QList<MouseGrabber>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber
MouseGrabberPool	extern/QGLViewer/mouseGrabber.h	/^    static const QPtrList<MouseGrabber>& MouseGrabberPool() { return MouseGrabber::MouseGrabberPool_; };$/;"	f	class:qglviewer::MouseGrabber
MouseGrabberPool_	extern/QGLViewer/mouseGrabber.h	/^    static QList<MouseGrabber*> MouseGrabberPool_;$/;"	m	class:qglviewer::MouseGrabber
MouseGrabberPool_	extern/QGLViewer/mouseGrabber.h	/^    static QPtrList<MouseGrabber> MouseGrabberPool_;$/;"	m	class:qglviewer::MouseGrabber
MouseHandler	extern/QGLViewer/qglviewer.h	/^	enum MouseHandler { CAMERA, FRAME };$/;"	g	class:QGLViewer
NEXT_INDEX	extern/QGLViewer/VRender/gpc.cpp	124;"	d	file:
NH	extern/QGLViewer/VRender/gpc.cpp	/^  NH,                               \/* No horizontal edge                *\/$/;"	e	enum:__anon9	file:
NOMINMAX	SceneObject.cpp	25;"	d	file:
NOMINMAX	SelectionBox.cpp	26;"	d	file:
NOT_FMAX	extern/QGLViewer/VRender/gpc.cpp	132;"	d	file:
NOT_RMAX	extern/QGLViewer/VRender/gpc.cpp	137;"	d	file:
NO_CLICK_ACTION	extern/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
NO_MOUSE_ACTION	extern/QGLViewer/qglviewer.h	/^	enum MouseAction { NO_MOUSE_ACTION,$/;"	e	enum:QGLViewer::MouseAction
NUL	extern/QGLViewer/VRender/gpc.cpp	/^  NUL,                              \/* Empty non-intersection            *\/$/;"	e	enum:__anon8	file:
NVector3	extern/QGLViewer/VRender/NVector3.cpp	/^NVector3::NVector3()$/;"	f	class:NVector3
NVector3	extern/QGLViewer/VRender/NVector3.cpp	/^NVector3::NVector3(const NVector3& u)$/;"	f	class:NVector3
NVector3	extern/QGLViewer/VRender/NVector3.cpp	/^NVector3::NVector3(const Vector3 &u,bool normalization)$/;"	f	class:NVector3
NVector3	extern/QGLViewer/VRender/NVector3.h	/^    inline NVector3(double x,double y,double z,bool normalization=true)$/;"	f	class:vrender::NVector3
NVector3	extern/QGLViewer/VRender/NVector3.h	/^  class NVector3$/;"	c	namespace:vrender
N_EDGE	extern/QGLViewer/VRender/gpc.cpp	146;"	d	file:
NoSorting	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderSortMethod { NoSorting, BSPSort, TopologicalSort, AdvancedTopologicalSort };$/;"	e	enum:vrender::VRenderParams::VRenderSortMethod
NormalizeBufferCoordinates	extern/QGLViewer/VRender/ParserGL.cpp	/^void ParserUtils::NormalizeBufferCoordinates(GLint size, GLfloat * buffer, GLfloat MaxSize, GLfloat& zmin,GLfloat& zmax)$/;"	f	class:ParserUtils
NormalizePrimitiveCoordinates	extern/QGLViewer/VRender/ParserGL.cpp	/^void ParserUtils::NormalizePrimitiveCoordinates(GLfloat * & loc,GLfloat MaxSize,GLfloat zmin,GLfloat zmax)$/;"	f	class:ParserUtils
OBJECTS	extern/QGLViewer/Makefile	/^OBJECTS       = .obj\/qglviewer.o \\$/;"	m
OBJECTS_DIR	extern/QGLViewer/Makefile	/^OBJECTS_DIR   = .obj\/$/;"	m
OPTIMAL	extern/QGLViewer/VRender/gpc.cpp	126;"	d	file:
ORTHOGRAPHIC	extern/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	e	enum:qglviewer::Camera::Type
OTD_RAD2DEG	OcTreeDrawer.cpp	27;"	d	file:
OcTreeDrawer	OcTreeDrawer.cpp	/^  OcTreeDrawer::OcTreeDrawer() : SceneObject(),$/;"	f	class:octomap::OcTreeDrawer
OptimizeBackFaceCulling	extern/QGLViewer/VRender/VRender.h	/^						OptimizeBackFaceCulling = 0x4,$/;"	e	enum:vrender::VRenderParams::VRenderOption
Optimizer	extern/QGLViewer/VRender/Optimizer.h	/^	class Optimizer$/;"	c	namespace:vrender
P1	extern/QGLViewer/VRender/Primitive.h	/^        Feedback3DColor P1 ;$/;"	m	class:vrender::Segment
P2	extern/QGLViewer/VRender/Primitive.h	/^        Feedback3DColor P2 ;$/;"	m	class:vrender::Segment
PERSPECTIVE	extern/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	e	enum:qglviewer::Camera::Type
PLANE	extern/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	e	enum:qglviewer::AxisPlaneConstraint::Type
PREV_INDEX	extern/QGLViewer/VRender/gpc.cpp	123;"	d	file:
PS	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderFormat     { EPS, PS, XFIG, SVG };$/;"	e	enum:vrender::VRenderParams::VRenderFormat
PSExporter	extern/QGLViewer/VRender/Exporter.h	/^	class PSExporter: public EPSExporter$/;"	c	namespace:vrender
P_EDGE	extern/QGLViewer/VRender/gpc.cpp	142;"	d	file:
ParserGL	extern/QGLViewer/VRender/ParserGL.h	/^	class ParserGL$/;"	c	namespace:vrender
ParserUtils	extern/QGLViewer/VRender/ParserGL.cpp	/^class ParserUtils$/;"	c	file:
Point	extern/QGLViewer/VRender/Primitive.cpp	/^Point::Point(const Feedback3DColor& f)$/;"	f	class:Point
Point	extern/QGLViewer/VRender/Primitive.h	/^    class Point: public Primitive$/;"	c	namespace:vrender
PointcloudDrawer	PointcloudDrawer.cpp	/^  PointcloudDrawer::PointcloudDrawer()$/;"	f	class:octomap::PointcloudDrawer
PointcloudDrawer	PointcloudDrawer.cpp	/^  PointcloudDrawer::PointcloudDrawer(const ScanGraph& graph)$/;"	f	class:octomap::PointcloudDrawer
Polygone	extern/QGLViewer/VRender/Primitive.cpp	/^Polygone::Polygone(const vector<Feedback3DColor>& fc)$/;"	f	class:Polygone
Polygone	extern/QGLViewer/VRender/Primitive.h	/^    class Polygone: public Primitive$/;"	c	namespace:vrender
Primitive	extern/QGLViewer/VRender/Primitive.h	/^    class Primitive$/;"	c	namespace:vrender
PrimitivePositioning	extern/QGLViewer/VRender/PrimitivePositioning.h	/^	class PrimitivePositioning$/;"	c	namespace:vrender
PrimitiveSplitOptimizer	extern/QGLViewer/VRender/Optimizer.h	/^	class PrimitiveSplitOptimizer: public Optimizer$/;"	c	namespace:vrender
ProgressDialog	extern/QGLViewer/saveSnapshot.cpp	/^class ProgressDialog$/;"	c	file:
ProgressFunction	extern/QGLViewer/VRender/VRender.h	/^	typedef void (*ProgressFunction)(float,const QString&) ;$/;"	t	namespace:vrender
PtrPrimitive	extern/QGLViewer/VRender/Types.h	/^	typedef Primitive *PtrPrimitive ;$/;"	t	namespace:vrender
QColorDomElement	extern/QGLViewer/domUtils.h	/^  static QDomElement QColorDomElement(const QColor& color, const QString& name, QDomDocument& doc)$/;"	f	class:DomUtils
QColorFromDom	extern/QGLViewer/domUtils.h	/^  static QColor QColorFromDom(const QDomElement& e)$/;"	f	class:DomUtils
QGLVIEWER_CAMERA_H	extern/QGLViewer/camera.h	24;"	d
QGLVIEWER_CONFIG_H	extern/QGLViewer/config.h	29;"	d
QGLVIEWER_CONSTRAINT_H	extern/QGLViewer/constraint.h	24;"	d
QGLVIEWER_EXPORT	extern/QGLViewer/config.h	55;"	d
QGLVIEWER_EXPORT	extern/QGLViewer/config.h	57;"	d
QGLVIEWER_EXPORT	extern/QGLViewer/config.h	61;"	d
QGLVIEWER_EXPORT	extern/QGLViewer/config.h	63;"	d
QGLVIEWER_EXPORT	extern/QGLViewer/config.h	75;"	d
QGLVIEWER_FRAME_H	extern/QGLViewer/frame.h	24;"	d
QGLVIEWER_KEY_FRAME_INTERPOLATOR_H	extern/QGLViewer/keyFrameInterpolator.h	24;"	d
QGLVIEWER_MANIPULATED_CAMERA_FRAME_H	extern/QGLViewer/manipulatedCameraFrame.h	24;"	d
QGLVIEWER_MANIPULATED_FRAME_H	extern/QGLViewer/manipulatedFrame.h	24;"	d
QGLVIEWER_MOUSE_GRABBER_H	extern/QGLViewer/mouseGrabber.h	24;"	d
QGLVIEWER_QGLVIEWER_H	extern/QGLViewer/qglviewer.h	24;"	d
QGLVIEWER_QT_VERSION_WITHOUT_GLUT	extern/QGLViewer/config.h	93;"	d
QGLVIEWER_QUATERNION_H	extern/QGLViewer/quaternion.h	24;"	d
QGLVIEWER_UNION_NOT_SUPPORTED	extern/QGLViewer/vec.h	75;"	d
QGLVIEWER_VEC_H	extern/QGLViewer/vec.h	24;"	d
QGLVIEWER_VERSION	extern/QGLViewer/config.h	31;"	d
QGLViewer	extern/QGLViewer/qglviewer.cpp	/^QGLViewer::QGLViewer(QGLContext *context, QWidget* parent, const QGLWidget* shareWidget, Qt::WindowFlags flags)$/;"	f	class:QGLViewer
QGLViewer	extern/QGLViewer/qglviewer.cpp	/^QGLViewer::QGLViewer(QWidget* parent, const QGLWidget* shareWidget, Qt::WindowFlags flags)$/;"	f	class:QGLViewer
QGLViewer	extern/QGLViewer/qglviewer.cpp	/^QGLViewer::QGLViewer(const QGLFormat& format, QWidget* parent, const QGLWidget* shareWidget, Qt::WindowFlags flags)$/;"	f	class:QGLViewer
QGLViewer	extern/QGLViewer/qglviewer.h	/^    QGLViewer(QGLContext* context, QWidget* parent, const char* name=0, const QGLWidget* shareWidget=0, Qt::WindowFlags flags=0)$/;"	f	class:QGLViewer
QGLViewer	extern/QGLViewer/qglviewer.h	/^    explicit QGLViewer(QWidget* parent=NULL, const char* name=0, const QGLWidget* shareWidget=0, Qt::WindowFlags flags=0)$/;"	f	class:QGLViewer
QGLViewer	extern/QGLViewer/qglviewer.h	/^    explicit QGLViewer(const QGLFormat& format, QWidget* parent=0, const char* name=0, const QGLWidget* shareWidget=0,Qt::WindowFlags flags=0)$/;"	f	class:QGLViewer
QGLViewer	extern/QGLViewer/qglviewer.h	/^class QGLVIEWER_EXPORT QGLViewer : public QGLWidget$/;"	c
QGLViewerIndex	extern/QGLViewer/qglviewer.h	/^	static int QGLViewerIndex(const QGLViewer* const viewer) { return QGLViewer::QGLViewerPool_.findRef(viewer); };$/;"	f	class:QGLViewer
QGLViewerIndex	extern/QGLViewer/qglviewer.h	/^	static int QGLViewerIndex(const QGLViewer* const viewer) { return QGLViewer::QGLViewerPool_.indexOf(const_cast<QGLViewer*>(viewer)); };$/;"	f	class:QGLViewer
QGLViewerPool	extern/QGLViewer/qglviewer.h	/^	static const QList<QGLViewer*>& QGLViewerPool() { return QGLViewer::QGLViewerPool_; };$/;"	f	class:QGLViewer
QGLViewerPool	extern/QGLViewer/qglviewer.h	/^	static const QPtrList<QGLViewer>& QGLViewerPool() { return QGLViewer::QGLViewerPool_; };$/;"	f	class:QGLViewer
QGLViewerPool_	extern/QGLViewer/qglviewer.h	/^	static QList<QGLViewer*> QGLViewerPool_;$/;"	m	class:QGLViewer
QGLViewerPool_	extern/QGLViewer/qglviewer.h	/^	static QPtrList<QGLViewer> QGLViewerPool_;$/;"	m	class:QGLViewer
QGLViewerVersionString	extern/QGLViewer/qglviewer.cpp	/^static QString QGLViewerVersionString()$/;"	f	file:
QMAKE	extern/QGLViewer/Makefile	/^QMAKE         = \/usr\/bin\/qmake-qt4$/;"	m
QMAKE_TARGET	extern/QGLViewer/Makefile	/^QMAKE_TARGET  = QGLViewer$/;"	m
QT_CLEAN_NAMESPACE	extern/QGLViewer/config.h	35;"	d
Q_EMIT	extern/QGLViewer/config.h	121;"	d
Q_OS_WIN32	extern/QGLViewer/config.h	43;"	d
Q_SIGNALS	extern/QGLViewer/config.h	120;"	d
Q_SLOTS	extern/QGLViewer/config.h	119;"	d
Qt	extern/QGLViewer/qglviewer.h	43;"	d
Qt	extern/QGLViewer/qglviewer.h	44;"	d
Qt	extern/QGLViewer/qglviewer.h	45;"	d
Qtformat	extern/QGLViewer/saveSnapshot.cpp	/^static QMap<QString, QString> Qtformat;$/;"	v	file:
Quaternion	extern/QGLViewer/quaternion.cpp	/^Quaternion::Quaternion(const QDomElement& element)$/;"	f	class:Quaternion
Quaternion	extern/QGLViewer/quaternion.cpp	/^Quaternion::Quaternion(const Vec& from, const Vec& to)$/;"	f	class:Quaternion
Quaternion	extern/QGLViewer/quaternion.h	/^		Quaternion()$/;"	f	class:qglviewer::Quaternion
Quaternion	extern/QGLViewer/quaternion.h	/^		Quaternion(const Quaternion& Q)$/;"	f	class:qglviewer::Quaternion
Quaternion	extern/QGLViewer/quaternion.h	/^		Quaternion(const Vec& axis, double angle)$/;"	f	class:qglviewer::Quaternion
Quaternion	extern/QGLViewer/quaternion.h	/^		Quaternion(double q0, double q1, double q2, double q3)$/;"	f	class:qglviewer::Quaternion
Quaternion	extern/QGLViewer/quaternion.h	/^	class QGLVIEWER_EXPORT Quaternion$/;"	c	namespace:qglviewer
RAD2DEG	SceneObject.cpp	29;"	d	file:
RANLIB	extern/QGLViewer/Makefile	/^RANLIB        = $/;"	m
RAP_FROM_PIXEL	extern/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
RAP_IS_CENTER	extern/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
RED	extern/QGLViewer/VRender/gpc.cpp	/^  RED,                              \/* Right edge                        *\/$/;"	e	enum:__anon8	file:
REV_MIN	extern/QGLViewer/VRender/gpc.cpp	134;"	d	file:
RIGHT	extern/QGLViewer/VRender/gpc.cpp	104;"	d	file:
ROBOT_TRAJECTORY_ID	CameraFollowMode.cpp	29;"	d	file:
ROLL	extern/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
ROTATE	extern/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
RelativePosition	extern/QGLViewer/VRender/PrimitivePositioning.h	/^								Lower 		= 0x2 } RelativePosition ;$/;"	t	class:vrender::PrimitivePositioning	typeref:enum:vrender::PrimitivePositioning::__anon7
RenderBlackAndWhite	extern/QGLViewer/VRender/VRender.h	/^						RenderBlackAndWhite     = 0x8,$/;"	e	enum:vrender::VRenderParams::VRenderOption
RenderCB	extern/QGLViewer/VRender/VRender.h	/^	typedef void (*RenderCB)(void *) ;$/;"	t	namespace:vrender
SAVE_SCREENSHOT	extern/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
SCREEN_ROTATE	extern/QGLViewer/qglviewer.h	/^		SCREEN_ROTATE, ROLL, DRIVE,$/;"	e	enum:QGLViewer::MouseAction
SCREEN_TRANSLATE	extern/QGLViewer/qglviewer.h	/^		SCREEN_TRANSLATE, ZOOM_ON_REGION };$/;"	e	enum:QGLViewer::MouseAction
SED	extern/QGLViewer/Makefile	/^SED           = sed$/;"	m
SELECT	extern/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
SHOW_ENTIRE_SCENE	extern/QGLViewer/qglviewer.h	/^		CENTER_FRAME, CENTER_SCENE, SHOW_ENTIRE_SCENE, ALIGN_FRAME, ALIGN_CAMERA };$/;"	e	enum:QGLViewer::ClickAction
SNAPSHOT_TO_CLIPBOARD	extern/QGLViewer/qglviewer.h	/^		INCREASE_FLYSPEED, DECREASE_FLYSPEED, SNAPSHOT_TO_CLIPBOARD };$/;"	e	enum:QGLViewer::KeyboardAction
SOURCES	extern/QGLViewer/Makefile	/^SOURCES       = qglviewer.cpp \\$/;"	m
STEREO	extern/QGLViewer/qglviewer.h	/^		SAVE_SCREENSHOT, CAMERA_MODE, FULL_SCREEN, STEREO, ANIMATION, HELP, EDIT_CAMERA,$/;"	e	enum:QGLViewer::KeyboardAction
STRIP	extern/QGLViewer/Makefile	/^STRIP         = strip$/;"	m
SUBJ	extern/QGLViewer/VRender/gpc.cpp	110;"	d	file:
SVG	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderFormat     { EPS, PS, XFIG, SVG };$/;"	e	enum:vrender::VRenderParams::VRenderFormat
SVGExporter	extern/QGLViewer/VRender/Exporter.h	/^	class SVGExporter: public Exporter$/;"	c	namespace:vrender
SYMLINK	extern/QGLViewer/Makefile	/^SYMLINK       = ln -f -s$/;"	m
SaveButton	extern/QGLViewer/ui_VRenderInterface.h	/^    QPushButton *SaveButton;$/;"	m	class:Ui_VRenderInterface
SceneObject	SceneObject.cpp	/^  SceneObject::SceneObject() :$/;"	f	class:octomap::SceneObject
Segment	extern/QGLViewer/VRender/Primitive.h	/^        Segment(const Feedback3DColor & p1, const Feedback3DColor & p2): P1(p1), P2(p2) {}$/;"	f	class:vrender::Segment
Segment	extern/QGLViewer/VRender/Primitive.h	/^    class Segment: public Primitive$/;"	c	namespace:vrender
SelectionBox	SelectionBox.cpp	/^SelectionBox::SelectionBox()$/;"	f	class:octomap::SelectionBox
SetZDepth	extern/QGLViewer/VRender/SortMethod.h	/^			void SetZDepth(FLOAT s) { zSize = s ; }$/;"	f	class:vrender::SortMethod
SortMethod	extern/QGLViewer/VRender/SortMethod.h	/^			SortMethod() {}$/;"	f	class:vrender::SortMethod
SortMethod	extern/QGLViewer/VRender/SortMethod.h	/^	class SortMethod$/;"	c	namespace:vrender
TAR	extern/QGLViewer/Makefile	/^TAR           = tar -cf$/;"	m
TARGET	extern/QGLViewer/Makefile	/^TARGET        = libQGLViewer.so.2.4.0$/;"	m
TARGET0	extern/QGLViewer/Makefile	/^TARGET0       = libQGLViewer.so$/;"	m
TARGET1	extern/QGLViewer/Makefile	/^TARGET1       = libQGLViewer.so.2$/;"	m
TARGET2	extern/QGLViewer/Makefile	/^TARGET2       = libQGLViewer.so.2.4$/;"	m
TARGETA	extern/QGLViewer/Makefile	/^TARGETA       = libQGLViewer.a$/;"	m
TARGETD	extern/QGLViewer/Makefile	/^TARGETD       = libQGLViewer.so.2.4.0$/;"	m
TED	extern/QGLViewer/VRender/gpc.cpp	/^  TED,                              \/* Top edge                          *\/$/;"	e	enum:__anon8	file:
TH	extern/QGLViewer/VRender/gpc.cpp	/^  TH                                \/* Top horizontal edge               *\/$/;"	e	enum:__anon9	file:
TRANSLATE	extern/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
TRUE	extern/QGLViewer/VRender/gpc.cpp	100;"	d	file:
TightenBoundingBox	extern/QGLViewer/VRender/VRender.h	/^						TightenBoundingBox      = 0x20 } ;$/;"	e	enum:vrender::VRenderParams::VRenderOption
TileRegion	extern/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	c	class:QGLViewer
TopologicalSort	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderSortMethod { NoSorting, BSPSort, TopologicalSort, AdvancedTopologicalSort };$/;"	e	enum:vrender::VRenderParams::VRenderSortMethod
TopologicalSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^	class TopologicalSortMethod: public SortMethod$/;"	c	namespace:vrender
TopologicalSortMethod	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^TopologicalSortMethod::TopologicalSortMethod()$/;"	f	class:vrender::TopologicalSortMethod
TopologicalSortUtils	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^class TopologicalSortUtils$/;"	c	namespace:vrender	file:
TrajectoryDrawer	TrajectoryDrawer.cpp	/^  TrajectoryDrawer::TrajectoryDrawer()$/;"	f	class:octomap::TrajectoryDrawer
TrajectoryDrawer	TrajectoryDrawer.cpp	/^  TrajectoryDrawer::TrajectoryDrawer(const octomap::ScanGraph& graph)$/;"	f	class:octomap::TrajectoryDrawer
Type	extern/QGLViewer/camera.h	/^    enum Type { PERSPECTIVE, ORTHOGRAPHIC };$/;"	g	class:qglviewer::Camera
Type	extern/QGLViewer/constraint.h	/^    enum Type { FREE, AXIS, PLANE, FORBIDDEN };$/;"	g	class:qglviewer::AxisPlaneConstraint
UI_IMAGEINTERFACE_H	extern/QGLViewer/ui_ImageInterface.h	10;"	d
UI_VRENDERINTERFACE_H	extern/QGLViewer/ui_VRenderInterface.h	10;"	d
UNBUNDLED	extern/QGLViewer/VRender/gpc.cpp	/^  UNBUNDLED,                        \/* Isolated edge not within a bundle *\/$/;"	e	enum:__anon10	file:
Ui	extern/QGLViewer/ui_ImageInterface.h	/^namespace Ui {$/;"	n
Ui	extern/QGLViewer/ui_VRenderInterface.h	/^namespace Ui {$/;"	n
Ui_ImageInterface	extern/QGLViewer/ui_ImageInterface.h	/^class Ui_ImageInterface$/;"	c
Ui_VRenderInterface	extern/QGLViewer/ui_VRenderInterface.h	/^class Ui_VRenderInterface$/;"	c
Upper	extern/QGLViewer/VRender/PrimitivePositioning.h	/^								Upper 		= 0x1,$/;"	e	enum:vrender::PrimitivePositioning::__anon7
VERTEX	extern/QGLViewer/VRender/gpc.cpp	139;"	d	file:
VRenderFormat	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderFormat     { EPS, PS, XFIG, SVG };$/;"	g	class:vrender::VRenderParams
VRenderInterface	extern/QGLViewer/saveSnapshot.cpp	/^ public: VRenderInterface(QWidget *parent) : QDialog(parent) { setupUi(this); }$/;"	f	class:VRenderInterface
VRenderInterface	extern/QGLViewer/saveSnapshot.cpp	/^class VRenderInterface: public QDialog, public Ui::VRenderInterface$/;"	c	file:
VRenderInterface	extern/QGLViewer/ui_VRenderInterface.h	/^    class VRenderInterface: public Ui_VRenderInterface {};$/;"	c	namespace:Ui
VRenderOption	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderOption {	CullHiddenFaces         = 0x1,$/;"	g	class:vrender::VRenderParams
VRenderParams	extern/QGLViewer/VRender/VRender.cpp	/^VRenderParams::VRenderParams()$/;"	f	class:VRenderParams
VRenderParams	extern/QGLViewer/VRender/VRender.h	/^	class VRenderParams$/;"	c	namespace:vrender
VRenderSortMethod	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderSortMethod { NoSorting, BSPSort, TopologicalSort, AdvancedTopologicalSort };$/;"	g	class:vrender::VRenderParams
Vec	extern/QGLViewer/vec.cpp	/^Vec::Vec(const QDomElement& element)$/;"	f	class:Vec
Vec	extern/QGLViewer/vec.h	/^  Vec() : x(0.0), y(0.0), z(0.0) {}$/;"	f	class:qglviewer::Vec
Vec	extern/QGLViewer/vec.h	/^  Vec(double X, double Y, double Z) : x(X), y(Y), z(Z) {}$/;"	f	class:qglviewer::Vec
Vec	extern/QGLViewer/vec.h	/^  explicit Vec(const C& c) : x(c[0]), y(c[1]), z(c[2]) {}$/;"	f	class:qglviewer::Vec
Vec	extern/QGLViewer/vec.h	/^class QGLVIEWER_EXPORT Vec$/;"	c	namespace:qglviewer
Vector2	extern/QGLViewer/VRender/Types.h	/^	typedef T_Vect2<double> Vector2 ;$/;"	t	namespace:vrender
Vector2	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2::Vector2 ()$/;"	f	class:Vector2
Vector2	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2::Vector2 (const Vector2& u)$/;"	f	class:Vector2
Vector2	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2::Vector2 (const Vector3& u)$/;"	f	class:Vector2
Vector2	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2::Vector2 (double x,double y)$/;"	f	class:Vector2
Vector2	extern/QGLViewer/VRender/Vector2.h	/^  class Vector2$/;"	c	namespace:vrender
Vector3	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3::Vector3 ()$/;"	f	class:Vector3
Vector3	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3::Vector3 (const NVector3& u)$/;"	f	class:Vector3
Vector3	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3::Vector3 (const Vector3& u)$/;"	f	class:Vector3
Vector3	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3::Vector3 (double x,double y,double z)$/;"	f	class:Vector3
Vector3	extern/QGLViewer/VRender/Vector3.h	/^	class Vector3$/;"	c	namespace:vrender
VectorialRender	extern/QGLViewer/VRender/VRender.cpp	/^void vrender::VectorialRender(RenderCB render_callback, void *callback_params, VRenderParams& vparams)$/;"	f	class:vrender
ViewerGui	ViewerGui.cpp	/^ViewerGui::ViewerGui(const std::string& filename, QWidget *parent)$/;"	f	class:octomap::ViewerGui
ViewerSettings	ViewerSettings.cpp	/^ViewerSettings::ViewerSettings(QWidget *parent)$/;"	f	class:ViewerSettings
ViewerSettingsPanel	ViewerSettingsPanel.cpp	/^ViewerSettingsPanel::ViewerSettingsPanel(QWidget *parent)$/;"	f	class:ViewerSettingsPanel
ViewerSettingsPanelCamera	ViewerSettingsPanelCamera.cpp	/^ViewerSettingsPanelCamera::ViewerSettingsPanelCamera(QWidget *parent)$/;"	f	class:ViewerSettingsPanelCamera
ViewerWidget	ViewerWidget.cpp	/^ViewerWidget::ViewerWidget(QWidget* parent) :$/;"	f	class:octomap::ViewerWidget
VisibilityOptimizer	extern/QGLViewer/VRender/Optimizer.h	/^	class VisibilityOptimizer: public Optimizer$/;"	c	namespace:vrender
WorldConstraint	extern/QGLViewer/constraint.h	/^  class QGLVIEWER_EXPORT WorldConstraint : public AxisPlaneConstraint$/;"	c	namespace:qglviewer
XFIG	extern/QGLViewer/VRender/VRender.h	/^			enum VRenderFormat     { EPS, PS, XFIG, SVG };$/;"	e	enum:vrender::VRenderParams::VRenderFormat
ZDepth	extern/QGLViewer/VRender/SortMethod.h	/^			FLOAT ZDepth() const { return zSize ; }$/;"	f	class:vrender::SortMethod
ZOOM	extern/QGLViewer/qglviewer.h	/^		ROTATE, ZOOM, TRANSLATE,$/;"	e	enum:QGLViewer::MouseAction
ZOOM_ON_PIXEL	extern/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
ZOOM_ON_REGION	extern/QGLViewer/qglviewer.h	/^		SCREEN_TRANSLATE, ZOOM_ON_REGION };$/;"	e	enum:QGLViewer::MouseAction
ZOOM_TO_FIT	extern/QGLViewer/qglviewer.h	/^	enum ClickAction { NO_CLICK_ACTION, ZOOM_ON_PIXEL, ZOOM_TO_FIT, SELECT, RAP_FROM_PIXEL, RAP_IS_CENTER,$/;"	e	enum:QGLViewer::ClickAction
_DepthIndex	extern/QGLViewer/VRender/ParserGL.cpp	/^typedef struct _DepthIndex {$/;"	s	file:
_EPS	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^double PrimitivePositioning::_EPS = 0.00001 ;$/;"	m	class:PrimitivePositioning	file:
_EPS	extern/QGLViewer/VRender/PrimitivePositioning.h	/^			static double _EPS ;$/;"	m	class:vrender::PrimitivePositioning
_MAXRANGE_SICK	ViewerGui.cpp	35;"	d	file:
_MAXRANGE_URG	ViewerGui.cpp	34;"	d	file:
_OPTIMIZER_H	extern/QGLViewer/VRender/Optimizer.h	46;"	d
_PRIMITIVEPOSITIONING_H	extern/QGLViewer/VRender/PrimitivePositioning.h	46;"	d
_PRIMITIVE_H_	extern/QGLViewer/VRender/Primitive.h	46;"	d
_SORTMETHOD_H	extern/QGLViewer/VRender/SortMethod.h	46;"	d
_VRENDER_AXISALIGNEDBOX_H	extern/QGLViewer/VRender/AxisAlignedBox.h	46;"	d
_VRENDER_EXPORTER_H	extern/QGLViewer/VRender/Exporter.h	46;"	d
_VRENDER_H_	extern/QGLViewer/VRender/VRender.h	46;"	d
_VRENDER_NVECTOR3_H	extern/QGLViewer/VRender/NVector3.h	46;"	d
_VRENDER_PARSERGL_H	extern/QGLViewer/VRender/ParserGL.h	46;"	d
_VRENDER_TYPES_H	extern/QGLViewer/VRender/Types.h	46;"	d
_VRENDER_VECTOR2_H	extern/QGLViewer/VRender/Vector2.h	46;"	d
_VRENDER_VECTOR3_H	extern/QGLViewer/VRender/Vector3.h	46;"	d
__gpc_h	extern/QGLViewer/VRender/gpc.h	78;"	d
_alpha	extern/QGLViewer/VRender/Primitive.h	/^        GLfloat	_alpha;$/;"	m	class:vrender::Feedback3DColor
_bbox	extern/QGLViewer/VRender/Primitive.h	/^        AxisAlignedBox_xyz _bbox ;$/;"	m	class:vrender::Polygone
_blackAndWhite	extern/QGLViewer/VRender/Exporter.h	/^			bool _clearBG,_blackAndWhite ;$/;"	m	class:vrender::Exporter
_blue	extern/QGLViewer/VRender/Primitive.h	/^        GLfloat	_blue;$/;"	m	class:vrender::Feedback3DColor
_break_cycles	extern/QGLViewer/VRender/SortMethod.h	/^			bool _break_cycles ;$/;"	m	class:vrender::TopologicalSortMethod
_c	extern/QGLViewer/VRender/Primitive.h	/^        double _c ;$/;"	m	class:vrender::Polygone
_clearB	extern/QGLViewer/VRender/Exporter.h	/^			float _clearR,_clearG,_clearB ;$/;"	m	class:vrender::Exporter
_clearBG	extern/QGLViewer/VRender/Exporter.h	/^			bool _clearBG,_blackAndWhite ;$/;"	m	class:vrender::Exporter
_clearG	extern/QGLViewer/VRender/Exporter.h	/^			float _clearR,_clearG,_clearB ;$/;"	m	class:vrender::Exporter
_clearR	extern/QGLViewer/VRender/Exporter.h	/^			float _clearR,_clearG,_clearB ;$/;"	m	class:vrender::Exporter
_depth	extern/QGLViewer/VRender/Exporter.h	/^			mutable int _depth ;$/;"	m	class:vrender::FIGExporter
_error	extern/QGLViewer/VRender/VRender.h	/^			int _error;$/;"	m	class:vrender::VRenderParams
_filename	extern/QGLViewer/VRender/VRender.h	/^			QString _filename;$/;"	m	class:vrender::VRenderParams
_format	extern/QGLViewer/VRender/VRender.h	/^			VRenderFormat     _format ;$/;"	m	class:vrender::VRenderParams
_green	extern/QGLViewer/VRender/Primitive.h	/^        GLfloat	_green;$/;"	m	class:vrender::Feedback3DColor
_lineWidth	extern/QGLViewer/VRender/Exporter.h	/^			float _lineWidth ;$/;"	m	class:vrender::Exporter
_max	extern/QGLViewer/VRender/AxisAlignedBox.h	/^			T _max ;$/;"	m	class:vrender::AxisAlignedBox
_min	extern/QGLViewer/VRender/AxisAlignedBox.h	/^			T _min ;$/;"	m	class:vrender::AxisAlignedBox
_n	extern/QGLViewer/VRender/NVector3.h	/^    double _n[3];  \/\/!< normalized vector$/;"	m	class:vrender::NVector3
_normal	extern/QGLViewer/VRender/Primitive.h	/^        NVector3 _normal ;$/;"	m	class:vrender::Polygone
_options	extern/QGLViewer/VRender/VRender.h	/^			unsigned int _options; \/\/ _DrawMode; _ClearBG; _TightenBB;$/;"	m	class:vrender::VRenderParams
_pointSize	extern/QGLViewer/VRender/Exporter.h	/^			float _pointSize ;$/;"	m	class:vrender::Exporter
_points	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		vector<Point *> _points;$/;"	m	class:BSPTree	file:
_pos	extern/QGLViewer/VRender/Primitive.h	/^        Vector3	_pos ;$/;"	m	class:vrender::Feedback3DColor
_position_and_color	extern/QGLViewer/VRender/Primitive.h	/^        Feedback3DColor _position_and_color ;$/;"	m	class:vrender::Point
_progress_function	extern/QGLViewer/VRender/VRender.h	/^			ProgressFunction _progress_function ;$/;"	m	class:vrender::VRenderParams
_red	extern/QGLViewer/VRender/Primitive.h	/^        GLfloat	_red;$/;"	m	class:vrender::Feedback3DColor
_root	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		BSPNode *_root;$/;"	m	class:BSPTree	file:
_segments	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		vector<Segment *> _segments;	\/\/ these are for storing segments and points when _root is null$/;"	m	class:BSPTree	file:
_sizeX	extern/QGLViewer/VRender/Exporter.h	/^			mutable int _sizeX ;$/;"	m	class:vrender::FIGExporter
_sizeY	extern/QGLViewer/VRender/Exporter.h	/^			mutable int _sizeY ;$/;"	m	class:vrender::FIGExporter
_sortMethod	extern/QGLViewer/VRender/VRender.h	/^			VRenderSortMethod _sortMethod;$/;"	m	class:vrender::VRenderParams
_vertices	extern/QGLViewer/VRender/Primitive.h	/^        std::vector<Feedback3DColor> _vertices ;$/;"	m	class:vrender::Polygone
_vibility	extern/QGLViewer/VRender/Primitive.h	/^        int _vibility ;$/;"	m	class:vrender::Primitive
_xmax	extern/QGLViewer/VRender/Exporter.h	/^			GLfloat _xmin,_xmax,_ymin,_ymax,_zmin,_zmax ;$/;"	m	class:vrender::Exporter
_xmax	extern/QGLViewer/VRender/ParserGL.h	/^			GLfloat _xmax ;$/;"	m	class:vrender::ParserGL
_xmin	extern/QGLViewer/VRender/Exporter.h	/^			GLfloat _xmin,_xmax,_ymin,_ymax,_zmin,_zmax ;$/;"	m	class:vrender::Exporter
_xmin	extern/QGLViewer/VRender/ParserGL.h	/^			GLfloat _xmin ;$/;"	m	class:vrender::ParserGL
_xyz	extern/QGLViewer/VRender/Vector2.h	/^			double _xyz[2];  \/\/!< The 3 vector components$/;"	m	class:vrender::Vector2
_xyz	extern/QGLViewer/VRender/Vector3.h	/^			double _xyz[3];  \/\/!< The 3 vector components$/;"	m	class:vrender::Vector3
_ymax	extern/QGLViewer/VRender/Exporter.h	/^			GLfloat _xmin,_xmax,_ymin,_ymax,_zmin,_zmax ;$/;"	m	class:vrender::Exporter
_ymax	extern/QGLViewer/VRender/ParserGL.h	/^			GLfloat _ymax ;$/;"	m	class:vrender::ParserGL
_ymin	extern/QGLViewer/VRender/Exporter.h	/^			GLfloat _xmin,_xmax,_ymin,_ymax,_zmin,_zmax ;$/;"	m	class:vrender::Exporter
_ymin	extern/QGLViewer/VRender/ParserGL.h	/^			GLfloat _ymin ;$/;"	m	class:vrender::ParserGL
_zmax	extern/QGLViewer/VRender/Exporter.h	/^			GLfloat _xmin,_xmax,_ymin,_ymax,_zmin,_zmax ;$/;"	m	class:vrender::Exporter
_zmax	extern/QGLViewer/VRender/ParserGL.h	/^			GLfloat _zmax ;$/;"	m	class:vrender::ParserGL
_zmin	extern/QGLViewer/VRender/Exporter.h	/^			GLfloat _xmin,_xmax,_ymin,_ymax,_zmin,_zmax ;$/;"	m	class:vrender::Exporter
_zmin	extern/QGLViewer/VRender/ParserGL.h	/^			GLfloat _zmin ;$/;"	m	class:vrender::ParserGL
a	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		double a,b,c,d;$/;"	m	class:BSPNode	file:
aboutQGLViewer	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::aboutQGLViewer() {$/;"	f	class:QGLViewer
action	extern/QGLViewer/qglviewer.h	/^		MouseAction action;$/;"	m	struct:QGLViewer::MouseActionPrivate
action_	extern/QGLViewer/manipulatedFrame.h	/^    int action_; \/\/ Should be a QGLViewer::MouseAction, but include loop$/;"	m	class:qglviewer::ManipulatedFrame
active	extern/QGLViewer/VRender/gpc.cpp	/^		int                 active;       \/* Active flag \/ vertex count        *\/$/;"	m	class:polygon_node	file:
addCurrentToCameraPath	ViewerWidget.cpp	/^void ViewerWidget::addCurrentToCameraPath(int id, int frame) {$/;"	f	class:octomap::ViewerWidget
addInMouseGrabberPool	extern/QGLViewer/mouseGrabber.cpp	/^void MouseGrabber::addInMouseGrabberPool()$/;"	f	class:MouseGrabber
addKeyFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::addKeyFrame(const Frame& frame)$/;"	f	class:KeyFrameInterpolator
addKeyFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::addKeyFrame(const Frame& frame, float time)$/;"	f	class:KeyFrameInterpolator
addKeyFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::addKeyFrame(const Frame* const frame)$/;"	f	class:KeyFrameInterpolator
addKeyFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::addKeyFrame(const Frame* const frame, float time)$/;"	f	class:KeyFrameInterpolator
addKeyFrameKeyboardModifiers	extern/QGLViewer/qglviewer.cpp	/^Qt::KeyboardModifiers QGLViewer::addKeyFrameKeyboardModifiers() const$/;"	f	class:QGLViewer
addKeyFrameKeyboardModifiers_	extern/QGLViewer/qglviewer.h	/^    Qt::KeyboardModifiers addKeyFrameKeyboardModifiers_, playPathKeyboardModifiers_;$/;"	m	class:QGLViewer
addKeyFrameStateKey	extern/QGLViewer/qglviewer.cpp	/^Qt::KeyboardModifiers QGLViewer::addKeyFrameStateKey() const$/;"	f	class:QGLViewer
addKeyFrameToPath	extern/QGLViewer/camera.cpp	/^void Camera::addKeyFrameToPath(int i)$/;"	f	class:Camera
addNextScan	ViewerGui.cpp	/^void ViewerGui::addNextScan(){$/;"	f	class:octomap::ViewerGui
addNextScans	ViewerGui.cpp	/^void ViewerGui::addNextScans(unsigned scans){$/;"	f	class:octomap::ViewerGui
addOctree	ViewerGui.cpp	/^void ViewerGui::addOctree(octomap::AbstractOcTree* tree, int id) {$/;"	f	class:octomap::ViewerGui
addOctree	ViewerGui.cpp	/^void ViewerGui::addOctree(octomap::AbstractOcTree* tree, int id, octomap::pose6d origin) {$/;"	f	class:octomap::ViewerGui
addSceneObject	ViewerWidget.cpp	/^void ViewerWidget::addSceneObject(SceneObject* obj){$/;"	f	class:octomap::ViewerWidget
addToCameraPath	CameraFollowMode.cpp	/^void CameraFollowMode::addToCameraPath() {$/;"	f	class:CameraFollowMode
add_edge_to_aet	extern/QGLViewer/VRender/gpc.cpp	/^static void add_edge_to_aet(edge_node **aet, edge_node *edge, edge_node *prev)$/;"	f	file:
add_intersection	extern/QGLViewer/VRender/gpc.cpp	/^static void add_intersection(it_node **it, edge_node *edge0, edge_node *edge1,$/;"	f	file:
add_left	extern/QGLViewer/VRender/gpc.cpp	/^static void add_left(polygon_node *p, double x, double y)$/;"	f	file:
add_local_min	extern/QGLViewer/VRender/gpc.cpp	/^static void add_local_min(polygon_node **p, edge_node *edge,$/;"	f	file:
add_right	extern/QGLViewer/VRender/gpc.cpp	/^static void add_right(polygon_node *p, double x, double y)$/;"	f	file:
add_st_edge	extern/QGLViewer/VRender/gpc.cpp	/^static void add_st_edge(st_node **st, it_node **it, edge_node *edge,$/;"	f	file:
add_to_sbtree	extern/QGLViewer/VRender/gpc.cpp	/^static void add_to_sbtree(int *entries, sb_tree **sbtree, double y)$/;"	f	file:
add_vertex	extern/QGLViewer/VRender/gpc.cpp	/^static void add_vertex(vertex_node **t, double x, double y)$/;"	f	file:
address	extern/QGLViewer/vec.h	/^  const double* address() const { qWarning("Vec::address() is deprecated, use operator const double* instead."); return operator const double*(); };$/;"	f	class:qglviewer::Vec
alignWithFrame	extern/QGLViewer/frame.cpp	/^void Frame::alignWithFrame(const Frame* const frame, bool move, float threshold)$/;"	f	class:Frame
alpha	extern/QGLViewer/VRender/Primitive.h	/^        inline GLfloat alpha() const { return _alpha ; }$/;"	f	class:vrender::Feedback3DColor
angle	extern/QGLViewer/quaternion.cpp	/^double Quaternion::angle() const$/;"	f	class:Quaternion
anglefactor	extern/QGLViewer/VRender/Primitive.h	/^        double anglefactor ;		\/\/  Determine a quel point un polygone est plat.$/;"	m	class:vrender::Polygone
animate	extern/QGLViewer/qglviewer.h	/^		virtual void animate() { Q_EMIT animateNeeded(); };$/;"	f	class:QGLViewer
animateNeeded	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::animateNeeded()$/;"	f	class:QGLViewer
animationIsStarted	extern/QGLViewer/qglviewer.h	/^	bool animationIsStarted() const { return animationStarted_; };$/;"	f	class:QGLViewer
animationPeriod	extern/QGLViewer/qglviewer.h	/^	int animationPeriod() const { return animationPeriod_; };$/;"	f	class:QGLViewer
animationPeriod_	extern/QGLViewer/qglviewer.h	/^	int animationPeriod_;   \/\/ period in msecs$/;"	m	class:QGLViewer
animationStarted_	extern/QGLViewer/qglviewer.h	/^	bool animationStarted_; \/\/ animation mode started$/;"	m	class:QGLViewer
animationTimerId_	extern/QGLViewer/qglviewer.h	/^	int animationTimerId_;$/;"	m	class:QGLViewer
appendCurrentToCameraPath	ViewerWidget.cpp	/^void ViewerWidget::appendCurrentToCameraPath(int id) {$/;"	f	class:octomap::ViewerWidget
appendToCameraPath	ViewerWidget.cpp	/^void ViewerWidget::appendToCameraPath(int id, const octomath::Pose6D& pose) {$/;"	f	class:octomap::ViewerWidget
aspectRatio	extern/QGLViewer/camera.h	/^    float aspectRatio() const { return static_cast<float>(screenWidth_)\/static_cast<float>(screenHeight_); };$/;"	f	class:qglviewer::Camera
aspectRatio	extern/QGLViewer/qglviewer.h	/^	float aspectRatio() const { return static_cast<float>(width())\/static_cast<float>(height()); };$/;"	f	class:QGLViewer
axis	extern/QGLViewer/quaternion.cpp	/^Vec Quaternion::axis() const$/;"	f	class:Quaternion
axisIsDrawn	extern/QGLViewer/qglviewer.h	/^	bool axisIsDrawn() const { return axisIsDrawn_; };$/;"	f	class:QGLViewer
axisIsDrawnChanged	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::axisIsDrawnChanged(bool _t1)$/;"	f	class:QGLViewer
axisIsDrawn_	extern/QGLViewer/qglviewer.h	/^	bool axisIsDrawn_;	\/\/ world axis$/;"	m	class:QGLViewer
b	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		double a,b,c,d;$/;"	m	class:BSPNode	file:
backgroundColor	extern/QGLViewer/qglviewer.h	/^	QColor backgroundColor() const { return backgroundColor_; };$/;"	f	class:QGLViewer
backgroundColor_	extern/QGLViewer/qglviewer.h	/^	QColor backgroundColor_, foregroundColor_;$/;"	m	class:QGLViewer
bbox	extern/QGLViewer/VRender/Primitive.cpp	/^AxisAlignedBox_xyz Point::bbox() const$/;"	f	class:Point
bbox	extern/QGLViewer/VRender/Primitive.cpp	/^AxisAlignedBox_xyz Polygone::bbox() const$/;"	f	class:Polygone
bbox	extern/QGLViewer/VRender/Primitive.cpp	/^AxisAlignedBox_xyz Segment::bbox() const$/;"	f	class:Segment
bbox	extern/QGLViewer/VRender/gpc.cpp	/^} bbox;$/;"	t	typeref:struct:bbox_shape	file:
bbox_shape	extern/QGLViewer/VRender/gpc.cpp	/^typedef struct bbox_shape           \/* Contour axis-aligned bounding box *\/$/;"	s	file:
beginSelection	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::beginSelection(const QPoint& point)$/;"	f	class:QGLViewer
blackAndWhite	extern/QGLViewer/ui_VRenderInterface.h	/^    QCheckBox *blackAndWhite;$/;"	m	class:Ui_VRenderInterface
blue	extern/QGLViewer/VRender/Primitive.h	/^        inline GLfloat blue() const { return _blue ; }$/;"	f	class:vrender::Feedback3DColor
boolFromDom	extern/QGLViewer/domUtils.h	/^  static bool boolFromDom(const QDomElement& e, const QString& attribute, bool defValue)$/;"	f	class:DomUtils
bot	extern/QGLViewer/VRender/gpc.cpp	/^		gpc_vertex          bot;          \/* Edge lower (x, y) coordinate      *\/$/;"	m	class:edge_node	file:
bound_list	extern/QGLViewer/VRender/gpc.cpp	/^static edge_node **bound_list(lmt_node **lmt, double y)$/;"	f	file:
bside	extern/QGLViewer/VRender/gpc.cpp	/^		int                 bside[2];     \/* Bundle left \/ right indicators    *\/$/;"	m	class:edge_node	file:
bstate	extern/QGLViewer/VRender/gpc.cpp	/^		bundle_state        bstate[2];    \/* Edge bundle state                 *\/$/;"	m	class:edge_node	file:
bufferTextureHeight_	extern/QGLViewer/qglviewer.h	/^	int bufferTextureWidth_, bufferTextureHeight_;$/;"	m	class:QGLViewer
bufferTextureId	extern/QGLViewer/qglviewer.cpp	/^GLuint QGLViewer::bufferTextureId() const$/;"	f	class:QGLViewer
bufferTextureId_	extern/QGLViewer/qglviewer.h	/^	GLuint bufferTextureId_;$/;"	m	class:QGLViewer
bufferTextureMaxU	extern/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU() const { return bufferTextureMaxU_; };$/;"	f	class:QGLViewer
bufferTextureMaxU_	extern/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU_, bufferTextureMaxV_;$/;"	m	class:QGLViewer
bufferTextureMaxV	extern/QGLViewer/qglviewer.h	/^	float bufferTextureMaxV() const { return bufferTextureMaxV_; };$/;"	f	class:QGLViewer
bufferTextureMaxV_	extern/QGLViewer/qglviewer.h	/^	float bufferTextureMaxU_, bufferTextureMaxV_;$/;"	m	class:QGLViewer
bufferTextureWidth_	extern/QGLViewer/qglviewer.h	/^	int bufferTextureWidth_, bufferTextureHeight_;$/;"	m	class:QGLViewer
buildPrecedenceGraph	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::buildPrecedenceGraph(vector<PtrPrimitive>& primitive_tab,$/;"	f	class:vrender::TopologicalSortUtils
build_intersection_table	extern/QGLViewer/VRender/gpc.cpp	/^static void build_intersection_table(it_node **it, edge_node *aet, double dy)$/;"	f	file:
build_lmt	extern/QGLViewer/VRender/gpc.cpp	/^static edge_node *build_lmt(lmt_node **lmt, sb_tree **sbtree,$/;"	f	file:
build_sbt	extern/QGLViewer/VRender/gpc.cpp	/^static void build_sbt(int *entries, double *sbt, sb_tree *sbtree)$/;"	f	file:
bundle	extern/QGLViewer/VRender/gpc.cpp	/^		int                 bundle[2][2]; \/* Bundle edge flags                 *\/$/;"	m	class:edge_node	file:
bundle_state	extern/QGLViewer/VRender/gpc.cpp	/^} bundle_state;$/;"	t	typeref:enum:__anon10	file:
button	extern/QGLViewer/qglviewer.h	/^        Qt::MouseButtons button;$/;"	m	struct:QGLViewer::ClickActionPrivate
buttonsBefore	extern/QGLViewer/qglviewer.h	/^        Qt::MouseButtons buttonsBefore; \/\/ only defined when doubleClick is true$/;"	m	struct:QGLViewer::ClickActionPrivate
c	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		double a,b,c,d;$/;"	m	class:BSPNode	file:
c	extern/QGLViewer/VRender/Primitive.h	/^        double c() const { return _c ; }$/;"	f	class:vrender::Polygone
camera	extern/QGLViewer/constraint.h	/^    const Camera* camera() const { return camera_; };$/;"	f	class:qglviewer::CameraConstraint
camera	extern/QGLViewer/qglviewer.h	/^	qglviewer::Camera* camera() const { return camera_; };$/;"	f	class:QGLViewer
cameraCoordinatesOf	extern/QGLViewer/camera.h	/^    Vec cameraCoordinatesOf(const Vec& src) const { return frame()->coordinatesOf(src); };$/;"	f	class:qglviewer::Camera
cameraIsEdited	extern/QGLViewer/qglviewer.h	/^	bool cameraIsEdited() const { return cameraIsEdited_; }$/;"	f	class:QGLViewer
cameraIsEditedChanged	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::cameraIsEditedChanged(bool _t1)$/;"	f	class:QGLViewer
cameraIsEdited_	extern/QGLViewer/qglviewer.h	/^	bool cameraIsEdited_;$/;"	m	class:QGLViewer
cameraIsInRevolveMode	extern/QGLViewer/qglviewer.cpp	/^bool QGLViewer::cameraIsInRevolveMode() const$/;"	f	class:QGLViewer
cameraPathFinished	ViewerWidget.cpp	/^void ViewerWidget::cameraPathFinished() {$/;"	f	class:octomap::ViewerWidget
cameraPathFrameChanged	CameraFollowMode.cpp	/^void CameraFollowMode::cameraPathFrameChanged(int id, int current_camera_frame) {$/;"	f	class:CameraFollowMode
cameraPathInterpolated	ViewerWidget.cpp	/^void ViewerWidget::cameraPathInterpolated() {$/;"	f	class:octomap::ViewerWidget
cameraPathKeysString	extern/QGLViewer/qglviewer.cpp	/^QString QGLViewer::cameraPathKeysString() const$/;"	f	class:QGLViewer
cameraPathStopped	CameraFollowMode.cpp	/^void CameraFollowMode::cameraPathStopped(int id) {$/;"	f	class:CameraFollowMode
camera_	extern/QGLViewer/constraint.h	/^    const Camera* const camera_;$/;"	m	class:qglviewer::CameraConstraint
camera_	extern/QGLViewer/qglviewer.h	/^	qglviewer::Camera* camera_;$/;"	m	class:QGLViewer
cancelButton	extern/QGLViewer/ui_ImageInterface.h	/^    QPushButton *cancelButton;$/;"	m	class:Ui_ImageInterface
centerScene	extern/QGLViewer/camera.cpp	/^void Camera::centerScene()$/;"	f	class:Camera
changeTreeDepth	ViewerGui.cpp	/^void ViewerGui::changeTreeDepth(int depth){$/;"	f	class:octomap::ViewerGui
checkAndAddEdgeToGraph	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::checkAndAddEdgeToGraph(int a,int b,vector< vector<int> >& precedence_graph)$/;"	f	class:vrender::TopologicalSortUtils
checkFileName	extern/QGLViewer/saveSnapshot.cpp	/^static bool checkFileName(QString& fileName, QWidget* widget, const QString& snapshotFormat)$/;"	f	file:
checkIfGrabsMouse	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::checkIfGrabsMouse(int x, int y, const Camera* const camera)$/;"	f	class:ManipulatedFrame
checkPoint	extern/QGLViewer/VRender/ParserGL.cpp	/^PtrPrimitive ParserUtils::checkPoint(Point *& P)$/;"	f	class:ParserUtils
checkPolygon	extern/QGLViewer/VRender/ParserGL.cpp	/^PtrPrimitive ParserUtils::checkPolygon(Polygone *& P)$/;"	f	class:ParserUtils
checkSegment	extern/QGLViewer/VRender/ParserGL.cpp	/^PtrPrimitive ParserUtils::checkSegment(Segment *& P)$/;"	f	class:ParserUtils
clear	OcTreeDrawer.cpp	/^  void OcTreeDrawer::clear() {$/;"	f	class:octomap::OcTreeDrawer
clear	PointcloudDrawer.cpp	/^  void PointcloudDrawer::clear(){$/;"	f	class:octomap::PointcloudDrawer
clear	TrajectoryDrawer.cpp	/^  void TrajectoryDrawer::clear(){$/;"	f	class:octomap::TrajectoryDrawer
clearAll	ViewerWidget.cpp	/^void ViewerWidget::clearAll(){$/;"	f	class:octomap::ViewerWidget
clearCameraPath	CameraFollowMode.cpp	/^void CameraFollowMode::clearCameraPath() {$/;"	f	class:CameraFollowMode
clearCubes	OcTreeDrawer.cpp	/^  void OcTreeDrawer::clearCubes(GLfloat*** glArray,$/;"	f	class:octomap::OcTreeDrawer
clearMouseGrabberPool	extern/QGLViewer/mouseGrabber.cpp	/^void MouseGrabber::clearMouseGrabberPool(bool autoDelete)$/;"	f	class:MouseGrabber
clearOcTreeSelection	OcTreeDrawer.cpp	/^  void OcTreeDrawer::clearOcTreeSelection(){$/;"	f	class:octomap::OcTreeDrawer
clearOcTreeStructure	OcTreeDrawer.cpp	/^  void OcTreeDrawer::clearOcTreeStructure(){$/;"	f	class:octomap::OcTreeDrawer
clickAction	extern/QGLViewer/qglviewer.cpp	/^QGLViewer::ClickAction QGLViewer::clickAction(int state, bool doubleClick, Qt::MouseButtons buttonsBefore) const$/;"	f	class:QGLViewer
clickActionString	extern/QGLViewer/qglviewer.cpp	/^QString QGLViewer::clickActionString(QGLViewer::ClickAction ca)$/;"	f	class:QGLViewer
clickBinding_	extern/QGLViewer/qglviewer.h	/^	QMap<ClickActionPrivate, ClickAction> clickBinding_;$/;"	m	class:QGLViewer
closeEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::closeEvent(QCloseEvent *e)$/;"	f	class:QGLViewer
closedPath	extern/QGLViewer/keyFrameInterpolator.h	/^    bool closedPath() const { return closedPath_; };$/;"	f	class:qglviewer::KeyFrameInterpolator
closedPath_	extern/QGLViewer/keyFrameInterpolator.h	/^    bool closedPath_;$/;"	m	class:qglviewer::KeyFrameInterpolator
colorBackground	extern/QGLViewer/ui_VRenderInterface.h	/^    QCheckBox *colorBackground;$/;"	m	class:Ui_VRenderInterface
computeModelViewMatrix	extern/QGLViewer/camera.cpp	/^void Camera::computeModelViewMatrix() const$/;"	f	class:Camera
computeMouseSpeed	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::computeMouseSpeed(const QMouseEvent* const e)$/;"	f	class:ManipulatedFrame
computeProjectionMatrix	extern/QGLViewer/camera.cpp	/^void Camera::computeProjectionMatrix() const$/;"	f	class:Camera
computeRelativePosition	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^int PrimitivePositioning::computeRelativePosition(const Polygone *P,const Segment *S)$/;"	f	class:PrimitivePositioning
computeRelativePosition	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^int PrimitivePositioning::computeRelativePosition(const Polygone *P1,const Polygone *P2)$/;"	f	class:PrimitivePositioning
computeRelativePosition	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^int PrimitivePositioning::computeRelativePosition(const Polygone *Q,const Point *P)$/;"	f	class:PrimitivePositioning
computeRelativePosition	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^int PrimitivePositioning::computeRelativePosition(const Primitive *p1,const Primitive *p2)$/;"	f	class:PrimitivePositioning
computeRelativePosition	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^int PrimitivePositioning::computeRelativePosition(const Segment *S1,const Segment *S2)$/;"	f	class:PrimitivePositioning
computeTangent	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::KeyFrame::computeTangent(const KeyFrame* const prev, const KeyFrame* const next)$/;"	f	class:KeyFrameInterpolator::KeyFrame
connectAllCameraKFIInterpolatedSignals	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::connectAllCameraKFIInterpolatedSignals(bool connection)$/;"	f	class:QGLViewer
constrainRotation	extern/QGLViewer/constraint.cpp	/^void CameraConstraint::constrainRotation(Quaternion& rotation, Frame* const frame)$/;"	f	class:CameraConstraint
constrainRotation	extern/QGLViewer/constraint.cpp	/^void LocalConstraint::constrainRotation(Quaternion& rotation, Frame* const)$/;"	f	class:LocalConstraint
constrainRotation	extern/QGLViewer/constraint.cpp	/^void WorldConstraint::constrainRotation(Quaternion& rotation, Frame* const frame)$/;"	f	class:WorldConstraint
constrainRotation	extern/QGLViewer/constraint.h	/^    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::AxisPlaneConstraint
constrainRotation	extern/QGLViewer/constraint.h	/^    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::Constraint
constrainTranslation	extern/QGLViewer/constraint.cpp	/^void CameraConstraint::constrainTranslation(Vec& translation, Frame* const frame)$/;"	f	class:CameraConstraint
constrainTranslation	extern/QGLViewer/constraint.cpp	/^void LocalConstraint::constrainTranslation(Vec& translation, Frame* const frame)$/;"	f	class:LocalConstraint
constrainTranslation	extern/QGLViewer/constraint.cpp	/^void WorldConstraint::constrainTranslation(Vec& translation, Frame* const frame)$/;"	f	class:WorldConstraint
constrainTranslation	extern/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::AxisPlaneConstraint
constrainTranslation	extern/QGLViewer/constraint.h	/^    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };$/;"	f	class:qglviewer::Constraint
constraint	extern/QGLViewer/frame.h	/^    Constraint* constraint() const { return constraint_; }$/;"	f	class:qglviewer::Frame
constraint_	extern/QGLViewer/frame.h	/^    Constraint* constraint_;$/;"	m	class:qglviewer::Frame
contour	extern/QGLViewer/VRender/gpc.h	/^  gpc_vertex_list    *contour;      \/* Contour array pointer             *\/$/;"	m	struct:__anon4
convertClickToLine	extern/QGLViewer/camera.cpp	/^void Camera::convertClickToLine(const QPoint& pixel, Vec& orig, Vec& dir) const$/;"	f	class:Camera
convertKeyboardModifiers	extern/QGLViewer/qglviewer.cpp	/^static Qt::KeyboardModifiers convertKeyboardModifiers(Qt::KeyboardModifiers modifiers)$/;"	f	file:
convertToKeyboardModifiers	extern/QGLViewer/qglviewer.cpp	/^static int convertToKeyboardModifiers(int state)$/;"	f	file:
convertToShortModifier	extern/QGLViewer/qglviewer.cpp	/^static int convertToShortModifier(int state)$/;"	f	file:
coordinatesOf	extern/QGLViewer/frame.cpp	/^Vec Frame::coordinatesOf(const Vec& src) const$/;"	f	class:Frame
coordinatesOfFrom	extern/QGLViewer/frame.cpp	/^Vec Frame::coordinatesOfFrom(const Vec& src, const Frame* const from) const$/;"	f	class:Frame
coordinatesOfIn	extern/QGLViewer/frame.cpp	/^Vec Frame::coordinatesOfIn(const Vec& src, const Frame* const in) const$/;"	f	class:Frame
copyBufferToTexture	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::copyBufferToTexture(GLint internalFormat, GLenum format)$/;"	f	class:QGLViewer
count_contours	extern/QGLViewer/VRender/gpc.cpp	/^static int count_contours(polygon_node *polygon)$/;"	f	file:
count_optimal_vertices	extern/QGLViewer/VRender/gpc.cpp	/^static int count_optimal_vertices(gpc_vertex_list c)$/;"	f	file:
count_tristrips	extern/QGLViewer/VRender/gpc.cpp	/^static int count_tristrips(polygon_node *tn)$/;"	f	file:
createGPCPolygon_XY	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^gpc_polygon PrimitivePositioning::createGPCPolygon_XY(const Polygone *P)$/;"	f	class:PrimitivePositioning
create_contour_bboxes	extern/QGLViewer/VRender/gpc.cpp	/^static bbox *create_contour_bboxes(gpc_polygon *p)$/;"	f	file:
cross	extern/QGLViewer/vec.h	/^  friend Vec cross(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec
cullBackFaces	extern/QGLViewer/ui_VRenderInterface.h	/^    QCheckBox *cullBackFaces;$/;"	m	class:Ui_VRenderInterface
currentFPS	extern/QGLViewer/qglviewer.h	/^	float currentFPS() { return f_p_s_; };$/;"	f	class:QGLViewer
currentFrameValid_	extern/QGLViewer/keyFrameInterpolator.h	/^    bool currentFrameValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator
currentFrame_	extern/QGLViewer/keyFrameInterpolator.h	/^    QMutableListIterator<KeyFrame*>* currentFrame_[4];$/;"	m	class:qglviewer::KeyFrameInterpolator
currentFrame_	extern/QGLViewer/keyFrameInterpolator.h	/^    QPtrListIterator<KeyFrame>* currentFrame_[4];$/;"	m	class:qglviewer::KeyFrameInterpolator
d	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		double a,b,c,d;$/;"	m	class:BSPNode	file:
dataChanged	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::dataChanged(){$/;"	f	class:ViewerSettingsPanelCamera
debug_printBuffer	extern/QGLViewer/VRender/ParserGL.cpp	/^void ParserUtils::debug_printBuffer(GLint size, GLfloat * buffer)$/;"	f	class:ParserUtils
defaultConstructor	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::defaultConstructor()$/;"	f	class:QGLViewer
deformedBallQuaternion	extern/QGLViewer/manipulatedFrame.cpp	/^Quaternion ManipulatedFrame::deformedBallQuaternion(int x, int y, float cx, float cy, const Camera* const camera)$/;"	f	class:ManipulatedFrame
delay_	extern/QGLViewer/manipulatedFrame.h	/^    int delay_;$/;"	m	class:qglviewer::ManipulatedFrame
delayedFullScreen	extern/QGLViewer/qglviewer.h	/^			void delayedFullScreen() { move(prevPos_); setFullScreen(); };$/;"	f	class:QGLViewer
deleteCameraPath	ViewerWidget.cpp	/^void ViewerWidget::deleteCameraPath(int id) {$/;"	f	class:octomap::ViewerWidget
deletePath	extern/QGLViewer/camera.cpp	/^void Camera::deletePath(int i)$/;"	f	class:Camera
deletePath	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::deletePath()$/;"	f	class:KeyFrameInterpolator
depth	extern/QGLViewer/VRender/ParserGL.cpp	/^  GLfloat depth;$/;"	m	struct:_DepthIndex	file:
depth	extern/QGLViewer/VRender/Primitive.h	/^        int depth() const { return _depth ; }$/;"	f	class:vrender::Primitive
det	extern/QGLViewer/camera.cpp	/^static float det(float m00,float m01,float m02,$/;"	f	file:
dirIsFixed_	extern/QGLViewer/manipulatedFrame.h	/^    bool dirIsFixed_;$/;"	m	class:qglviewer::ManipulatedFrame
disabledMouseGrabbers_	extern/QGLViewer/qglviewer.h	/^	QMap<size_t, bool> disabledMouseGrabbers_;$/;"	m	class:QGLViewer
displayFPS	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::displayFPS()$/;"	f	class:QGLViewer
displayMessage	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::displayMessage(const QString& message, int delay)$/;"	f	class:QGLViewer
displayMessage_	extern/QGLViewer/qglviewer.h	/^	bool displayMessage_;$/;"	m	class:QGLViewer
displaysInStereo	extern/QGLViewer/qglviewer.h	/^	bool displaysInStereo() const { return stereo_; }$/;"	f	class:QGLViewer
distanceToSceneCenter	extern/QGLViewer/camera.cpp	/^float Camera::distanceToSceneCenter() const$/;"	f	class:Camera
domElement	extern/QGLViewer/camera.cpp	/^QDomElement Camera::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:Camera
domElement	extern/QGLViewer/frame.cpp	/^QDomElement Frame::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:Frame
domElement	extern/QGLViewer/keyFrameInterpolator.cpp	/^QDomElement KeyFrameInterpolator::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:KeyFrameInterpolator
domElement	extern/QGLViewer/manipulatedCameraFrame.cpp	/^QDomElement ManipulatedCameraFrame::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:ManipulatedCameraFrame
domElement	extern/QGLViewer/manipulatedFrame.cpp	/^QDomElement ManipulatedFrame::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:ManipulatedFrame
domElement	extern/QGLViewer/qglviewer.cpp	/^QDomElement QGLViewer::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:QGLViewer
domElement	extern/QGLViewer/quaternion.cpp	/^QDomElement Quaternion::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:Quaternion
domElement	extern/QGLViewer/vec.cpp	/^QDomElement Vec::domElement(const QString& name, QDomDocument& document) const$/;"	f	class:Vec
dot	extern/QGLViewer/quaternion.h	/^		static double dot(const Quaternion& a, const Quaternion& b) { return a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3]; }$/;"	f	class:qglviewer::Quaternion
doubleClick	extern/QGLViewer/qglviewer.h	/^		bool doubleClick;$/;"	m	struct:QGLViewer::ClickActionPrivate
doubleFromDom	extern/QGLViewer/domUtils.h	/^  static double doubleFromDom(const QDomElement& e, const QString& attribute, double defValue)$/;"	f	class:DomUtils
draw	OcTreeDrawer.cpp	/^  void OcTreeDrawer::draw() const {$/;"	f	class:octomap::OcTreeDrawer
draw	PointcloudDrawer.cpp	/^  void PointcloudDrawer::draw() const{$/;"	f	class:octomap::PointcloudDrawer
draw	SelectionBox.cpp	/^void SelectionBox::draw(bool withNames){$/;"	f	class:octomap::SelectionBox
draw	TrajectoryDrawer.cpp	/^  void TrajectoryDrawer::draw() const{$/;"	f	class:octomap::TrajectoryDrawer
draw	ViewerWidget.cpp	/^void ViewerWidget::draw(){$/;"	f	class:octomap::ViewerWidget
draw	extern/QGLViewer/camera.cpp	/^void Camera::draw(bool drawFarPlane, float scale) const$/;"	f	class:Camera
draw	extern/QGLViewer/qglviewer.h	/^	virtual void draw() {};$/;"	f	class:QGLViewer
drawAllPaths	extern/QGLViewer/camera.cpp	/^void Camera::drawAllPaths()$/;"	f	class:Camera
drawArrow	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::drawArrow(const Vec& from, const Vec& to, float radius, int nbSubdivisions)$/;"	f	class:QGLViewer
drawArrow	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::drawArrow(float length, float radius, int nbSubdivisions)$/;"	f	class:QGLViewer
drawAxes	OcTreeDrawer.cpp	/^  void OcTreeDrawer::drawAxes() const {$/;"	f	class:octomap::OcTreeDrawer
drawAxis	SelectionBox.cpp	/^void SelectionBox::drawAxis(float length) const$/;"	f	class:octomap::SelectionBox
drawAxis	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::drawAxis(float length)$/;"	f	class:QGLViewer
drawCamera	extern/QGLViewer/camera.cpp	/^void Camera::drawCamera(float, float, float)$/;"	f	class:Camera
drawCamera	extern/QGLViewer/keyFrameInterpolator.cpp	/^static void drawCamera(float scale)$/;"	f	file:
drawCubes	OcTreeDrawer.cpp	/^  void OcTreeDrawer::drawCubes(GLfloat** cubeArray, unsigned int cubeArraySize,$/;"	f	class:octomap::OcTreeDrawer
drawFinished	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::drawFinished(bool _t1)$/;"	f	class:QGLViewer
drawFreeVoxels	OcTreeDrawer.cpp	/^  void OcTreeDrawer::drawFreeVoxels() const {$/;"	f	class:octomap::OcTreeDrawer
drawGrid	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::drawGrid(float size, int nbSubdivisions)$/;"	f	class:QGLViewer
drawLight	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::drawLight(GLenum light, float scale) const$/;"	f	class:QGLViewer
drawNeeded	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::drawNeeded()$/;"	f	class:QGLViewer
drawOccupiedVoxels	OcTreeDrawer.cpp	/^  void OcTreeDrawer::drawOccupiedVoxels() const {$/;"	f	class:octomap::OcTreeDrawer
drawOctreeGrid	OcTreeDrawer.cpp	/^  void OcTreeDrawer::drawOctreeGrid() const {$/;"	f	class:octomap::OcTreeDrawer
drawPath	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::drawPath(int mask, int nbFrames, float scale)$/;"	f	class:KeyFrameInterpolator
drawSelection	OcTreeDrawer.cpp	/^  void OcTreeDrawer::drawSelection() const {$/;"	f	class:octomap::OcTreeDrawer
drawText	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::drawText(int x, int y, const QString& text, const QFont& fnt)$/;"	f	class:QGLViewer
drawVectorial	extern/QGLViewer/qglviewer.h	/^	void drawVectorial() { paintGL(); };$/;"	f	class:QGLViewer
drawVectorial	extern/QGLViewer/saveSnapshot.cpp	/^void drawVectorial(void* param)$/;"	f
drawVisualHints	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::drawVisualHints()$/;"	f	class:QGLViewer
drawWithNames	ViewerWidget.cpp	/^void ViewerWidget::drawWithNames(){$/;"	f	class:octomap::ViewerWidget
drawWithNames	extern/QGLViewer/qglviewer.h	/^	virtual void drawWithNames() {};$/;"	f	class:QGLViewer
driveSpeed_	extern/QGLViewer/manipulatedCameraFrame.h	/^    float driveSpeed_;$/;"	m	class:qglviewer::ManipulatedCameraFrame
duration	extern/QGLViewer/keyFrameInterpolator.cpp	/^float KeyFrameInterpolator::duration() const$/;"	f	class:KeyFrameInterpolator
dx	extern/QGLViewer/VRender/gpc.cpp	/^		double              dx;           \/* Change in x for a unit y increase *\/$/;"	m	class:edge_node	file:
dx	extern/QGLViewer/VRender/gpc.cpp	/^  double              dx;           \/* Change in x for a unit y increase *\/$/;"	m	struct:st_shape	file:
edge	extern/QGLViewer/VRender/gpc.cpp	/^  edge_node          *edge;         \/* Pointer to AET edge               *\/$/;"	m	struct:st_shape	file:
edge_node	extern/QGLViewer/VRender/gpc.cpp	/^		edge_node()$/;"	f	class:edge_node
edge_node	extern/QGLViewer/VRender/gpc.cpp	/^class edge_node$/;"	c	file:
enableHeightColorMode	ViewerWidget.cpp	/^void ViewerWidget::enableHeightColorMode (bool enabled) {$/;"	f	class:octomap::ViewerWidget
enableOcTree	OcTreeDrawer.cpp	/^  void OcTreeDrawer::enableOcTree(bool enabled) {$/;"	f	class:octomap::OcTreeDrawer
enablePrintoutMode	ViewerWidget.cpp	/^void ViewerWidget::enablePrintoutMode(bool enabled) {$/;"	f	class:octomap::ViewerWidget
enableSelectionBox	ViewerWidget.cpp	/^void ViewerWidget::enableSelectionBox(bool enabled) {$/;"	f	class:octomap::ViewerWidget
enableSemanticColoring	ViewerWidget.cpp	/^void ViewerWidget::enableSemanticColoring (bool enabled) {$/;"	f	class:octomap::ViewerWidget
endReached	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^void qglviewer::KeyFrameInterpolator::endReached()$/;"	f	class:qglviewer::KeyFrameInterpolator
endSelection	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::endSelection(const QPoint& point)$/;"	f	class:QGLViewer
equation	extern/QGLViewer/VRender/Primitive.cpp	/^double Polygone::equation(const Vector3& v) const$/;"	f	class:Polygone
error	extern/QGLViewer/VRender/VRender.h	/^			int& error() { return _error ; }$/;"	f	class:vrender::VRenderParams
exp	extern/QGLViewer/quaternion.cpp	/^Quaternion Quaternion::exp()$/;"	f	class:Quaternion
expandFrustum	extern/QGLViewer/ui_ImageInterface.h	/^    QCheckBox *expandFrustum;$/;"	m	class:Ui_ImageInterface
exportToFile	extern/QGLViewer/VRender/Exporter.cpp	/^void Exporter::exportToFile(const QString& filename,$/;"	f	class:Exporter
extension	extern/QGLViewer/saveSnapshot.cpp	/^static QMap<QString, QString> extension;$/;"	v	file:
f_p_s_	extern/QGLViewer/qglviewer.h	/^	float f_p_s_;$/;"	m	class:QGLViewer
fastDraw	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::fastDraw()$/;"	f	class:QGLViewer
fieldOfView	extern/QGLViewer/camera.h	/^    float fieldOfView() const { return fieldOfView_; };$/;"	f	class:qglviewer::Camera
fieldOfView_	extern/QGLViewer/camera.h	/^    float fieldOfView_; \/\/ in radians$/;"	m	class:qglviewer::Camera
filename	extern/QGLViewer/VRender/VRender.h	/^			const QString filename() { return _filename ; }$/;"	f	class:vrender::VRenderParams
fils_moins	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		BSPNode *fils_moins;$/;"	m	class:BSPNode	file:
fils_plus	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		BSPNode *fils_plus;$/;"	m	class:BSPNode	file:
firstTime	extern/QGLViewer/keyFrameInterpolator.cpp	/^float KeyFrameInterpolator::firstTime() const$/;"	f	class:KeyFrameInterpolator
first_bound	extern/QGLViewer/VRender/gpc.cpp	/^		edge_node          *first_bound;  \/* Pointer to bound list             *\/$/;"	m	class:lmt_node	file:
fitBoundingBox	extern/QGLViewer/camera.cpp	/^void Camera::fitBoundingBox(const Vec& min, const Vec& max)$/;"	f	class:Camera
fitScreenRegion	extern/QGLViewer/camera.cpp	/^void Camera::fitScreenRegion(const QRect& rectangle)$/;"	f	class:Camera
fitSphere	extern/QGLViewer/camera.cpp	/^void Camera::fitSphere(const Vec& center, float radius)$/;"	f	class:Camera
flipOrientationIfNeeded	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::KeyFrame::flipOrientationIfNeeded(const Quaternion& prev)$/;"	f	class:KeyFrameInterpolator::KeyFrame
floatFromDom	extern/QGLViewer/domUtils.h	/^  static float floatFromDom(const QDomElement& e, const QString& attribute, float defValue)$/;"	f	class:DomUtils
flySpeed	extern/QGLViewer/camera.h	/^    float flySpeed() const { return frame()->flySpeed(); };$/;"	f	class:qglviewer::Camera
flySpeed	extern/QGLViewer/manipulatedCameraFrame.h	/^    float flySpeed() const { return flySpeed_; };$/;"	f	class:qglviewer::ManipulatedCameraFrame
flySpeed_	extern/QGLViewer/manipulatedCameraFrame.h	/^    float flySpeed_;$/;"	m	class:qglviewer::ManipulatedCameraFrame
flyTimer_	extern/QGLViewer/manipulatedCameraFrame.h	/^    QTimer flyTimer_;$/;"	m	class:qglviewer::ManipulatedCameraFrame
flyUpVector	extern/QGLViewer/manipulatedCameraFrame.h	/^    Vec flyUpVector() const { return flyUpVector_; };$/;"	f	class:qglviewer::ManipulatedCameraFrame
flyUpVector_	extern/QGLViewer/manipulatedCameraFrame.h	/^    Vec flyUpVector_;$/;"	m	class:qglviewer::ManipulatedCameraFrame
flyUpdate	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::flyUpdate()$/;"	f	class:ManipulatedCameraFrame
focusDistance	extern/QGLViewer/camera.h	/^    float focusDistance() const { return focusDistance_; };$/;"	f	class:qglviewer::Camera
focusDistance_	extern/QGLViewer/camera.h	/^    float focusDistance_;	     \/\/ in scene units$/;"	m	class:qglviewer::Camera
followCameraPath	CameraFollowMode.cpp	/^void CameraFollowMode::followCameraPath() {$/;"	f	class:CameraFollowMode
followRobotPath	CameraFollowMode.cpp	/^void CameraFollowMode::followRobotPath() {$/;"	f	class:CameraFollowMode
followRobotTrajectory	ViewerSettingsPanelCamera.cpp	/^bool ViewerSettingsPanelCamera::followRobotTrajectory(){$/;"	f	class:ViewerSettingsPanelCamera
foregroundColor	extern/QGLViewer/qglviewer.h	/^	QColor foregroundColor() const { return foregroundColor_; };$/;"	f	class:QGLViewer
foregroundColor_	extern/QGLViewer/qglviewer.h	/^	QColor backgroundColor_, foregroundColor_;$/;"	m	class:QGLViewer
format	extern/QGLViewer/VRender/VRender.h	/^			int format()        { return _format; }$/;"	f	class:vrender::VRenderParams
formatClickActionPrivate	extern/QGLViewer/qglviewer.cpp	/^QString QGLViewer::formatClickActionPrivate(ClickActionPrivate cap)$/;"	f	class:QGLViewer
formats	extern/QGLViewer/saveSnapshot.cpp	/^static QString formats;$/;"	v	file:
fpsCounter_	extern/QGLViewer/qglviewer.h	/^	unsigned int fpsCounter_;$/;"	m	class:QGLViewer
fpsString_	extern/QGLViewer/qglviewer.h	/^	QString fpsString_;$/;"	m	class:QGLViewer
fpsTime_	extern/QGLViewer/qglviewer.h	/^	QTime fpsTime_;$/;"	m	class:QGLViewer
frame	extern/QGLViewer/camera.h	/^    ManipulatedCameraFrame* frame() const { return frame_; };$/;"	f	class:qglviewer::Camera
frame	extern/QGLViewer/keyFrameInterpolator.h	/^      const Frame* frame() const { return frame_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame
frame	extern/QGLViewer/keyFrameInterpolator.h	/^    Frame* frame() const { return frame_; };$/;"	f	class:qglviewer::KeyFrameInterpolator
frameBufferSnapshot	extern/QGLViewer/saveSnapshot.cpp	/^QImage QGLViewer::frameBufferSnapshot()$/;"	f	class:QGLViewer
frame_	extern/QGLViewer/camera.h	/^    ManipulatedCameraFrame* frame_;$/;"	m	class:qglviewer::Camera
frame_	extern/QGLViewer/keyFrameInterpolator.h	/^      const Frame* const frame_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame
frame_	extern/QGLViewer/keyFrameInterpolator.h	/^    Frame* frame_;$/;"	m	class:qglviewer::KeyFrameInterpolator
free_sbtree	extern/QGLViewer/VRender/gpc.cpp	/^static void free_sbtree(sb_tree **sbtree)$/;"	f	file:
fullScreen_	extern/QGLViewer/qglviewer.h	/^	bool fullScreen_;	\/\/ full screen mode$/;"	m	class:QGLViewer
generateCube	OcTreeDrawer.cpp	/^  unsigned int OcTreeDrawer::generateCube(const octomap::OcTreeVolume& v,$/;"	f	class:octomap::OcTreeDrawer
generateCubes	OcTreeDrawer.cpp	/^  void OcTreeDrawer::generateCubes(const std::list<octomap::OcTreeVolume>& voxels,$/;"	f	class:octomap::OcTreeDrawer
generateOctree	ViewerGui.cpp	/^void ViewerGui::generateOctree() {$/;"	f	class:octomap::ViewerGui
getAxisAngle	extern/QGLViewer/quaternion.cpp	/^void Quaternion::getAxisAngle(Vec& axis, float& angle) const$/;"	f	class:Quaternion
getBBXMax	SelectionBox.cpp	/^void SelectionBox::getBBXMax(float& x, float& y, float& z) const {$/;"	f	class:octomap::SelectionBox
getBBXMin	SelectionBox.cpp	/^void SelectionBox::getBBXMin(float& x, float& y, float& z) const {$/;"	f	class:octomap::SelectionBox
getCameraCoordinatesOf	extern/QGLViewer/camera.cpp	/^void Camera::getCameraCoordinatesOf(const float src[3], float res[3]) const$/;"	f	class:Camera
getClickButtonState	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::getClickButtonState(ClickAction ca, int& state, bool& doubleClick, Qt::MouseButtons& buttonsBefore) const$/;"	f	class:QGLViewer
getCoordinatesOf	extern/QGLViewer/frame.cpp	/^void Frame::getCoordinatesOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getCoordinatesOfFrom	extern/QGLViewer/frame.cpp	/^void Frame::getCoordinatesOfFrom(const float src[3], float res[3], const Frame* const from) const$/;"	f	class:Frame
getCoordinatesOfIn	extern/QGLViewer/frame.cpp	/^void Frame::getCoordinatesOfIn(const float src[3], float res[3], const Frame* const in) const$/;"	f	class:Frame
getFrustumPlanesCoefficients	extern/QGLViewer/camera.cpp	/^void Camera::getFrustumPlanesCoefficients(GLdouble coef[6][4]) const$/;"	f	class:Camera
getGrabbedFrame	SelectionBox.cpp	/^int SelectionBox::getGrabbedFrame() const {$/;"	f	class:octomap::SelectionBox
getInverseCoordinatesOf	extern/QGLViewer/frame.cpp	/^void Frame::getInverseCoordinatesOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getInverseMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::getInverseMatrix(GLdouble m[16]) const$/;"	f	class:Quaternion
getInverseMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::getInverseMatrix(GLdouble m[4][4]) const$/;"	f	class:Quaternion
getInverseRotationMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::getInverseRotationMatrix(float m[3][3]) const$/;"	f	class:Quaternion
getInverseTransformOf	extern/QGLViewer/frame.cpp	/^void Frame::getInverseTransformOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getLocalCoordinatesOf	extern/QGLViewer/frame.cpp	/^void Frame::getLocalCoordinatesOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getLocalInverseCoordinatesOf	extern/QGLViewer/frame.cpp	/^void Frame::getLocalInverseCoordinatesOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getLocalInverseTransformOf	extern/QGLViewer/frame.cpp	/^void Frame::getLocalInverseTransformOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getLocalTransformOf	extern/QGLViewer/frame.cpp	/^void Frame::getLocalTransformOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getMatrix	extern/QGLViewer/frame.cpp	/^void Frame::getMatrix(GLdouble m[16]) const$/;"	f	class:Frame
getMatrix	extern/QGLViewer/frame.cpp	/^void Frame::getMatrix(GLdouble m[4][4]) const$/;"	f	class:Frame
getMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::getMatrix(GLdouble m[16]) const$/;"	f	class:Quaternion
getMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::getMatrix(GLdouble m[4][4]) const$/;"	f	class:Quaternion
getModelViewMatrix	extern/QGLViewer/camera.cpp	/^void Camera::getModelViewMatrix(GLdouble m[16]) const$/;"	f	class:Camera
getModelViewMatrix	extern/QGLViewer/camera.cpp	/^void Camera::getModelViewMatrix(GLfloat m[16]) const$/;"	f	class:Camera
getModelViewProjectionMatrix	extern/QGLViewer/camera.cpp	/^void Camera::getModelViewProjectionMatrix(GLdouble m[16]) const$/;"	f	class:Camera
getOctreeRecord	ViewerGui.cpp	/^bool ViewerGui::getOctreeRecord(int id, OcTreeRecord*& otr) {$/;"	f	class:octomap::ViewerGui
getOrientation	extern/QGLViewer/frame.cpp	/^void Frame::getOrientation(double& q0, double& q1, double& q2, double& q3) const$/;"	f	class:Frame
getOrthoWidthHeight	extern/QGLViewer/camera.cpp	/^void Camera::getOrthoWidthHeight(GLdouble& halfWidth, GLdouble& halfHeight) const$/;"	f	class:Camera
getPosition	extern/QGLViewer/frame.cpp	/^void Frame::getPosition(float& x, float& y, float& z) const$/;"	f	class:Frame
getProjectedCoordinatesOf	extern/QGLViewer/camera.cpp	/^void Camera::getProjectedCoordinatesOf(const float src[3], float res[3], const Frame* frame) const$/;"	f	class:Camera
getProjectionMatrix	extern/QGLViewer/camera.cpp	/^void Camera::getProjectionMatrix(GLdouble m[16]) const$/;"	f	class:Camera
getProjectionMatrix	extern/QGLViewer/camera.cpp	/^void Camera::getProjectionMatrix(GLfloat m[16]) const$/;"	f	class:Camera
getRotation	extern/QGLViewer/frame.cpp	/^void Frame::getRotation(double& q0, double& q1, double& q2, double& q3) const$/;"	f	class:Frame
getRotationMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::getRotationMatrix(float m[3][3]) const$/;"	f	class:Quaternion
getStaticMetaObject	extern/QGLViewer/.moc/moc_camera.cpp	/^const QMetaObject &qglviewer::Camera::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:qglviewer::Camera
getStaticMetaObject	extern/QGLViewer/.moc/moc_frame.cpp	/^const QMetaObject &qglviewer::Frame::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:qglviewer::Frame
getStaticMetaObject	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^const QMetaObject &qglviewer::KeyFrameInterpolator::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:qglviewer::KeyFrameInterpolator
getStaticMetaObject	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^const QMetaObject &qglviewer::ManipulatedCameraFrame::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:qglviewer::ManipulatedCameraFrame
getStaticMetaObject	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^const QMetaObject &qglviewer::ManipulatedFrame::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:qglviewer::ManipulatedFrame
getStaticMetaObject	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^const QMetaObject &QGLViewer::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:QGLViewer
getTransformOf	extern/QGLViewer/frame.cpp	/^void Frame::getTransformOf(const float src[3], float res[3]) const$/;"	f	class:Frame
getTransformOfFrom	extern/QGLViewer/frame.cpp	/^void Frame::getTransformOfFrom(const float src[3], float res[3], const Frame* const from) const$/;"	f	class:Frame
getTransformOfIn	extern/QGLViewer/frame.cpp	/^void Frame::getTransformOfIn(const float src[3], float res[3], const Frame* const in) const$/;"	f	class:Frame
getTranslation	extern/QGLViewer/frame.cpp	/^void Frame::getTranslation(float& x, float& y, float& z) const$/;"	f	class:Frame
getUnprojectedCoordinatesOf	extern/QGLViewer/camera.cpp	/^void Camera::getUnprojectedCoordinatesOf(const float src[3], float res[3], const Frame* frame) const$/;"	f	class:Camera
getViewport	extern/QGLViewer/camera.cpp	/^void Camera::getViewport(GLint viewport[4]) const$/;"	f	class:Camera
getWorldCoordinatesOf	extern/QGLViewer/camera.cpp	/^void Camera::getWorldCoordinatesOf(const float src[3], float res[3]) const$/;"	f	class:Camera
getWorldMatrix	extern/QGLViewer/frame.cpp	/^void Frame::getWorldMatrix(GLdouble m[16]) const$/;"	f	class:Frame
getWorldMatrix	extern/QGLViewer/frame.cpp	/^void Frame::getWorldMatrix(GLdouble m[4][4]) const$/;"	f	class:Frame
getsigns	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^void PrimitivePositioning::getsigns(const Primitive *P,const NVector3& v,double C,$/;"	f	class:PrimitivePositioning
gotoFirstScan	ViewerGui.cpp	/^void ViewerGui::gotoFirstScan(){$/;"	f	class:octomap::ViewerGui
gotoFrame	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::gotoFrame(unsigned int frame) {$/;"	f	class:ViewerSettingsPanelCamera
gpc_add_contour	extern/QGLViewer/VRender/gpc.cpp	/^void gpc_add_contour(gpc_polygon *p, gpc_vertex_list *new_contour, int hole)$/;"	f
gpc_free_polygon	extern/QGLViewer/VRender/gpc.cpp	/^void gpc_free_polygon(gpc_polygon *p)$/;"	f
gpc_free_tristrip	extern/QGLViewer/VRender/gpc.cpp	/^void gpc_free_tristrip(gpc_tristrip *t)$/;"	f
gpc_op	extern/QGLViewer/VRender/gpc.h	/^} gpc_op;$/;"	t	typeref:enum:__anon1
gpc_polygon	extern/QGLViewer/VRender/gpc.h	/^} gpc_polygon;$/;"	t	typeref:struct:__anon4
gpc_polygon_clip	extern/QGLViewer/VRender/gpc.cpp	/^void gpc_polygon_clip(gpc_op op, gpc_polygon *subj, gpc_polygon *clip,$/;"	f
gpc_polygon_to_tristrip	extern/QGLViewer/VRender/gpc.cpp	/^void gpc_polygon_to_tristrip(gpc_polygon *s, gpc_tristrip *t)$/;"	f
gpc_tristrip	extern/QGLViewer/VRender/gpc.h	/^} gpc_tristrip;$/;"	t	typeref:struct:__anon5
gpc_tristrip_clip	extern/QGLViewer/VRender/gpc.cpp	/^void gpc_tristrip_clip(gpc_op op, gpc_polygon *subj, gpc_polygon *clip,$/;"	f
gpc_vertex	extern/QGLViewer/VRender/gpc.h	/^} gpc_vertex;$/;"	t	typeref:struct:__anon2
gpc_vertex_list	extern/QGLViewer/VRender/gpc.h	/^} gpc_vertex_list;$/;"	t	typeref:struct:__anon3
gpc_write_polygon	extern/QGLViewer/VRender/gpc.cpp	/^void gpc_write_polygon(FILE *fp, int write_hole_flags, gpc_polygon *p)$/;"	f
grabFrameBuffer	extern/QGLViewer/saveSnapshot.cpp	/^QImage QGLViewer::grabFrameBuffer(bool withAlpha)$/;"	f	class:QGLViewer
grabsMouse	extern/QGLViewer/mouseGrabber.h	/^    bool grabsMouse() const { return grabsMouse_; };$/;"	f	class:qglviewer::MouseGrabber
grabsMouse_	extern/QGLViewer/mouseGrabber.h	/^    bool grabsMouse_;$/;"	m	class:qglviewer::MouseGrabber
green	extern/QGLViewer/VRender/Primitive.h	/^        inline GLfloat green() const { return _green ; }$/;"	f	class:vrender::Feedback3DColor
gridIsDrawn	extern/QGLViewer/qglviewer.h	/^	bool gridIsDrawn() const { return gridIsDrawn_; };$/;"	f	class:QGLViewer
gridIsDrawnChanged	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::gridIsDrawnChanged(bool _t1)$/;"	f	class:QGLViewer
gridIsDrawn_	extern/QGLViewer/qglviewer.h	/^	bool gridIsDrawn_;	\/\/ world XY grid$/;"	m	class:QGLViewer
h_state	extern/QGLViewer/VRender/gpc.cpp	/^} h_state;$/;"	t	typeref:enum:__anon9	file:
handleKeyboardAction	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::handleKeyboardAction(KeyboardAction id)$/;"	f	class:QGLViewer
handler	extern/QGLViewer/qglviewer.h	/^		MouseHandler handler;$/;"	m	struct:QGLViewer::MouseActionPrivate
hboxLayout	extern/QGLViewer/ui_ImageInterface.h	/^    QHBoxLayout *hboxLayout;$/;"	m	class:Ui_ImageInterface
hboxLayout	extern/QGLViewer/ui_VRenderInterface.h	/^    QHBoxLayout *hboxLayout;$/;"	m	class:Ui_VRenderInterface
hboxLayout1	extern/QGLViewer/ui_ImageInterface.h	/^    QHBoxLayout *hboxLayout1;$/;"	m	class:Ui_ImageInterface
hboxLayout1	extern/QGLViewer/ui_VRenderInterface.h	/^    QHBoxLayout *hboxLayout1;$/;"	m	class:Ui_VRenderInterface
hboxLayout2	extern/QGLViewer/ui_ImageInterface.h	/^    QHBoxLayout *hboxLayout2;$/;"	m	class:Ui_ImageInterface
hboxLayout3	extern/QGLViewer/ui_ImageInterface.h	/^    QHBoxLayout *hboxLayout3;$/;"	m	class:Ui_ImageInterface
heightMapColor	SceneObject.cpp	/^  void SceneObject::heightMapColor(double h, GLfloat* glArrayPos) const {$/;"	f	class:octomap::SceneObject
heightMapGray	SceneObject.cpp	/^  void SceneObject::heightMapGray(double h, GLfloat* glArrayPos) const {$/;"	f	class:octomap::SceneObject
help	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::help()$/;"	f	class:QGLViewer
helpRequired	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::helpRequired()$/;"	f	class:QGLViewer
helpString	ViewerWidget.cpp	/^QString ViewerWidget::helpString() const{$/;"	f	class:octomap::ViewerWidget
helpString	extern/QGLViewer/qglviewer.h	/^	virtual QString helpString() const { return tr("No help available."); };$/;"	f	class:QGLViewer
helpWidget	extern/QGLViewer/qglviewer.h	/^	QTabWidget* helpWidget() { return helpWidget_; }$/;"	f	class:QGLViewer
helpWidget_	extern/QGLViewer/qglviewer.h	/^	QTabWidget* helpWidget_;$/;"	m	class:QGLViewer
hideMessage	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::hideMessage()$/;"	f	class:QGLViewer
hideProgressDialog	extern/QGLViewer/saveSnapshot.cpp	/^void ProgressDialog::hideProgressDialog()$/;"	f	class:ProgressDialog
hole	extern/QGLViewer/VRender/gpc.cpp	/^		int                 hole;         \/* Hole \/ external contour flag      *\/$/;"	m	class:polygon_node	file:
hole	extern/QGLViewer/VRender/gpc.h	/^  int                *hole;         \/* Hole \/ external contour flags     *\/$/;"	m	struct:__anon4
horizontalFieldOfView	extern/QGLViewer/camera.h	/^    float horizontalFieldOfView() const { return 2.0 * atan ( tan(fieldOfView()\/2.0) * aspectRatio() ); };$/;"	f	class:qglviewer::Camera
ie	extern/QGLViewer/VRender/gpc.cpp	/^  edge_node          *ie[2];        \/* Intersecting edge (bundle) pair   *\/$/;"	m	struct:it_shape	file:
imgHeight	extern/QGLViewer/ui_ImageInterface.h	/^    QSpinBox *imgHeight;$/;"	m	class:Ui_ImageInterface
imgQuality	extern/QGLViewer/ui_ImageInterface.h	/^    QSpinBox *imgQuality;$/;"	m	class:Ui_ImageInterface
imgWidth	extern/QGLViewer/ui_ImageInterface.h	/^    QSpinBox *imgWidth;$/;"	m	class:Ui_ImageInterface
include	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	template<class T> void AxisAlignedBox<T>::include(const AxisAlignedBox<T>& b)$/;"	f	class:vrender::AxisAlignedBox
include	extern/QGLViewer/VRender/AxisAlignedBox.h	/^	template<class T> void AxisAlignedBox<T>::include(const T& v)$/;"	f	class:vrender::AxisAlignedBox
includeHidden	extern/QGLViewer/ui_VRenderInterface.h	/^    QCheckBox *includeHidden;$/;"	m	class:Ui_VRenderInterface
ind	extern/QGLViewer/camera.cpp	/^static inline unsigned int ind(unsigned int i, unsigned int j)$/;"	f	file:
inf	extern/QGLViewer/VRender/Vector2.h	/^			static const Vector2 inf;$/;"	m	class:vrender::Vector2
inf	extern/QGLViewer/VRender/Vector3.h	/^			static const Vector3 inf;$/;"	m	class:vrender::Vector3
infNorm	extern/QGLViewer/VRender/Vector2.cpp	/^double Vector2::infNorm() const$/;"	f	class:Vector2
infNorm	extern/QGLViewer/VRender/Vector3.cpp	/^double Vector3::infNorm() const$/;"	f	class:Vector3
init	ViewerWidget.cpp	/^void ViewerWidget::init() {$/;"	f	class:octomap::ViewerWidget
init	extern/QGLViewer/qglviewer.h	/^	virtual void init() { Q_EMIT viewerInitialized(); };$/;"	f	class:QGLViewer
initCubeTemplate	OcTreeDrawer.cpp	/^  void OcTreeDrawer::initCubeTemplate(const octomath::Pose6D& origin,$/;"	f	class:octomap::OcTreeDrawer
initEquation	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPNode::initEquation(const Polygone *P,double & a, double & b, double & c, double & d)$/;"	f	class:BSPNode
initFromDOMElement	extern/QGLViewer/camera.cpp	/^void Camera::initFromDOMElement(const QDomElement& element)$/;"	f	class:Camera
initFromDOMElement	extern/QGLViewer/frame.cpp	/^void Frame::initFromDOMElement(const QDomElement& element)$/;"	f	class:Frame
initFromDOMElement	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::initFromDOMElement(const QDomElement& element)$/;"	f	class:KeyFrameInterpolator
initFromDOMElement	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::initFromDOMElement(const QDomElement& element)$/;"	f	class:ManipulatedCameraFrame
initFromDOMElement	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::initFromDOMElement(const QDomElement& element)$/;"	f	class:ManipulatedFrame
initFromDOMElement	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::initFromDOMElement(const QDomElement& element)$/;"	f	class:QGLViewer
initFromDOMElement	extern/QGLViewer/quaternion.cpp	/^void Quaternion::initFromDOMElement(const QDomElement& element)$/;"	f	class:Quaternion
initFromDOMElement	extern/QGLViewer/vec.cpp	/^void Vec::initFromDOMElement(const QDomElement& element)$/;"	f	class:Vec
initGLArrays	OcTreeDrawer.cpp	/^  void OcTreeDrawer::initGLArrays(const unsigned int& num_cubes,$/;"	f	class:octomap::OcTreeDrawer
initNormal	extern/QGLViewer/VRender/Primitive.cpp	/^void Polygone::initNormal()$/;"	f	class:Polygone
initOctreeGridVis	OcTreeDrawer.cpp	/^  void OcTreeDrawer::initOctreeGridVis() {$/;"	f	class:octomap::OcTreeDrawer
initializeGL	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::initializeGL()$/;"	f	class:QGLViewer
initializeSnapshotFormats	extern/QGLViewer/saveSnapshot.cpp	/^void QGLViewer::initializeSnapshotFormats()$/;"	f	class:QGLViewer
insert	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPNode::insert(Point *P)$/;"	f	class:BSPNode
insert	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPNode::insert(Polygone *P)$/;"	f	class:BSPNode
insert	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPNode::insert(Segment *S)$/;"	f	class:BSPNode
insert	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPTree::insert(Point *P) 	{ if(_root == NULL) _points.push_back(P) 	; else _root->insert(P); }$/;"	f	class:BSPTree
insert	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPTree::insert(Polygone *P){ if(_root == NULL) _root = new BSPNode(P); else _root->insert(P); }$/;"	f	class:BSPTree
insert	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPTree::insert(Segment *S) { if(_root == NULL) _segments.push_back(S); else _root->insert(S); }$/;"	f	class:BSPTree
insert_bound	extern/QGLViewer/VRender/gpc.cpp	/^static void insert_bound(edge_node **b, edge_node *e)$/;"	f	file:
intFromDom	extern/QGLViewer/domUtils.h	/^  static int intFromDom(const QDomElement& e, const QString& attribute, int defValue)$/;"	f	class:DomUtils
interpolateAtTime	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::interpolateAtTime(float time)$/;"	f	class:KeyFrameInterpolator
interpolateTo	extern/QGLViewer/camera.cpp	/^void Camera::interpolateTo(const Frame& fr, float duration)$/;"	f	class:Camera
interpolateToFitScene	extern/QGLViewer/camera.cpp	/^void Camera::interpolateToFitScene()$/;"	f	class:Camera
interpolateToZoomOnPixel	extern/QGLViewer/camera.cpp	/^void Camera::interpolateToZoomOnPixel(const QPoint& pixel)$/;"	f	class:Camera
interpolated	extern/QGLViewer/.moc/moc_frame.cpp	/^void qglviewer::Frame::interpolated()$/;"	f	class:qglviewer::Frame
interpolated	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^void qglviewer::KeyFrameInterpolator::interpolated()$/;"	f	class:qglviewer::KeyFrameInterpolator
interpolationIsStarted	extern/QGLViewer/keyFrameInterpolator.h	/^    bool interpolationIsStarted() const { return interpolationStarted_; };$/;"	f	class:qglviewer::KeyFrameInterpolator
interpolationKfi_	extern/QGLViewer/camera.h	/^    KeyFrameInterpolator* interpolationKfi_;$/;"	m	class:qglviewer::Camera
interpolationPeriod	extern/QGLViewer/keyFrameInterpolator.h	/^    int interpolationPeriod() const { return period_; };$/;"	f	class:qglviewer::KeyFrameInterpolator
interpolationSpeed	extern/QGLViewer/keyFrameInterpolator.h	/^    float interpolationSpeed() const { return interpolationSpeed_; };$/;"	f	class:qglviewer::KeyFrameInterpolator
interpolationSpeed_	extern/QGLViewer/keyFrameInterpolator.h	/^    float interpolationSpeed_;$/;"	m	class:qglviewer::KeyFrameInterpolator
interpolationStarted_	extern/QGLViewer/keyFrameInterpolator.h	/^    bool interpolationStarted_;$/;"	m	class:qglviewer::KeyFrameInterpolator
interpolationTime	extern/QGLViewer/keyFrameInterpolator.h	/^    float interpolationTime() const { return interpolationTime_; };$/;"	f	class:qglviewer::KeyFrameInterpolator
interpolationTime_	extern/QGLViewer/keyFrameInterpolator.h	/^    float interpolationTime_;$/;"	m	class:qglviewer::KeyFrameInterpolator
intersectSegments_XY	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^bool PrimitivePositioning::intersectSegments_XY(const Vector2& P1,const Vector2& Q1,$/;"	f	class:PrimitivePositioning
invalidateValues	extern/QGLViewer/keyFrameInterpolator.h	/^    virtual void invalidateValues() { valuesAreValid_ = false; pathIsValid_ = false; splineCacheIsValid_ = false; };$/;"	f	class:qglviewer::KeyFrameInterpolator
inverse	extern/QGLViewer/frame.cpp	/^Frame Frame::inverse() const$/;"	f	class:Frame
inverse	extern/QGLViewer/quaternion.h	/^		Quaternion inverse() const { return Quaternion(-q[0], -q[1], -q[2], q[3]); }$/;"	f	class:qglviewer::Quaternion
inverseCoordinatesOf	extern/QGLViewer/frame.cpp	/^Vec Frame::inverseCoordinatesOf(const Vec& src) const$/;"	f	class:Frame
inverseMatrix	extern/QGLViewer/quaternion.cpp	/^const GLdouble* Quaternion::inverseMatrix() const$/;"	f	class:Quaternion
inverseRP	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^int PrimitivePositioning::inverseRP(int pos)$/;"	f	class:PrimitivePositioning
inverseRotate	extern/QGLViewer/quaternion.cpp	/^Vec Quaternion::inverseRotate(const Vec& v) const$/;"	f	class:Quaternion
inverseTransformOf	extern/QGLViewer/frame.cpp	/^Vec Frame::inverseTransformOf(const Vec& src) const$/;"	f	class:Frame
invert	extern/QGLViewer/quaternion.h	/^		void invert() { q[0] = -q[0]; q[1] = -q[1]; q[2] = -q[2]; }$/;"	f	class:qglviewer::Quaternion
isEnabled	extern/QGLViewer/VRender/VRender.cpp	/^bool VRenderParams::isEnabled(VRenderOption opt)$/;"	f	class:VRenderParams
isFullScreen	extern/QGLViewer/qglviewer.h	/^	bool isFullScreen() const { return fullScreen_; };$/;"	f	class:QGLViewer
isInMouseGrabberPool	extern/QGLViewer/mouseGrabber.h	/^    bool isInMouseGrabberPool() const { return MouseGrabber::MouseGrabberPool_.contains(const_cast<MouseGrabber*>(this)); };$/;"	f	class:qglviewer::MouseGrabber
isInMouseGrabberPool	extern/QGLViewer/mouseGrabber.h	/^    bool isInMouseGrabberPool() const { return MouseGrabber::MouseGrabberPool_.findRef(this) != -1; };$/;"	f	class:qglviewer::MouseGrabber
isManipulated	extern/QGLViewer/manipulatedFrame.cpp	/^bool ManipulatedFrame::isManipulated() const$/;"	f	class:ManipulatedFrame
isShown	ViewerGui.cpp	/^bool ViewerGui::isShown() {$/;"	f	class:octomap::ViewerGui
isSpinning	extern/QGLViewer/manipulatedFrame.h	/^    bool isSpinning() const { return isSpinning_; };$/;"	f	class:qglviewer::ManipulatedFrame
isSpinning_	extern/QGLViewer/manipulatedFrame.h	/^    bool isSpinning_;$/;"	m	class:qglviewer::ManipulatedFrame
it_node	extern/QGLViewer/VRender/gpc.cpp	/^} it_node;$/;"	t	typeref:struct:it_shape	file:
it_shape	extern/QGLViewer/VRender/gpc.cpp	/^typedef struct it_shape             \/* Intersection table                *\/$/;"	s	file:
jumpToCamFrame	ViewerWidget.cpp	/^void ViewerWidget::jumpToCamFrame(int id, int frame) {$/;"	f	class:octomap::ViewerWidget
jumpToFrame	CameraFollowMode.cpp	/^void CameraFollowMode::jumpToFrame(unsigned int frame) {$/;"	f	class:CameraFollowMode
keepsGrabbingMouse_	extern/QGLViewer/manipulatedFrame.h	/^    bool keepsGrabbingMouse_;$/;"	m	class:qglviewer::ManipulatedFrame
keyDescription_	extern/QGLViewer/qglviewer.h	/^    QMap<int, QString> keyDescription_;$/;"	m	class:QGLViewer
keyFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^Frame KeyFrameInterpolator::keyFrame(int index) const$/;"	f	class:KeyFrameInterpolator
keyFrameInterpolator	extern/QGLViewer/camera.cpp	/^KeyFrameInterpolator* Camera::keyFrameInterpolator(int i) const$/;"	f	class:Camera
keyFrameKey	extern/QGLViewer/qglviewer.cpp	/^Qt::Key QGLViewer::keyFrameKey(int index) const$/;"	f	class:QGLViewer
keyFrameTime	extern/QGLViewer/keyFrameInterpolator.cpp	/^float KeyFrameInterpolator::keyFrameTime(int index) const$/;"	f	class:KeyFrameInterpolator
keyFrame_	extern/QGLViewer/keyFrameInterpolator.h	/^    mutable QList<KeyFrame*> keyFrame_;$/;"	m	class:qglviewer::KeyFrameInterpolator
keyFrame_	extern/QGLViewer/keyFrameInterpolator.h	/^    mutable QPtrList<KeyFrame> keyFrame_;$/;"	m	class:qglviewer::KeyFrameInterpolator
keyPressEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::keyPressEvent(QKeyEvent *e)$/;"	f	class:QGLViewer
keyString	extern/QGLViewer/qglviewer.cpp	/^static QString keyString(int key)$/;"	f	file:
keyboardAccelerator	extern/QGLViewer/qglviewer.cpp	/^int QGLViewer::keyboardAccelerator(KeyboardAction action) const$/;"	f	class:QGLViewer
keyboardActionDescription_	extern/QGLViewer/qglviewer.h	/^	QMap<KeyboardAction, QString> keyboardActionDescription_;$/;"	m	class:QGLViewer
keyboardBinding_	extern/QGLViewer/qglviewer.h	/^    QMap<KeyboardAction, unsigned int> keyboardBinding_;$/;"	m	class:QGLViewer
keyboardModifiersString	extern/QGLViewer/qglviewer.cpp	/^static QString keyboardModifiersString(Qt::KeyboardModifiers m, bool noButton=false)$/;"	f	file:
keyboardString	extern/QGLViewer/qglviewer.cpp	/^QString QGLViewer::keyboardString() const$/;"	f	class:QGLViewer
kfi_	extern/QGLViewer/camera.h	/^    QMap<int, KeyFrameInterpolator*> kfi_;$/;"	m	class:qglviewer::Camera
label	extern/QGLViewer/ui_ImageInterface.h	/^    QLabel *label;$/;"	m	class:Ui_ImageInterface
label_2	extern/QGLViewer/ui_ImageInterface.h	/^    QLabel *label_2;$/;"	m	class:Ui_ImageInterface
label_3	extern/QGLViewer/ui_ImageInterface.h	/^    QLabel *label_3;$/;"	m	class:Ui_ImageInterface
label_4	extern/QGLViewer/ui_ImageInterface.h	/^    QLabel *label_4;$/;"	m	class:Ui_ImageInterface
lastTime	extern/QGLViewer/keyFrameInterpolator.cpp	/^float KeyFrameInterpolator::lastTime() const$/;"	f	class:KeyFrameInterpolator
last_b	extern/QGLViewer/VRender/EPSExporter.cpp	/^float EPSExporter::last_b = -1.0 ;$/;"	m	class:EPSExporter	file:
last_b	extern/QGLViewer/VRender/Exporter.h	/^			static float last_b ;$/;"	m	class:vrender::EPSExporter
last_g	extern/QGLViewer/VRender/EPSExporter.cpp	/^float EPSExporter::last_g = -1.0 ;$/;"	m	class:EPSExporter	file:
last_g	extern/QGLViewer/VRender/Exporter.h	/^			static float last_g ;$/;"	m	class:vrender::EPSExporter
last_move_time	extern/QGLViewer/manipulatedFrame.h	/^    QTime last_move_time;$/;"	m	class:qglviewer::ManipulatedFrame
last_r	extern/QGLViewer/VRender/EPSExporter.cpp	/^float EPSExporter::last_r = -1.0 ;$/;"	m	class:EPSExporter	file:
last_r	extern/QGLViewer/VRender/Exporter.h	/^			static float last_r ;$/;"	m	class:vrender::EPSExporter
leafSizeChanged	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::leafSizeChanged(){$/;"	f	class:ViewerSettingsPanel
less	extern/QGLViewer/VRender/gpc.cpp	/^  struct sbt_t_shape *less;         \/* Pointer to nodes with lower y     *\/$/;"	m	struct:sbt_t_shape	typeref:struct:sbt_t_shape::sbt_t_shape	file:
lmt_node	extern/QGLViewer/VRender/gpc.cpp	/^		lmt_node() : first_bound(0),next(0) {}$/;"	f	class:lmt_node
lmt_node	extern/QGLViewer/VRender/gpc.cpp	/^class lmt_node          					 \/* Local minima table                *\/$/;"	c	file:
lnDif	extern/QGLViewer/quaternion.cpp	/^Quaternion Quaternion::lnDif(const Quaternion& a, const Quaternion& b)$/;"	f	class:Quaternion
loadCameraPosition	ViewerGui.cpp	/^void ViewerGui::loadCameraPosition(const char* filename) {$/;"	f	class:octomap::ViewerGui
loadGraph	ViewerGui.cpp	/^void ViewerGui::loadGraph(bool completeGraph) {$/;"	f	class:octomap::ViewerGui
loadModelViewMatrix	extern/QGLViewer/camera.cpp	/^void Camera::loadModelViewMatrix(bool reset) const$/;"	f	class:Camera
loadModelViewMatrixStereo	extern/QGLViewer/camera.cpp	/^void Camera::loadModelViewMatrixStereo(bool leftBuffer) const$/;"	f	class:Camera
loadProjectionMatrix	extern/QGLViewer/camera.cpp	/^void Camera::loadProjectionMatrix(bool reset) const$/;"	f	class:Camera
loadProjectionMatrixStereo	extern/QGLViewer/camera.cpp	/^void Camera::loadProjectionMatrixStereo(bool leftBuffer) const$/;"	f	class:Camera
localCoordinatesOf	extern/QGLViewer/frame.cpp	/^Vec Frame::localCoordinatesOf(const Vec& src) const$/;"	f	class:Frame
localInverseCoordinatesOf	extern/QGLViewer/frame.cpp	/^Vec Frame::localInverseCoordinatesOf(const Vec& src) const$/;"	f	class:Frame
localInverseTransformOf	extern/QGLViewer/frame.cpp	/^Vec Frame::localInverseTransformOf(const Vec& src) const$/;"	f	class:Frame
localTransformOf	extern/QGLViewer/frame.cpp	/^Vec Frame::localTransformOf(const Vec& src) const$/;"	f	class:Frame
log	extern/QGLViewer/quaternion.cpp	/^Quaternion Quaternion::log()$/;"	f	class:Quaternion
lookAt	extern/QGLViewer/camera.cpp	/^void Camera::lookAt(const Vec& target)$/;"	f	class:Camera
loopInterpolation	extern/QGLViewer/keyFrameInterpolator.h	/^    bool loopInterpolation() const { return loopInterpolation_; };$/;"	f	class:qglviewer::KeyFrameInterpolator
loopInterpolation_	extern/QGLViewer/keyFrameInterpolator.h	/^    bool loopInterpolation_;$/;"	m	class:qglviewer::KeyFrameInterpolator
main	main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
manipulated	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^void qglviewer::ManipulatedFrame::manipulated()$/;"	f	class:qglviewer::ManipulatedFrame
manipulatedFrame	extern/QGLViewer/qglviewer.h	/^	qglviewer::ManipulatedFrame* manipulatedFrame() const { return manipulatedFrame_; };$/;"	f	class:QGLViewer
manipulatedFrameIsACamera_	extern/QGLViewer/qglviewer.h	/^	bool manipulatedFrameIsACamera_;$/;"	m	class:QGLViewer
manipulatedFrame_	extern/QGLViewer/qglviewer.h	/^	qglviewer::ManipulatedFrame* manipulatedFrame_;$/;"	m	class:QGLViewer
matrix	extern/QGLViewer/frame.cpp	/^const GLdouble* Frame::matrix() const$/;"	f	class:Frame
matrix	extern/QGLViewer/quaternion.cpp	/^const GLdouble* Quaternion::matrix() const$/;"	f	class:Quaternion
maxi	extern/QGLViewer/VRender/AxisAlignedBox.h	/^			const T& maxi() const { return _max ; }$/;"	f	class:vrender::AxisAlignedBox
maxi	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2 Vector2::maxi(const Vector2& v1,const Vector2& v2)$/;"	f	class:Vector2
maxi	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3 Vector3::maxi(const Vector3& v1,const Vector3& v2)$/;"	f	class:Vector3
merge_left	extern/QGLViewer/VRender/gpc.cpp	/^static void merge_left(polygon_node *p, polygon_node *q, polygon_node *list)$/;"	f	file:
merge_right	extern/QGLViewer/VRender/gpc.cpp	/^static void merge_right(polygon_node *p, polygon_node *q, polygon_node *list)$/;"	f	file:
messageTimer_	extern/QGLViewer/qglviewer.h	/^	QTimer messageTimer_;$/;"	m	class:QGLViewer
message_	extern/QGLViewer/qglviewer.h	/^	QString message_;$/;"	m	class:QGLViewer
metaObject	extern/QGLViewer/.moc/moc_camera.cpp	/^const QMetaObject *qglviewer::Camera::metaObject() const$/;"	f	class:qglviewer::Camera
metaObject	extern/QGLViewer/.moc/moc_frame.cpp	/^const QMetaObject *qglviewer::Frame::metaObject() const$/;"	f	class:qglviewer::Frame
metaObject	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^const QMetaObject *qglviewer::KeyFrameInterpolator::metaObject() const$/;"	f	class:qglviewer::KeyFrameInterpolator
metaObject	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^const QMetaObject *qglviewer::ManipulatedCameraFrame::metaObject() const$/;"	f	class:qglviewer::ManipulatedCameraFrame
metaObject	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^const QMetaObject *qglviewer::ManipulatedFrame::metaObject() const$/;"	f	class:qglviewer::ManipulatedFrame
metaObject	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^const QMetaObject *QGLViewer::metaObject() const$/;"	f	class:QGLViewer
mini	extern/QGLViewer/VRender/AxisAlignedBox.h	/^			const T& mini() const { return _min ; }$/;"	f	class:vrender::AxisAlignedBox
mini	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2 Vector2::mini(const Vector2& v1,const Vector2& v2)$/;"	f	class:Vector2
mini	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3 Vector3::mini(const Vector3& v1,const Vector3& v2)$/;"	f	class:Vector3
minimax_test	extern/QGLViewer/VRender/gpc.cpp	/^static void minimax_test(gpc_polygon *subj, gpc_polygon *clip, gpc_op op)$/;"	f	file:
modelViewMatrix_	extern/QGLViewer/camera.h	/^    mutable GLdouble modelViewMatrix_[16]; \/\/ Buffered model view matrix.$/;"	m	class:qglviewer::Camera
modified	extern/QGLViewer/.moc/moc_frame.cpp	/^void qglviewer::Frame::modified()$/;"	f	class:qglviewer::Frame
modifiers	extern/QGLViewer/qglviewer.h	/^        Qt::KeyboardModifiers modifiers;$/;"	m	struct:QGLViewer::ClickActionPrivate
more	extern/QGLViewer/VRender/gpc.cpp	/^  struct sbt_t_shape *more;         \/* Pointer to nodes with higher y    *\/$/;"	m	struct:sbt_t_shape	typeref:struct:sbt_t_shape::sbt_t_shape	file:
mouseAction	extern/QGLViewer/qglviewer.cpp	/^QGLViewer::MouseAction QGLViewer::mouseAction(int state) const$/;"	f	class:QGLViewer
mouseActionString	extern/QGLViewer/qglviewer.cpp	/^QString QGLViewer::mouseActionString(QGLViewer::MouseAction ma)$/;"	f	class:QGLViewer
mouseBinding_	extern/QGLViewer/qglviewer.h	/^	QMap<int, MouseActionPrivate> mouseBinding_;$/;"	m	class:QGLViewer
mouseBindingsString	extern/QGLViewer/qglviewer.h	/^	virtual QString mouseBindingsString () const { return mouseString(); }$/;"	f	class:QGLViewer
mouseButtonState	extern/QGLViewer/qglviewer.cpp	/^int QGLViewer::mouseButtonState(MouseHandler handler, MouseAction action, bool withConstraint) const$/;"	f	class:QGLViewer
mouseButtonsString	extern/QGLViewer/qglviewer.cpp	/^static QString mouseButtonsString(Qt::MouseButtons b)$/;"	f	file:
mouseDescription_	extern/QGLViewer/qglviewer.h	/^	QMap<ClickActionPrivate, QString> mouseDescription_;$/;"	m	class:QGLViewer
mouseDoubleClickEvent	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedFrame
mouseDoubleClickEvent	extern/QGLViewer/mouseGrabber.h	/^    virtual void mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber
mouseDoubleClickEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::mouseDoubleClickEvent(QMouseEvent* e)$/;"	f	class:QGLViewer
mouseGrabber	extern/QGLViewer/qglviewer.h	/^	qglviewer::MouseGrabber* mouseGrabber() const { return mouseGrabber_; };$/;"	f	class:QGLViewer
mouseGrabberChanged	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::mouseGrabberChanged(qglviewer::MouseGrabber * _t1)$/;"	f	class:QGLViewer
mouseGrabberIsAManipulatedCameraFrame_	extern/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsAManipulatedCameraFrame_;$/;"	m	class:QGLViewer
mouseGrabberIsAManipulatedFrame_	extern/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsAManipulatedFrame_;$/;"	m	class:QGLViewer
mouseGrabberIsEnabled	extern/QGLViewer/qglviewer.h	/^	bool mouseGrabberIsEnabled(const qglviewer::MouseGrabber* const mouseGrabber) { return !disabledMouseGrabbers_.contains(reinterpret_cast<size_t>(mouseGrabber)); };$/;"	f	class:QGLViewer
mouseGrabber_	extern/QGLViewer/qglviewer.h	/^	qglviewer::MouseGrabber* mouseGrabber_;$/;"	m	class:QGLViewer
mouseHandler	extern/QGLViewer/qglviewer.cpp	/^int QGLViewer::mouseHandler(int state) const$/;"	f	class:QGLViewer
mouseMoveEvent	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::mouseMoveEvent(QMouseEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedCameraFrame
mouseMoveEvent	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::mouseMoveEvent(QMouseEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedFrame
mouseMoveEvent	extern/QGLViewer/mouseGrabber.h	/^    virtual void mouseMoveEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber
mouseMoveEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::mouseMoveEvent(QMouseEvent* e)$/;"	f	class:QGLViewer
mouseOriginalDirection	extern/QGLViewer/manipulatedFrame.cpp	/^int ManipulatedFrame::mouseOriginalDirection(const QMouseEvent* const e)$/;"	f	class:ManipulatedFrame
mousePressEvent	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::mousePressEvent(QMouseEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedFrame
mousePressEvent	extern/QGLViewer/mouseGrabber.h	/^    virtual void mousePressEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber
mousePressEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::mousePressEvent(QMouseEvent* e)$/;"	f	class:QGLViewer
mouseReleaseEvent	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::mouseReleaseEvent(QMouseEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedCameraFrame
mouseReleaseEvent	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::mouseReleaseEvent(QMouseEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedFrame
mouseReleaseEvent	extern/QGLViewer/mouseGrabber.h	/^    virtual void mouseReleaseEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber
mouseReleaseEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::mouseReleaseEvent(QMouseEvent* e)$/;"	f	class:QGLViewer
mouseSpeed_	extern/QGLViewer/manipulatedFrame.h	/^    float mouseSpeed_;$/;"	m	class:qglviewer::ManipulatedFrame
mouseString	extern/QGLViewer/qglviewer.cpp	/^QString QGLViewer::mouseString() const$/;"	f	class:QGLViewer
nameOfToken	extern/QGLViewer/VRender/ParserGL.cpp	/^const char *ParserUtils::nameOfToken(int token)$/;"	f	class:ParserUtils
nbVertices	extern/QGLViewer/VRender/Primitive.h	/^        virtual unsigned int nbVertices() const { return 1 ; }$/;"	f	class:vrender::Point
nbVertices	extern/QGLViewer/VRender/Primitive.h	/^        virtual unsigned int nbVertices() const { return 2 ; }$/;"	f	class:vrender::Segment
nbVertices	extern/QGLViewer/VRender/Primitive.h	/^        virtual unsigned int nbVertices() const { return _vertices.size() ; }$/;"	f	class:vrender::Polygone
nb_degenerated_lines	extern/QGLViewer/VRender/ParserGL.h	/^			int nb_degenerated_lines ;$/;"	m	class:vrender::ParserGL
nb_degenerated_points	extern/QGLViewer/VRender/ParserGL.h	/^			int nb_degenerated_points ;$/;"	m	class:vrender::ParserGL
nb_degenerated_polys	extern/QGLViewer/VRender/ParserGL.h	/^			int nb_degenerated_polys ;$/;"	m	class:vrender::ParserGL
nb_lines	extern/QGLViewer/VRender/ParserGL.h	/^			int nb_lines ;$/;"	m	class:vrender::ParserGL
nb_points	extern/QGLViewer/VRender/ParserGL.h	/^			int nb_points ;$/;"	m	class:vrender::ParserGL
nb_polys	extern/QGLViewer/VRender/ParserGL.h	/^			int nb_polys ;$/;"	m	class:vrender::ParserGL
negate	extern/QGLViewer/quaternion.h	/^		void negate() { invert(); q[3] = -q[3]; }$/;"	f	class:qglviewer::Quaternion
new_tristrip	extern/QGLViewer/VRender/gpc.cpp	/^static void new_tristrip(polygon_node **tn, edge_node *edge,$/;"	f	file:
next	extern/QGLViewer/VRender/gpc.cpp	/^		edge_node  *next;         			 \/* Next edge in the AET              *\/$/;"	m	class:edge_node	file:
next	extern/QGLViewer/VRender/gpc.cpp	/^		lmt_node   			 *next;         \/* Pointer to next local minimum     *\/$/;"	m	class:lmt_node	file:
next	extern/QGLViewer/VRender/gpc.cpp	/^		polygon_node       *next;         \/* Pointer to next polygon contour   *\/$/;"	m	class:polygon_node	file:
next	extern/QGLViewer/VRender/gpc.cpp	/^  struct it_shape    *next;         \/* The next intersection table node  *\/$/;"	m	struct:it_shape	typeref:struct:it_shape::it_shape	file:
next	extern/QGLViewer/VRender/gpc.cpp	/^  struct v_shape     *next;         \/* Pointer to next vertex in list    *\/$/;"	m	struct:v_shape	typeref:struct:v_shape::v_shape	file:
next_bound	extern/QGLViewer/VRender/gpc.cpp	/^		edge_node  *next_bound;   			 \/* Pointer to next bound in LMT      *\/$/;"	m	class:edge_node	file:
next_h_state	extern/QGLViewer/VRender/gpc.cpp	/^const h_state next_h_state[3][6]=$/;"	v
norm	extern/QGLViewer/VRender/NVector3.h	/^    inline double norm() const {return 1.0;}$/;"	f	class:vrender::NVector3
norm	extern/QGLViewer/VRender/Vector2.cpp	/^double Vector2::norm () const$/;"	f	class:Vector2
norm	extern/QGLViewer/VRender/Vector3.cpp	/^double Vector3::norm () const$/;"	f	class:Vector3
norm	extern/QGLViewer/vec.h	/^  double norm() const { return sqrt(x*x + y*y + z*z); }$/;"	f	class:qglviewer::Vec
normal	extern/QGLViewer/VRender/Primitive.h	/^        const NVector3& normal() const { return _normal ; }$/;"	f	class:vrender::Polygone
normalize	extern/QGLViewer/VRender/NVector3.cpp	/^void NVector3::normalize()$/;"	f	class:NVector3
normalize	extern/QGLViewer/quaternion.h	/^		double normalize()$/;"	f	class:qglviewer::Quaternion
normalize	extern/QGLViewer/vec.h	/^  double normalize()$/;"	f	class:qglviewer::Vec
normalized	extern/QGLViewer/quaternion.h	/^		Quaternion normalized() const$/;"	f	class:qglviewer::Quaternion
num_contours	extern/QGLViewer/VRender/gpc.h	/^  int                 num_contours; \/* Number of contours in polygon     *\/$/;"	m	struct:__anon4
num_strips	extern/QGLViewer/VRender/gpc.h	/^  int                 num_strips;   \/* Number of tristrips               *\/$/;"	m	struct:__anon5
num_vertices	extern/QGLViewer/VRender/gpc.h	/^  int                 num_vertices; \/* Number of vertices in list        *\/$/;"	m	struct:__anon3
numberOfKeyFrames	extern/QGLViewer/keyFrameInterpolator.h	/^    int numberOfKeyFrames() const { return keyFrame_.count(); };$/;"	f	class:qglviewer::KeyFrameInterpolator
octomap	ColorOcTreeDrawer.cpp	/^namespace octomap {$/;"	n	file:
octomap	OcTreeDrawer.cpp	/^namespace octomap {$/;"	n	file:
octomap	PointcloudDrawer.cpp	/^namespace octomap {$/;"	n	file:
octomap	SceneObject.cpp	/^namespace octomap {$/;"	n	file:
octomap	SelectionBox.cpp	/^namespace octomap{$/;"	n	file:
octomap	TrajectoryDrawer.cpp	/^namespace octomap {$/;"	n	file:
octomap	ViewerGui.cpp	/^namespace octomap{$/;"	n	file:
octomap	ViewerWidget.cpp	/^namespace octomap {$/;"	n	file:
okButton	extern/QGLViewer/ui_ImageInterface.h	/^    QPushButton *okButton;$/;"	m	class:Ui_ImageInterface
on_actionAxes_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionAxes_toggled(bool checked){$/;"	f	class:octomap::ViewerGui
on_actionClear_nodes_in_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionClear_nodes_in_selection_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionClear_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionClear_selection_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionClear_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionClear_triggered() {$/;"	f	class:octomap::ViewerGui
on_actionClear_unknown_in_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionClear_unknown_in_selection_triggered()$/;"	f	class:octomap::ViewerGui
on_actionConvert_ml_tree_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionConvert_ml_tree_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionDelete_nodes_in_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionDelete_nodes_in_selection_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionDelete_nodes_outside_of_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionDelete_nodes_outside_of_selection_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionExit_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionExit_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionExpand_tree_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionExpand_tree_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionExport_sequence_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionExport_sequence_triggered(bool checked){$/;"	f	class:octomap::ViewerGui
on_actionExport_view_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionExport_view_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionFill_nodes_in_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionFill_nodes_in_selection_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionFill_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionFill_selection_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionFill_unknown_in_selection_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionFill_unknown_in_selection_triggered()$/;"	f	class:octomap::ViewerGui
on_actionFree_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionFree_toggled(bool enabled) {$/;"	f	class:octomap::ViewerGui
on_actionHeight_map_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionHeight_map_toggled(bool checked){$/;"	f	class:octomap::ViewerGui
on_actionHelp_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionHelp_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionHideBackground_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionHideBackground_toggled(bool checked) {$/;"	f	class:octomap::ViewerGui
on_actionOctree_cells_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionOctree_cells_toggled(bool enabled) {$/;"	f	class:octomap::ViewerGui
on_actionOctree_structure_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionOctree_structure_toggled(bool enabled) {$/;"	f	class:octomap::ViewerGui
on_actionOpen_file_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionOpen_file_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionOpen_graph_incremental_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionOpen_graph_incremental_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionPointcloud_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionPointcloud_toggled(bool checked){$/;"	f	class:octomap::ViewerGui
on_actionPrintout_mode_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionPrintout_mode_toggled(bool checked){$/;"	f	class:octomap::ViewerGui
on_actionPrune_tree_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionPrune_tree_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionReload_Octree_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionReload_Octree_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionRestore_camera_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionRestore_camera_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionSave_file_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionSave_file_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionSelected_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionSelected_toggled(bool enabled) {$/;"	f	class:octomap::ViewerGui
on_actionSelection_box_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionSelection_box_toggled(bool checked){$/;"	f	class:octomap::ViewerGui
on_actionSemanticColoring_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionSemanticColoring_toggled(bool checked) {$/;"	f	class:octomap::ViewerGui
on_actionSettings_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionSettings_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionStore_camera_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionStore_camera_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionTest_triggered	ViewerGui.cpp	/^void ViewerGui::on_actionTest_triggered(){$/;"	f	class:octomap::ViewerGui
on_actionTrajectory_toggled	ViewerGui.cpp	/^void ViewerGui::on_actionTrajectory_toggled(bool checked){$/;"	f	class:octomap::ViewerGui
on_action_bg_black_triggered	ViewerGui.cpp	/^void ViewerGui::on_action_bg_black_triggered() {$/;"	f	class:octomap::ViewerGui
on_action_bg_gray_triggered	ViewerGui.cpp	/^void ViewerGui::on_action_bg_gray_triggered() {$/;"	f	class:octomap::ViewerGui
on_action_bg_white_triggered	ViewerGui.cpp	/^void ViewerGui::on_action_bg_white_triggered() {$/;"	f	class:octomap::ViewerGui
on_cameraPathAdd_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_cameraPathAdd_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_cameraPathClear_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_cameraPathClear_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_cameraPathRemove_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_cameraPathRemove_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_cameraPathSave_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_cameraPathSave_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_fastFwdScanButton_clicked	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::on_fastFwdScanButton_clicked(){$/;"	f	class:ViewerSettingsPanel
on_firstScanButton_clicked	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::on_firstScanButton_clicked(){$/;"	f	class:ViewerSettingsPanel
on_firstScanButton_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_firstScanButton_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_followCameraPathButton_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_followCameraPathButton_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_followTrajectoryButton_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_followTrajectoryButton_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_lastScanButton_clicked	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::on_lastScanButton_clicked(){$/;"	f	class:ViewerSettingsPanel
on_lastScanButton_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_lastScanButton_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_loadcampose_triggered	ViewerGui.cpp	/^void ViewerGui::on_loadcampose_triggered() {$/;"	f	class:octomap::ViewerGui
on_nextScanButton_clicked	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::on_nextScanButton_clicked(){$/;"	f	class:ViewerSettingsPanel
on_nextScanButton_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_nextScanButton_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_playScanButton_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_playScanButton_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_previousScanButton_clicked	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_previousScanButton_clicked(){$/;"	f	class:ViewerSettingsPanelCamera
on_savecampose_triggered	ViewerGui.cpp	/^void ViewerGui::on_savecampose_triggered() {$/;"	f	class:octomap::ViewerGui
on_scanProgressSlider_sliderMoved	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::on_scanProgressSlider_sliderMoved(int value) {$/;"	f	class:ViewerSettingsPanelCamera
openFile	ViewerGui.cpp	/^void ViewerGui::openFile(){$/;"	f	class:octomap::ViewerGui
openGraph	ViewerGui.cpp	/^void ViewerGui::openGraph(bool completeGraph){$/;"	f	class:octomap::ViewerGui
openMapCollection	ViewerGui.cpp	/^void ViewerGui::openMapCollection() {$/;"	f	class:octomap::ViewerGui
openOcTree	ViewerGui.cpp	/^void ViewerGui::openOcTree(){$/;"	f	class:octomap::ViewerGui
openPointcloud	ViewerGui.cpp	/^void ViewerGui::openPointcloud(){$/;"	f	class:octomap::ViewerGui
openSnapshotFormatDialog	extern/QGLViewer/saveSnapshot.cpp	/^bool QGLViewer::openSnapshotFormatDialog()$/;"	f	class:QGLViewer
openTree	ViewerGui.cpp	/^void ViewerGui::openTree(){$/;"	f	class:octomap::ViewerGui
operator !=	extern/QGLViewer/vec.h	/^  friend bool operator!=(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec
operator *	extern/QGLViewer/VRender/NVector3.cpp	/^double vrender::operator*(const NVector3 &u,const Vector3  &v)$/;"	f	class:vrender
operator *	extern/QGLViewer/VRender/NVector3.cpp	/^double vrender::operator*(const Vector3  &u,const NVector3 &v)$/;"	f	class:vrender
operator *	extern/QGLViewer/VRender/Primitive.h	/^        friend inline Feedback3DColor operator*(const GLFLOAT & f,const Feedback3DColor& F)$/;"	f	class:vrender::Feedback3DColor
operator *	extern/QGLViewer/VRender/Primitive.h	/^        inline Feedback3DColor operator*(const GLFLOAT & f) const$/;"	f	class:vrender::Feedback3DColor
operator *	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2 operator* (double r,const Vector2& u)$/;"	f
operator *	extern/QGLViewer/VRender/Vector2.h	/^			Vector2 operator* (double v) { return Vector2(_xyz[0]*v,_xyz[1]*v); }$/;"	f	class:vrender::Vector2
operator *	extern/QGLViewer/VRender/Vector2.h	/^			inline double    operator*(const Vector2& u) const$/;"	f	class:vrender::Vector2
operator *	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3 vrender::operator* (double r,const Vector3& u)$/;"	f	class:vrender
operator *	extern/QGLViewer/VRender/Vector3.h	/^			Vector3 operator* (double v) { return Vector3(_xyz[0]*v,_xyz[1]*v,_xyz[2]*v); }$/;"	f	class:vrender::Vector3
operator *	extern/QGLViewer/VRender/Vector3.h	/^			inline double    operator*(const Vector3& u) const$/;"	f	class:vrender::Vector3
operator *	extern/QGLViewer/quaternion.h	/^		friend Quaternion operator*(const Quaternion& a, const Quaternion& b)$/;"	f	class:qglviewer::Quaternion
operator *	extern/QGLViewer/quaternion.h	/^		friend Vec operator*(const Quaternion& q, const Vec& v)$/;"	f	class:qglviewer::Quaternion
operator *	extern/QGLViewer/vec.h	/^  friend Vec operator*(const Vec &a, double k)$/;"	f	class:qglviewer::Vec
operator *	extern/QGLViewer/vec.h	/^  friend Vec operator*(double k, const Vec &a)$/;"	f	class:qglviewer::Vec
operator *	extern/QGLViewer/vec.h	/^  friend double operator*(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec
operator *=	extern/QGLViewer/VRender/Vector2.h	/^			inline Vector2& operator*= (double f) { _xyz[0] *= f; _xyz[1] *= f; return *this;}$/;"	f	class:vrender::Vector2
operator *=	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3& operator*= (double f) { _xyz[0] *= f; _xyz[1] *= f; _xyz[2] *= f; return *this;}$/;"	f	class:vrender::Vector3
operator *=	extern/QGLViewer/quaternion.h	/^		Quaternion& operator*=(const Quaternion &q)$/;"	f	class:qglviewer::Quaternion
operator *=	extern/QGLViewer/vec.h	/^  Vec& operator*=(double k)$/;"	f	class:qglviewer::Vec
operator +	extern/QGLViewer/VRender/Primitive.h	/^        inline Feedback3DColor operator+(const Feedback3DColor & v) const$/;"	f	class:vrender::Feedback3DColor
operator +	extern/QGLViewer/VRender/Vector2.h	/^			inline Vector2 operator+(const Vector2& u) const$/;"	f	class:vrender::Vector2
operator +	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3 operator+(const Vector3& u) const$/;"	f	class:vrender::Vector3
operator +	extern/QGLViewer/vec.h	/^  friend Vec operator+(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec
operator +=	extern/QGLViewer/VRender/Vector2.h	/^			inline Vector2& operator+= (const Vector2& v)$/;"	f	class:vrender::Vector2
operator +=	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3& Vector3::operator+= (const NVector3& u)$/;"	f	class:Vector3
operator +=	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3& operator+= (const Vector3& v)$/;"	f	class:vrender::Vector3
operator +=	extern/QGLViewer/vec.h	/^  Vec& operator+=(const Vec &a)$/;"	f	class:qglviewer::Vec
operator -	extern/QGLViewer/VRender/NVector3.h	/^    inline friend NVector3 operator-(const NVector3 &u) { return NVector3(-u[0],-u[1],-u[2],false); }$/;"	f	class:vrender::NVector3
operator -	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2 vrender::operator- (const Vector2& u)$/;"	f	class:vrender
operator -	extern/QGLViewer/VRender/Vector2.h	/^			inline Vector2 operator-(const Vector2& u) const$/;"	f	class:vrender::Vector2
operator -	extern/QGLViewer/VRender/Vector3.h	/^			friend Vector3 operator- (const Vector3& u) { return Vector3(-u[0], -u[1], -u[2]); }$/;"	f	class:vrender::Vector3
operator -	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3 operator-(const Vector3& u) const$/;"	f	class:vrender::Vector3
operator -	extern/QGLViewer/vec.h	/^  friend Vec operator-(const Vec &a)$/;"	f	class:qglviewer::Vec
operator -	extern/QGLViewer/vec.h	/^  friend Vec operator-(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec
operator -=	extern/QGLViewer/VRender/Vector2.h	/^			inline Vector2& operator-= (const Vector2& v)$/;"	f	class:vrender::Vector2
operator -=	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3& Vector3::operator-= (const NVector3& u)$/;"	f	class:Vector3
operator -=	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3& operator-= (const Vector3& v)$/;"	f	class:vrender::Vector3
operator -=	extern/QGLViewer/vec.h	/^  Vec& operator-=(const Vec &a)$/;"	f	class:qglviewer::Vec
operator /	extern/QGLViewer/VRender/Vector2.h	/^			Vector2 operator\/ (double v) { return Vector2(_xyz[0]\/v,_xyz[1]\/v); }$/;"	f	class:vrender::Vector2
operator /	extern/QGLViewer/VRender/Vector3.h	/^			Vector3 operator\/ (double v) { return Vector3(_xyz[0]\/v,_xyz[1]\/v,_xyz[2]\/v); }$/;"	f	class:vrender::Vector3
operator /	extern/QGLViewer/vec.h	/^  friend Vec operator\/(const Vec &a, double k)$/;"	f	class:qglviewer::Vec
operator /=	extern/QGLViewer/VRender/Vector2.h	/^			inline Vector2& operator\/= (double f) { _xyz[0] \/= f; _xyz[1] \/= f; return *this;}$/;"	f	class:vrender::Vector2
operator /=	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3& operator\/= (double f) { _xyz[0] \/= f; _xyz[1] \/= f; _xyz[2] \/= f; return *this;}$/;"	f	class:vrender::Vector3
operator /=	extern/QGLViewer/vec.h	/^  Vec& operator\/=(double k)$/;"	f	class:qglviewer::Vec
operator <	extern/QGLViewer/qglviewer.h	/^		bool operator<(const ClickActionPrivate& cap) const$/;"	f	struct:QGLViewer::ClickActionPrivate
operator <<	extern/QGLViewer/VRender/NVector3.cpp	/^std::ostream& operator<<(std::ostream& out,const NVector3& u)$/;"	f
operator <<	extern/QGLViewer/VRender/Primitive.cpp	/^std::ostream& vrender::operator<<(std::ostream& o,const Feedback3DColor& f)$/;"	f	class:vrender
operator <<	extern/QGLViewer/VRender/Vector2.cpp	/^std::ostream& operator<< (std::ostream& out,const Vector2& u)$/;"	f
operator <<	extern/QGLViewer/VRender/Vector3.cpp	/^std::ostream& vrender::operator<< (std::ostream& out,const Vector3& u)$/;"	f	class:vrender
operator <<	extern/QGLViewer/quaternion.cpp	/^ostream& operator<<(ostream& o, const Quaternion& Q)$/;"	f
operator <<	extern/QGLViewer/vec.cpp	/^ostream& operator<<(ostream& o, const Vec& v)$/;"	f
operator =	extern/QGLViewer/VRender/NVector3.cpp	/^NVector3& NVector3::operator=(const NVector3& u)$/;"	f	class:NVector3
operator =	extern/QGLViewer/VRender/Vector2.h	/^			inline Vector2& operator= (const Vector2& u)  { _xyz[0] = u._xyz[0]; _xyz[1] = u._xyz[1]; return *this; }$/;"	f	class:vrender::Vector2
operator =	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3& Vector3::operator= (const NVector3& u)$/;"	f	class:Vector3
operator =	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3& operator= (const Vector3& u)  { _xyz[0] = u._xyz[0]; _xyz[1] = u._xyz[1]; _xyz[2] = u._xyz[2]; return *this; }$/;"	f	class:vrender::Vector3
operator =	extern/QGLViewer/camera.cpp	/^Camera& Camera::operator=(const Camera& camera)$/;"	f	class:Camera
operator =	extern/QGLViewer/frame.cpp	/^Frame& Frame::operator=(const Frame& frame)$/;"	f	class:Frame
operator =	extern/QGLViewer/manipulatedCameraFrame.cpp	/^ManipulatedCameraFrame& ManipulatedCameraFrame::operator=(const ManipulatedCameraFrame& mcf)$/;"	f	class:ManipulatedCameraFrame
operator =	extern/QGLViewer/manipulatedFrame.cpp	/^ManipulatedFrame& ManipulatedFrame::operator=(const ManipulatedFrame& mf)$/;"	f	class:ManipulatedFrame
operator =	extern/QGLViewer/quaternion.h	/^		Quaternion& operator=(const Quaternion& Q)$/;"	f	class:qglviewer::Quaternion
operator =	extern/QGLViewer/vec.h	/^  Vec& operator=(const Vec& v)$/;"	f	class:qglviewer::Vec
operator ==	extern/QGLViewer/vec.h	/^  friend bool operator==(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec
operator []	extern/QGLViewer/VRender/NVector3.h	/^    double operator[](int i) const$/;"	f	class:vrender::NVector3
operator []	extern/QGLViewer/VRender/Vector2.h	/^			double  operator[] (int i) const$/;"	f	class:vrender::Vector2
operator []	extern/QGLViewer/VRender/Vector2.h	/^			double& operator[] (int i)$/;"	f	class:vrender::Vector2
operator []	extern/QGLViewer/VRender/Vector3.h	/^			double  operator[] (int i) const$/;"	f	class:vrender::Vector3
operator []	extern/QGLViewer/VRender/Vector3.h	/^			double& operator[] (int i)$/;"	f	class:vrender::Vector3
operator []	extern/QGLViewer/quaternion.h	/^		double operator[](int i) const { return q[i]; }$/;"	f	class:qglviewer::Quaternion
operator []	extern/QGLViewer/quaternion.h	/^		double& operator[](int i) { return q[i]; }$/;"	f	class:qglviewer::Quaternion
operator []	extern/QGLViewer/vec.h	/^  double operator[](int i) const {$/;"	f	class:qglviewer::Vec
operator []	extern/QGLViewer/vec.h	/^  double& operator[](int i) {$/;"	f	class:qglviewer::Vec
operator ^	extern/QGLViewer/VRender/Vector2.h	/^			inline double operator^(const Vector2& v) const$/;"	f	class:vrender::Vector2
operator ^	extern/QGLViewer/VRender/Vector3.h	/^			inline Vector3 operator^(const Vector3& v) const$/;"	f	class:vrender::Vector3
operator ^	extern/QGLViewer/vec.h	/^  friend Vec operator^(const Vec &a, const Vec &b)$/;"	f	class:qglviewer::Vec
operator const double*	extern/QGLViewer/vec.h	/^  operator const double*() const {$/;"	f	class:qglviewer::Vec
operator const float*	extern/QGLViewer/vec.h	/^  operator const float*() const {$/;"	f	class:qglviewer::Vec
operator double*	extern/QGLViewer/vec.h	/^  operator double*() {$/;"	f	class:qglviewer::Vec
optimize	extern/QGLViewer/VRender/BackFaceCullingOptimizer.cpp	/^void BackFaceCullingOptimizer::optimize(std::vector<PtrPrimitive>& primitives_tab,VRenderParams&)$/;"	f	class:BackFaceCullingOptimizer
optimize	extern/QGLViewer/VRender/Optimizer.h	/^			virtual void optimize(std::vector<PtrPrimitive>&,VRenderParams&) {}$/;"	f	class:vrender::PrimitiveSplitOptimizer
optimize	extern/QGLViewer/VRender/VisibilityOptimizer.cpp	/^void VisibilityOptimizer::optimize(vector<PtrPrimitive>& primitives,float& percentage_finished,string& message)$/;"	f	class:VisibilityOptimizer
orientation	extern/QGLViewer/camera.h	/^    Quaternion orientation() const { return frame()->orientation(); };$/;"	f	class:qglviewer::Camera
orientation	extern/QGLViewer/frame.cpp	/^Quaternion Frame::orientation() const$/;"	f	class:Frame
orientation	extern/QGLViewer/keyFrameInterpolator.h	/^      Quaternion orientation() const { return q_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame
orthoCoef_	extern/QGLViewer/camera.h	/^    float orthoCoef_;$/;"	m	class:qglviewer::Camera
orthogonalVec	extern/QGLViewer/vec.cpp	/^Vec Vec::orthogonalVec() const$/;"	f	class:Vec
outp	extern/QGLViewer/VRender/gpc.cpp	/^		polygon_node       *outp[2];      \/* Output polygon \/ tristrip pointer *\/$/;"	m	class:edge_node	file:
oversampling	extern/QGLViewer/ui_ImageInterface.h	/^    QDoubleSpinBox *oversampling;$/;"	m	class:Ui_ImageInterface
p_	extern/QGLViewer/keyFrameInterpolator.h	/^      Vec p_, tgP_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame
paintGL	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::paintGL()$/;"	f	class:QGLViewer
parseFeedbackBuffer	extern/QGLViewer/VRender/ParserGL.cpp	/^void ParserGL::parseFeedbackBuffer(	GLfloat *buffer,int size,$/;"	f	class:ParserGL
pathIndex_	extern/QGLViewer/qglviewer.h	/^	QMap<Qt::Key, int> pathIndex_;$/;"	m	class:QGLViewer
pathIsValid_	extern/QGLViewer/keyFrameInterpolator.h	/^    bool pathIsValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator
pathKey	extern/QGLViewer/qglviewer.cpp	/^Qt::Key QGLViewer::pathKey(int index) const$/;"	f	class:QGLViewer
path_	extern/QGLViewer/keyFrameInterpolator.h	/^    QList<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator
path_	extern/QGLViewer/keyFrameInterpolator.h	/^    QValueVector<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator
path_	extern/QGLViewer/keyFrameInterpolator.h	/^    QVector<Frame> path_;$/;"	m	class:qglviewer::KeyFrameInterpolator
pause	CameraFollowMode.cpp	/^void CameraFollowMode::pause() {$/;"	f	class:CameraFollowMode
peekNext	extern/QGLViewer/keyFrameInterpolator.cpp	31;"	d	file:
performClickAction	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::performClickAction(ClickAction ca, const QMouseEvent* const e)$/;"	f	class:QGLViewer
period_	extern/QGLViewer/keyFrameInterpolator.h	/^    int period_;$/;"	m	class:qglviewer::KeyFrameInterpolator
physicalDistanceToScreen	extern/QGLViewer/camera.h	/^    float physicalDistanceToScreen() const { return physicalScreenWidth() \/ 2.0f \/ tan(horizontalFieldOfView() \/ 2.0); };$/;"	f	class:qglviewer::Camera
physicalScreenWidth	extern/QGLViewer/camera.h	/^    float physicalScreenWidth() const { return physicalScreenWidth_; };$/;"	f	class:qglviewer::Camera
physicalScreenWidth_	extern/QGLViewer/camera.h	/^    float physicalScreenWidth_;	     \/\/ in meters$/;"	m	class:qglviewer::Camera
pitchYawQuaternion	extern/QGLViewer/manipulatedCameraFrame.cpp	/^Quaternion ManipulatedCameraFrame::pitchYawQuaternion(int x, int y, const Camera* const camera)$/;"	f	class:ManipulatedCameraFrame
pixelGLRatio	extern/QGLViewer/camera.cpp	/^float Camera::pixelGLRatio(const Vec& position) const$/;"	f	class:Camera
play	CameraFollowMode.cpp	/^void CameraFollowMode::play() {$/;"	f	class:CameraFollowMode
playCameraPath	ViewerWidget.cpp	/^void ViewerWidget::playCameraPath(int id, int start_frame) {$/;"	f	class:octomap::ViewerWidget
playKeyFramePathStateKey	extern/QGLViewer/qglviewer.cpp	/^Qt::KeyboardModifiers QGLViewer::playKeyFramePathStateKey() const$/;"	f	class:QGLViewer
playPath	extern/QGLViewer/camera.cpp	/^void Camera::playPath(int i)$/;"	f	class:Camera
playPathKeyboardModifiers	extern/QGLViewer/qglviewer.cpp	/^Qt::KeyboardModifiers QGLViewer::playPathKeyboardModifiers() const$/;"	f	class:QGLViewer
playPathKeyboardModifiers_	extern/QGLViewer/qglviewer.h	/^    Qt::KeyboardModifiers addKeyFrameKeyboardModifiers_, playPathKeyboardModifiers_;$/;"	m	class:QGLViewer
playPathStateKey	extern/QGLViewer/qglviewer.cpp	/^Qt::KeyboardModifiers QGLViewer::playPathStateKey() const$/;"	f	class:QGLViewer
point	extern/QGLViewer/VRender/gpc.cpp	/^  gpc_vertex          point;        \/* Point of intersection             *\/$/;"	m	struct:it_shape	file:
pointOutOfPolygon_XY	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^bool PrimitivePositioning::pointOutOfPolygon_XY(const Vector3& P,const Polygone *Q,double I_EPS)$/;"	f	class:PrimitivePositioning
pointSelected	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::pointSelected(const QMouseEvent * _t1)$/;"	f	class:QGLViewer
pointUnderPixel	extern/QGLViewer/camera.cpp	/^Vec Camera::pointUnderPixel(const QPoint& pixel, bool& found) const$/;"	f	class:Camera
polygon_node	extern/QGLViewer/VRender/gpc.cpp	/^		polygon_node(): next(0),proxy(0) { v[0]=0; v[1]=0; }$/;"	f	class:polygon_node
polygon_node	extern/QGLViewer/VRender/gpc.cpp	/^class polygon_node              \/* Internal contour \/ tristrip type  *\/$/;"	c	file:
polygone	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		Polygone *polygone;$/;"	m	class:BSPNode	file:
pos	extern/QGLViewer/VRender/Primitive.h	/^        inline const Vector3& pos() const { return _pos ; }$/;"	f	class:vrender::Feedback3DColor
poseToQGLQuaternion	ViewerWidget.cpp	/^qglviewer::Quaternion ViewerWidget::poseToQGLQuaternion(const octomath::Pose6D& pose) {$/;"	f	class:octomap::ViewerWidget
position	extern/QGLViewer/camera.h	/^    Vec position() const { return frame()->position(); };$/;"	f	class:qglviewer::Camera
position	extern/QGLViewer/frame.h	/^    Vec position() const { return inverseCoordinatesOf(Vec(0.0,0.0,0.0)); };$/;"	f	class:qglviewer::Frame
position	extern/QGLViewer/keyFrameInterpolator.h	/^      Vec position() const { return p_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame
positionEditDone	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::positionEditDone(double){$/;"	f	class:ViewerSettingsPanelCamera
postDraw	ViewerWidget.cpp	/^void ViewerWidget::postDraw(){$/;"	f	class:octomap::ViewerWidget
postDraw	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::postDraw()$/;"	f	class:QGLViewer
postSelection	ViewerWidget.cpp	/^void ViewerWidget::postSelection(const QPoint&)$/;"	f	class:octomap::ViewerWidget
postSelection	extern/QGLViewer/qglviewer.h	/^	virtual void postSelection(const QPoint& point) { Q_UNUSED(point); };$/;"	f	class:QGLViewer
preDraw	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::preDraw()$/;"	f	class:QGLViewer
preDrawStereo	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::preDrawStereo(bool leftBuffer)$/;"	f	class:QGLViewer
pred	extern/QGLViewer/VRender/gpc.cpp	/^		edge_node  *pred;         			 \/* Edge connected at the lower end   *\/$/;"	m	class:edge_node	file:
pressPos_	extern/QGLViewer/manipulatedFrame.h	/^    QPoint prevPos_, pressPos_;$/;"	m	class:qglviewer::ManipulatedFrame
prev	extern/QGLViewer/VRender/gpc.cpp	/^		edge_node  *prev;         			 \/* Previous edge in the AET          *\/$/;"	m	class:edge_node	file:
prev	extern/QGLViewer/VRender/gpc.cpp	/^  struct st_shape    *prev;         \/* Previous edge in sorted list      *\/$/;"	m	struct:st_shape	typeref:struct:st_shape::st_shape	file:
prevPos_	extern/QGLViewer/manipulatedFrame.h	/^    QPoint prevPos_, pressPos_;$/;"	m	class:qglviewer::ManipulatedFrame
prevPos_	extern/QGLViewer/qglviewer.h	/^	QPoint prevPos_;	\/\/ Previous window position, used for full screen mode$/;"	m	class:QGLViewer
previousBufferTextureFormat_	extern/QGLViewer/qglviewer.h	/^	unsigned int previousBufferTextureFormat_;$/;"	m	class:QGLViewer
previousBufferTextureInternalFormat_	extern/QGLViewer/qglviewer.h	/^	int previousBufferTextureInternalFormat_;$/;"	m	class:QGLViewer
previousCameraZClippingCoefficient_	extern/QGLViewer/qglviewer.h	/^	float previousCameraZClippingCoefficient_;$/;"	m	class:QGLViewer
previousConstraint_	extern/QGLViewer/manipulatedFrame.h	/^    Constraint* previousConstraint_; \/\/ When manipulation is without Contraint.$/;"	m	class:qglviewer::ManipulatedFrame
previousPathId_	extern/QGLViewer/qglviewer.h	/^	int previousPathId_; \/\/ Double key press recognition$/;"	m	class:QGLViewer
print3DcolorVertex	extern/QGLViewer/VRender/ParserGL.cpp	/^void ParserUtils::print3DcolorVertex(GLint size, GLint * count, GLfloat * buffer)$/;"	f	class:ParserUtils
printPrecedenceGraph	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::printPrecedenceGraph(const vector< vector<int> >& precedence_graph,$/;"	f	class:vrender::TopologicalSortUtils
progress	extern/QGLViewer/VRender/VRender.cpp	/^void VRenderParams::progress(float f, const QString& progress_string)$/;"	f	class:VRenderParams
progressDialog	extern/QGLViewer/saveSnapshot.cpp	/^  static QProgressDialog* progressDialog;$/;"	m	class:ProgressDialog	file:
progressDialog	extern/QGLViewer/saveSnapshot.cpp	/^QProgressDialog* ProgressDialog::progressDialog = NULL;$/;"	m	class:ProgressDialog	file:
projectOnAxis	extern/QGLViewer/vec.cpp	/^void Vec::projectOnAxis(const Vec& direction)$/;"	f	class:Vec
projectOnBall	extern/QGLViewer/manipulatedFrame.cpp	/^static float projectOnBall(float x, float y)$/;"	f	file:
projectOnLine	extern/QGLViewer/frame.cpp	/^void Frame::projectOnLine(const Vec& origin, const Vec& direction)$/;"	f	class:Frame
projectOnPlane	extern/QGLViewer/vec.cpp	/^void Vec::projectOnPlane(const Vec& normal)$/;"	f	class:Vec
projectedCoordinatesOf	extern/QGLViewer/camera.cpp	/^Vec Camera::projectedCoordinatesOf(const Vec& src, const Frame* frame) const$/;"	f	class:Camera
projectionMatrix_	extern/QGLViewer/camera.h	/^    mutable GLdouble projectionMatrix_[16]; \/\/ Buffered projection matrix.$/;"	m	class:qglviewer::Camera
proxy	extern/QGLViewer/VRender/gpc.cpp	/^		polygon_node       *proxy;        \/* Pointer to actual structure used  *\/$/;"	m	class:polygon_node	file:
ptr	extern/QGLViewer/VRender/ParserGL.cpp	/^  GLfloat *ptr;$/;"	m	struct:_DepthIndex	file:
pts_moins	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		vector<Point *> pts_moins;$/;"	m	class:BSPNode	file:
pts_plus	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		vector<Point *> pts_plus;$/;"	m	class:BSPNode	file:
q	extern/QGLViewer/quaternion.h	/^		double q[4];$/;"	m	class:qglviewer::Quaternion
qMax	extern/QGLViewer/config.h	112;"	d
q_	extern/QGLViewer/frame.h	/^    Quaternion q_;$/;"	m	class:qglviewer::Frame
q_	extern/QGLViewer/keyFrameInterpolator.h	/^      Quaternion q_, tgQ_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame
qglviewer	extern/QGLViewer/camera.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/constraint.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/frame.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/keyFrameInterpolator.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/manipulatedCameraFrame.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/manipulatedFrame.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/mouseGrabber.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/qglviewer.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/quaternion.h	/^namespace qglviewer {$/;"	n
qglviewer	extern/QGLViewer/vec.h	/^namespace qglviewer {$/;"	n
qt_meta_data_QGLViewer	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^static const uint qt_meta_data_QGLViewer[] = {$/;"	v	file:
qt_meta_data_qglviewer__Camera	extern/QGLViewer/.moc/moc_camera.cpp	/^static const uint qt_meta_data_qglviewer__Camera[] = {$/;"	v	file:
qt_meta_data_qglviewer__Frame	extern/QGLViewer/.moc/moc_frame.cpp	/^static const uint qt_meta_data_qglviewer__Frame[] = {$/;"	v	file:
qt_meta_data_qglviewer__KeyFrameInterpolator	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^static const uint qt_meta_data_qglviewer__KeyFrameInterpolator[] = {$/;"	v	file:
qt_meta_data_qglviewer__ManipulatedCameraFrame	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^static const uint qt_meta_data_qglviewer__ManipulatedCameraFrame[] = {$/;"	v	file:
qt_meta_data_qglviewer__ManipulatedFrame	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^static const uint qt_meta_data_qglviewer__ManipulatedFrame[] = {$/;"	v	file:
qt_meta_stringdata_QGLViewer	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^static const char qt_meta_stringdata_QGLViewer[] = {$/;"	v	file:
qt_meta_stringdata_qglviewer__Camera	extern/QGLViewer/.moc/moc_camera.cpp	/^static const char qt_meta_stringdata_qglviewer__Camera[] = {$/;"	v	file:
qt_meta_stringdata_qglviewer__Frame	extern/QGLViewer/.moc/moc_frame.cpp	/^static const char qt_meta_stringdata_qglviewer__Frame[] = {$/;"	v	file:
qt_meta_stringdata_qglviewer__KeyFrameInterpolator	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^static const char qt_meta_stringdata_qglviewer__KeyFrameInterpolator[] = {$/;"	v	file:
qt_meta_stringdata_qglviewer__ManipulatedCameraFrame	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^static const char qt_meta_stringdata_qglviewer__ManipulatedCameraFrame[] = {$/;"	v	file:
qt_meta_stringdata_qglviewer__ManipulatedFrame	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^static const char qt_meta_stringdata_qglviewer__ManipulatedFrame[] = {$/;"	v	file:
qt_metacall	extern/QGLViewer/.moc/moc_camera.cpp	/^int qglviewer::Camera::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::Camera
qt_metacall	extern/QGLViewer/.moc/moc_frame.cpp	/^int qglviewer::Frame::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::Frame
qt_metacall	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^int qglviewer::KeyFrameInterpolator::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::KeyFrameInterpolator
qt_metacall	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^int qglviewer::ManipulatedCameraFrame::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::ManipulatedCameraFrame
qt_metacall	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^int qglviewer::ManipulatedFrame::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::ManipulatedFrame
qt_metacall	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^int QGLViewer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:QGLViewer
qt_metacast	extern/QGLViewer/.moc/moc_camera.cpp	/^void *qglviewer::Camera::qt_metacast(const char *_clname)$/;"	f	class:qglviewer::Camera
qt_metacast	extern/QGLViewer/.moc/moc_frame.cpp	/^void *qglviewer::Frame::qt_metacast(const char *_clname)$/;"	f	class:qglviewer::Frame
qt_metacast	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^void *qglviewer::KeyFrameInterpolator::qt_metacast(const char *_clname)$/;"	f	class:qglviewer::KeyFrameInterpolator
qt_metacast	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^void *qglviewer::ManipulatedCameraFrame::qt_metacast(const char *_clname)$/;"	f	class:qglviewer::ManipulatedCameraFrame
qt_metacast	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^void *qglviewer::ManipulatedFrame::qt_metacast(const char *_clname)$/;"	f	class:qglviewer::ManipulatedFrame
qt_metacast	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void *QGLViewer::qt_metacast(const char *_clname)$/;"	f	class:QGLViewer
qt_static_metacall	extern/QGLViewer/.moc/moc_camera.cpp	/^void qglviewer::Camera::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::Camera
qt_static_metacall	extern/QGLViewer/.moc/moc_frame.cpp	/^void qglviewer::Frame::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::Frame
qt_static_metacall	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^void qglviewer::KeyFrameInterpolator::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::KeyFrameInterpolator
qt_static_metacall	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^void qglviewer::ManipulatedCameraFrame::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::ManipulatedCameraFrame
qt_static_metacall	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^void qglviewer::ManipulatedFrame::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:qglviewer::ManipulatedFrame
qt_static_metacall	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:QGLViewer
randomQuaternion	extern/QGLViewer/quaternion.cpp	/^Quaternion Quaternion::randomQuaternion()$/;"	f	class:Quaternion
recursFillPrimitiveArray	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPNode::recursFillPrimitiveArray(vector<PtrPrimitive>& primitive_tab) const$/;"	f	class:BSPNode
recursFillPrimitiveArray	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPTree::recursFillPrimitiveArray(vector<PtrPrimitive>& tab) const$/;"	f	class:BSPTree
recursFindNeighbors	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::recursFindNeighbors(const vector<PtrPrimitive>& primitive_tab,$/;"	f	class:vrender::TopologicalSortUtils
recursTopologicalSort	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::recursTopologicalSort(	vector< vector<int> >& precedence_graph,$/;"	f	class:vrender::TopologicalSortUtils
red	extern/QGLViewer/VRender/Primitive.h	/^        inline GLfloat red() const { return _red ; }$/;"	f	class:vrender::Feedback3DColor
referenceFrame	extern/QGLViewer/frame.h	/^    const Frame* referenceFrame() const { return referenceFrame_; };$/;"	f	class:qglviewer::Frame
referenceFrame_	extern/QGLViewer/frame.h	/^    const Frame* referenceFrame_;$/;"	m	class:qglviewer::Frame
removeFromCameraPath	CameraFollowMode.cpp	/^void CameraFollowMode::removeFromCameraPath() {$/;"	f	class:CameraFollowMode
removeFromCameraPath	ViewerWidget.cpp	/^void ViewerWidget::removeFromCameraPath(int id, int frame) {$/;"	f	class:octomap::ViewerWidget
removeFromMouseGrabberPool	extern/QGLViewer/mouseGrabber.cpp	/^void MouseGrabber::removeFromMouseGrabberPool()$/;"	f	class:MouseGrabber
removeSceneObject	ViewerWidget.cpp	/^void ViewerWidget::removeSceneObject(SceneObject* obj){$/;"	f	class:octomap::ViewerWidget
resetInterpolation	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::resetInterpolation()$/;"	f	class:KeyFrameInterpolator
resetPath	extern/QGLViewer/camera.cpp	/^void Camera::resetPath(int i)$/;"	f	class:Camera
resetView	ViewerWidget.cpp	/^void ViewerWidget::resetView(){$/;"	f	class:octomap::ViewerWidget
resetVisualHints	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::resetVisualHints()$/;"	f	class:QGLViewer
reset_it	extern/QGLViewer/VRender/gpc.cpp	/^static void reset_it(it_node **it)$/;"	f	file:
reset_lmt	extern/QGLViewer/VRender/gpc.cpp	/^static void reset_lmt(lmt_node **lmt)$/;"	f	file:
resizeGL	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::resizeGL(int width, int height)$/;"	f	class:QGLViewer
restoreFromFile	extern/QGLViewer/qglviewer.cpp	/^bool QGLViewer::restoreFromFile(const QString& fileName)$/;"	f	class:QGLViewer
restoreStateFromFile	extern/QGLViewer/qglviewer.cpp	/^bool QGLViewer::restoreStateFromFile()$/;"	f	class:QGLViewer
retranslateUi	extern/QGLViewer/ui_ImageInterface.h	/^    void retranslateUi(QDialog *ImageInterface)$/;"	f	class:Ui_ImageInterface
retranslateUi	extern/QGLViewer/ui_VRenderInterface.h	/^    void retranslateUi(QDialog *VRenderInterface)$/;"	f	class:Ui_VRenderInterface
revolveAroundPoint	extern/QGLViewer/camera.h	/^    Vec revolveAroundPoint() const { return frame()->revolveAroundPoint(); };$/;"	f	class:qglviewer::Camera
revolveAroundPoint	extern/QGLViewer/manipulatedCameraFrame.h	/^    Vec revolveAroundPoint() const { return revolveAroundPoint_; }$/;"	f	class:qglviewer::ManipulatedCameraFrame
revolveAroundPoint_	extern/QGLViewer/manipulatedCameraFrame.h	/^    Vec revolveAroundPoint_;$/;"	m	class:qglviewer::ManipulatedCameraFrame
rightVector	extern/QGLViewer/camera.h	/^    Vec rightVector() const$/;"	f	class:qglviewer::Camera
rotSensitivity_	extern/QGLViewer/manipulatedFrame.h	/^    float rotSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame
rotate	extern/QGLViewer/frame.cpp	/^void Frame::rotate(Quaternion& q)$/;"	f	class:Frame
rotate	extern/QGLViewer/frame.cpp	/^void Frame::rotate(const Quaternion& q)$/;"	f	class:Frame
rotate	extern/QGLViewer/frame.cpp	/^void Frame::rotate(double q0, double q1, double q2, double q3)$/;"	f	class:Frame
rotate	extern/QGLViewer/frame.cpp	/^void Frame::rotate(double& q0, double& q1, double& q2, double& q3)$/;"	f	class:Frame
rotate	extern/QGLViewer/quaternion.cpp	/^Vec Quaternion::rotate(const Vec& v) const$/;"	f	class:Quaternion
rotateAroundPoint	extern/QGLViewer/frame.cpp	/^void Frame::rotateAroundPoint(Quaternion& rotation, const Vec& point)$/;"	f	class:Frame
rotateAroundPoint	extern/QGLViewer/frame.cpp	/^void Frame::rotateAroundPoint(const Quaternion& rotation, const Vec& point)$/;"	f	class:Frame
rotation	extern/QGLViewer/frame.h	/^    Quaternion rotation() const { return q_; };$/;"	f	class:qglviewer::Frame
rotationConstraintDir_	extern/QGLViewer/constraint.h	/^    Vec rotationConstraintDir_;$/;"	m	class:qglviewer::AxisPlaneConstraint
rotationConstraintDirection	extern/QGLViewer/constraint.h	/^    Vec rotationConstraintDirection() const { return rotationConstraintDir_; };$/;"	f	class:qglviewer::AxisPlaneConstraint
rotationConstraintType	extern/QGLViewer/constraint.h	/^    Type rotationConstraintType() const { return rotationConstraintType_; };$/;"	f	class:qglviewer::AxisPlaneConstraint
rotationConstraintType_	extern/QGLViewer/constraint.h	/^    Type rotationConstraintType_;$/;"	m	class:qglviewer::AxisPlaneConstraint
rotationSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    float rotationSensitivity() const { return rotSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame
saveCameraPosition	ViewerGui.cpp	/^void ViewerGui::saveCameraPosition(const char* filename) const {$/;"	f	class:octomap::ViewerGui
saveImageSnapshot	extern/QGLViewer/saveSnapshot.cpp	/^bool QGLViewer::saveImageSnapshot(const QString& fileName)$/;"	f	class:QGLViewer
saveSnapshot	extern/QGLViewer/saveSnapshot.cpp	/^void QGLViewer::saveSnapshot(bool automatic, bool overwrite)$/;"	f	class:QGLViewer
saveSnapshot	extern/QGLViewer/saveSnapshot.cpp	/^void QGLViewer::saveSnapshot(const QString& fileName, bool overwrite)$/;"	f	class:QGLViewer
saveStateToFile	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::saveStateToFile()$/;"	f	class:QGLViewer
saveStateToFileForAllViewers	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::saveStateToFileForAllViewers()$/;"	f	class:QGLViewer
saveToCameraPath	CameraFollowMode.cpp	/^void CameraFollowMode::saveToCameraPath() {$/;"	f	class:CameraFollowMode
saveToFile	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::saveToFile(const QString& fileName)$/;"	f	class:QGLViewer
saveVectorialSnapshot	extern/QGLViewer/saveSnapshot.cpp	/^static int saveVectorialSnapshot(const QString& fileName, QGLWidget* widget, const QString& snapshotFormat)$/;"	f	file:
sb_tree	extern/QGLViewer/VRender/gpc.cpp	/^} sb_tree;$/;"	t	typeref:struct:sbt_t_shape	file:
sbt_t_shape	extern/QGLViewer/VRender/gpc.cpp	/^typedef struct sbt_t_shape          \/* Scanbeam tree                     *\/$/;"	s	file:
scaledFont	extern/QGLViewer/qglviewer.h	/^	QFont scaledFont(const QFont& font) const {$/;"	f	class:QGLViewer
scanProgressChanged	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::scanProgressChanged(){$/;"	f	class:ViewerSettingsPanel
sceneCenter	extern/QGLViewer/camera.h	/^    Vec sceneCenter() const { return sceneCenter_; };$/;"	f	class:qglviewer::Camera
sceneCenter	extern/QGLViewer/qglviewer.h	/^	qglviewer::Vec sceneCenter() const { return camera()->sceneCenter(); }$/;"	f	class:QGLViewer
sceneCenter_	extern/QGLViewer/camera.h	/^    Vec sceneCenter_;$/;"	m	class:qglviewer::Camera
sceneRadius	extern/QGLViewer/camera.h	/^    float sceneRadius() const { return sceneRadius_; };$/;"	f	class:qglviewer::Camera
sceneRadius	extern/QGLViewer/qglviewer.h	/^	float sceneRadius() const { return camera()->sceneRadius(); }$/;"	f	class:QGLViewer
sceneRadius_	extern/QGLViewer/camera.h	/^    float sceneRadius_; \/\/ OpenGL units$/;"	m	class:qglviewer::Camera
screenHeight	extern/QGLViewer/camera.h	/^    int screenHeight() const { return screenHeight_; };$/;"	f	class:qglviewer::Camera
screenHeight_	extern/QGLViewer/camera.h	/^    int screenWidth_, screenHeight_;  \/\/ size of the window, in pixels$/;"	m	class:qglviewer::Camera
screenWidth	extern/QGLViewer/camera.h	/^    int screenWidth() const { return screenWidth_; };$/;"	f	class:qglviewer::Camera
screenWidth_	extern/QGLViewer/camera.h	/^    int screenWidth_, screenHeight_;  \/\/ size of the window, in pixels$/;"	m	class:qglviewer::Camera
seg_moins	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		vector<Segment *> seg_moins;$/;"	m	class:BSPNode	file:
seg_plus	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^		vector<Segment *> seg_plus;$/;"	m	class:BSPNode	file:
select	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::select(const QMouseEvent* event)$/;"	f	class:QGLViewer
select	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::select(const QPoint& point)$/;"	f	class:QGLViewer
selectBuffer	extern/QGLViewer/qglviewer.h	/^	GLuint* selectBuffer() { return selectBuffer_; };$/;"	f	class:QGLViewer
selectBufferSize	extern/QGLViewer/qglviewer.h	/^	int selectBufferSize() const { return selectBufferSize_; };$/;"	f	class:QGLViewer
selectBufferSize_	extern/QGLViewer/qglviewer.h	/^	int selectBufferSize_;$/;"	m	class:QGLViewer
selectBuffer_	extern/QGLViewer/qglviewer.h	/^	GLuint* selectBuffer_;$/;"	m	class:QGLViewer
selectRegionHeight	extern/QGLViewer/qglviewer.h	/^	int selectRegionHeight() const { return selectRegionHeight_; };$/;"	f	class:QGLViewer
selectRegionHeight_	extern/QGLViewer/qglviewer.h	/^	int selectRegionWidth_, selectRegionHeight_;$/;"	m	class:QGLViewer
selectRegionWidth	extern/QGLViewer/qglviewer.h	/^	int selectRegionWidth() const { return selectRegionWidth_; };$/;"	f	class:QGLViewer
selectRegionWidth_	extern/QGLViewer/qglviewer.h	/^	int selectRegionWidth_, selectRegionHeight_;$/;"	m	class:QGLViewer
selectedName	extern/QGLViewer/qglviewer.h	/^	int selectedName() const { return selectedObjectId_; };$/;"	f	class:QGLViewer
selectedObjectId_	extern/QGLViewer/qglviewer.h	/^	int selectedObjectId_;$/;"	m	class:QGLViewer
setAddKeyFrameKeyboardModifiers	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setAddKeyFrameKeyboardModifiers(Qt::KeyboardModifiers modifiers)$/;"	f	class:QGLViewer
setAddKeyFrameStateKey	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setAddKeyFrameStateKey(int buttonState)$/;"	f	class:QGLViewer
setAlphaOccupied	OcTreeDrawer.cpp	/^  void OcTreeDrawer::setAlphaOccupied(double alpha){$/;"	f	class:octomap::OcTreeDrawer
setAnimationPeriod	extern/QGLViewer/qglviewer.h	/^		void setAnimationPeriod(int period) { animationPeriod_ = period; };$/;"	f	class:QGLViewer
setAspectRatio	extern/QGLViewer/camera.h	/^    void setAspectRatio(float aspect) { setScreenWidthAndHeight(int(100.0*aspect), 100); };$/;"	f	class:qglviewer::Camera
setAxisAngle	extern/QGLViewer/quaternion.h	/^		void setAxisAngle(const Vec& axis, double angle)$/;"	f	class:qglviewer::Quaternion
setAxisIsDrawn	extern/QGLViewer/qglviewer.h	/^		void setAxisIsDrawn(bool draw=true) { axisIsDrawn_ = draw; Q_EMIT axisIsDrawnChanged(draw); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer
setBackgroundColor	extern/QGLViewer/qglviewer.h	/^		void setBackgroundColor(const QColor& color) { backgroundColor_=color; qglClearColor(color); };$/;"	f	class:QGLViewer
setBlackAndWhite	extern/QGLViewer/VRender/Exporter.cpp	/^void Exporter::setBlackAndWhite(bool b) { _blackAndWhite = b; }$/;"	f	class:Exporter
setBoundingBox	extern/QGLViewer/VRender/Exporter.cpp	/^void Exporter::setBoundingBox(float xmin,float ymin,float xmax,float ymax)$/;"	f	class:Exporter
setBreakCycles	extern/QGLViewer/VRender/SortMethod.h	/^			void setBreakCycles(bool b) { _break_cycles = b ; }$/;"	f	class:vrender::TopologicalSortMethod
setCamPose	ViewerWidget.cpp	/^void ViewerWidget::setCamPose(const octomath::Pose6D& pose){$/;"	f	class:octomap::ViewerWidget
setCamPosition	ViewerWidget.cpp	/^void ViewerWidget::setCamPosition(double x, double y, double z, double lookX, double lookY, double lookZ){$/;"	f	class:octomap::ViewerWidget
setCamera	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setCamera(Camera* const camera)$/;"	f	class:QGLViewer
setCameraIsEdited	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setCameraIsEdited(bool edit)$/;"	f	class:QGLViewer
setClearBackground	extern/QGLViewer/VRender/Exporter.cpp	/^void Exporter::setClearBackground(bool b) { _clearBG=b; }$/;"	f	class:Exporter
setClearColor	extern/QGLViewer/VRender/Exporter.cpp	/^void Exporter::setClearColor(float r, float g, float b) { _clearR=r; _clearG=g; _clearB=b; }$/;"	f	class:Exporter
setClosedPath	extern/QGLViewer/keyFrameInterpolator.h	/^    void setClosedPath(bool closed=true) { closedPath_ = closed; };$/;"	f	class:qglviewer::KeyFrameInterpolator
setColor	extern/QGLViewer/VRender/EPSExporter.cpp	/^void EPSExporter::setColor(QTextStream& out, float red, float green, float blue)$/;"	f	class:EPSExporter
setConstraint	extern/QGLViewer/frame.h	/^    void setConstraint(Constraint* const constraint) { constraint_ = constraint; }$/;"	f	class:qglviewer::Frame
setCubeColorHeightmap	OcTreeDrawer.cpp	/^  unsigned int OcTreeDrawer::setCubeColorHeightmap(const octomap::OcTreeVolume& v,$/;"	f	class:octomap::OcTreeDrawer
setCubeColorRGBA	OcTreeDrawer.cpp	/^  unsigned int OcTreeDrawer::setCubeColorRGBA(const unsigned char& r,$/;"	f	class:octomap::OcTreeDrawer
setCurrentFrame	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::setCurrentFrame(unsigned frame){$/;"	f	class:ViewerSettingsPanelCamera
setCurrentScan	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::setCurrentScan(unsigned scan){$/;"	f	class:ViewerSettingsPanel
setDefaultMouseBindings	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setDefaultMouseBindings()$/;"	f	class:QGLViewer
setDefaultShortcuts	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setDefaultShortcuts()$/;"	f	class:QGLViewer
setDepth	extern/QGLViewer/VRender/Primitive.h	/^        void setDepth(int d) const { _depth = d ; }$/;"	f	class:vrender::Primitive
setFOVToFitScene	extern/QGLViewer/camera.cpp	/^void Camera::setFOVToFitScene()$/;"	f	class:Camera
setFPSIsDisplayed	extern/QGLViewer/qglviewer.h	/^		void setFPSIsDisplayed(bool display=true) { FPSIsDisplayed_ = display; Q_EMIT FPSIsDisplayedChanged(display); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer
setFieldOfView	extern/QGLViewer/camera.h	/^    void setFieldOfView(float fov) { fieldOfView_ = fov; setFocusDistance(sceneRadius() \/ tan(fov\/2.0)); };$/;"	f	class:qglviewer::Camera
setFilename	extern/QGLViewer/VRender/VRender.cpp	/^void VRenderParams::setFilename(const QString& filename)$/;"	f	class:VRenderParams
setFlySpeed	extern/QGLViewer/camera.h	/^    void setFlySpeed(float speed) { frame()->setFlySpeed(speed); };$/;"	f	class:qglviewer::Camera
setFlySpeed	extern/QGLViewer/manipulatedCameraFrame.h	/^    void setFlySpeed(float speed) { flySpeed_ = speed; };$/;"	f	class:qglviewer::ManipulatedCameraFrame
setFlyUpVector	extern/QGLViewer/manipulatedCameraFrame.h	/^    void setFlyUpVector(const Vec& up) { flyUpVector_ = up; };$/;"	f	class:qglviewer::ManipulatedCameraFrame
setFocusDistance	extern/QGLViewer/camera.h	/^    void setFocusDistance(float distance) { focusDistance_ = distance; };$/;"	f	class:qglviewer::Camera
setForegroundColor	extern/QGLViewer/qglviewer.h	/^		void setForegroundColor(const QColor& color) { foregroundColor_ = color; };$/;"	f	class:QGLViewer
setFormat	extern/QGLViewer/VRender/VRender.h	/^			void setFormat(VRenderFormat f) { _format = f; }$/;"	f	class:vrender::VRenderParams
setFrame	extern/QGLViewer/camera.cpp	/^void Camera::setFrame(ManipulatedCameraFrame* const mcf)$/;"	f	class:Camera
setFrame	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::setFrame(Frame* const frame)$/;"	f	class:KeyFrameInterpolator
setFromMatrix	extern/QGLViewer/frame.cpp	/^void Frame::setFromMatrix(const GLdouble m[16])$/;"	f	class:Frame
setFromMatrix	extern/QGLViewer/frame.cpp	/^void Frame::setFromMatrix(const GLdouble m[4][4])$/;"	f	class:Frame
setFromModelViewMatrix	extern/QGLViewer/camera.cpp	/^void Camera::setFromModelViewMatrix(const GLdouble* const modelViewMatrix)$/;"	f	class:Camera
setFromProjectionMatrix	extern/QGLViewer/camera.cpp	/^void Camera::setFromProjectionMatrix(const float matrix[12])$/;"	f	class:Camera
setFromRotatedBase	extern/QGLViewer/quaternion.cpp	/^void Quaternion::setFromRotatedBase(const Vec& X, const Vec& Y, const Vec& Z)$/;"	f	class:Quaternion
setFromRotatedBasis	extern/QGLViewer/quaternion.cpp	/^void Quaternion::setFromRotatedBasis(const Vec& X, const Vec& Y, const Vec& Z)$/;"	f	class:Quaternion
setFromRotationMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::setFromRotationMatrix(const double m[3][3])$/;"	f	class:Quaternion
setFromRotationMatrix	extern/QGLViewer/quaternion.cpp	/^void Quaternion::setFromRotationMatrix(const float m[3][3])$/;"	f	class:Quaternion
setFullScreen	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setFullScreen(bool fullScreen)$/;"	f	class:QGLViewer
setGrabsMouse	extern/QGLViewer/mouseGrabber.h	/^    void setGrabsMouse(bool grabs) { grabsMouse_ = grabs; };$/;"	f	class:qglviewer::MouseGrabber
setGridIsDrawn	extern/QGLViewer/qglviewer.h	/^		void setGridIsDrawn(bool draw=true) { gridIsDrawn_ = draw; Q_EMIT gridIsDrawnChanged(draw); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer
setHandlerKeyboardModifiers	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setHandlerKeyboardModifiers(MouseHandler handler, Qt::KeyboardModifiers modifiers)$/;"	f	class:QGLViewer
setHandlerStateKey	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setHandlerStateKey(MouseHandler handler, int buttonState)$/;"	f	class:QGLViewer
setHorizontalFieldOfView	extern/QGLViewer/camera.h	/^    void setHorizontalFieldOfView(float hfov) { setFieldOfView( 2.0 * atan (tan(hfov \/ 2.0) \/ aspectRatio()) ); };$/;"	f	class:qglviewer::Camera
setIODistance	extern/QGLViewer/camera.h	/^    void setIODistance(float distance) { IODistance_ = distance; };$/;"	f	class:qglviewer::Camera
setInterpolationPeriod	extern/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationPeriod(int period) { period_ = period; };$/;"	f	class:qglviewer::KeyFrameInterpolator
setInterpolationSpeed	extern/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationSpeed(float speed) { interpolationSpeed_ = speed; };$/;"	f	class:qglviewer::KeyFrameInterpolator
setInterpolationTime	extern/QGLViewer/keyFrameInterpolator.h	/^    void setInterpolationTime(float time) { interpolationTime_ = time; };$/;"	f	class:qglviewer::KeyFrameInterpolator
setKeyDescription	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setKeyDescription(int key, QString description)$/;"	f	class:QGLViewer
setKeyFrameInterpolator	extern/QGLViewer/camera.cpp	/^void Camera::setKeyFrameInterpolator(int i, KeyFrameInterpolator* const kfi)$/;"	f	class:Camera
setKeyFrameKey	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setKeyFrameKey(int index, int key)$/;"	f	class:QGLViewer
setKeyboardAccelerator	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setKeyboardAccelerator(KeyboardAction action, int key)$/;"	f	class:QGLViewer
setLoopInterpolation	extern/QGLViewer/keyFrameInterpolator.h	/^    void setLoopInterpolation(bool loop=true) { loopInterpolation_ = loop; };$/;"	f	class:qglviewer::KeyFrameInterpolator
setManipulatedFrame	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setManipulatedFrame(ManipulatedFrame* frame)$/;"	f	class:QGLViewer
setMouseBinding	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setMouseBinding(int state, ClickAction action, bool doubleClick, Qt::MouseButtons buttonsBefore)$/;"	f	class:QGLViewer
setMouseBinding	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setMouseBinding(int state, MouseHandler handler, MouseAction action, bool withConstraint)$/;"	f	class:QGLViewer
setMouseBindingDescription	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setMouseBindingDescription(int state, QString description, bool doubleClick, Qt::MouseButtons buttonsBefore)$/;"	f	class:QGLViewer
setMouseGrabber	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setMouseGrabber(MouseGrabber* mouseGrabber)$/;"	f	class:QGLViewer
setMouseGrabberIsEnabled	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setMouseGrabberIsEnabled(const qglviewer::MouseGrabber* const mouseGrabber, bool enabled)$/;"	f	class:QGLViewer
setMouseStateKey	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setMouseStateKey(MouseHandler handler, int buttonState)$/;"	f	class:QGLViewer
setNodesInBBX	ViewerGui.cpp	/^void ViewerGui::setNodesInBBX(const point3d& min, const point3d& max, bool occupied){$/;"	f	class:octomap::ViewerGui
setNonNodesInBBX	ViewerGui.cpp	/^void ViewerGui::setNonNodesInBBX(const point3d& min, const point3d& max, bool occupied) {$/;"	f	class:octomap::ViewerGui
setNumberOfFrames	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::setNumberOfFrames(unsigned frames){$/;"	f	class:ViewerSettingsPanelCamera
setNumberOfScans	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::setNumberOfScans(unsigned scans){$/;"	f	class:ViewerSettingsPanel
setOcTree	ColorOcTreeDrawer.cpp	/^  void ColorOcTreeDrawer::setOcTree(const AbstractOcTree& tree_pnt,$/;"	f	class:octomap::ColorOcTreeDrawer
setOcTree	OcTreeDrawer.cpp	/^  void OcTreeDrawer::setOcTree(const AbstractOcTree& tree, const pose6d& origin, int map_id_) {$/;"	f	class:octomap::OcTreeDrawer
setOcTreeSelection	OcTreeDrawer.cpp	/^  void OcTreeDrawer::setOcTreeSelection(const std::list<octomap::OcTreeVolume>& selectedVoxels){$/;"	f	class:octomap::OcTreeDrawer
setOcTreeUISwitches	ViewerGui.cpp	/^void ViewerGui::setOcTreeUISwitches() {$/;"	f	class:octomap::ViewerGui
setOption	extern/QGLViewer/VRender/VRender.cpp	/^void VRenderParams::setOption(VRenderOption opt,bool b)$/;"	f	class:VRenderParams
setOrientation	extern/QGLViewer/camera.cpp	/^void Camera::setOrientation(const Quaternion& q)$/;"	f	class:Camera
setOrientation	extern/QGLViewer/camera.cpp	/^void Camera::setOrientation(float theta, float phi)$/;"	f	class:Camera
setOrientation	extern/QGLViewer/frame.cpp	/^void Frame::setOrientation(const Quaternion& orientation)$/;"	f	class:Frame
setOrientation	extern/QGLViewer/frame.cpp	/^void Frame::setOrientation(double q0, double q1, double q2, double q3)$/;"	f	class:Frame
setOrientationWithConstraint	extern/QGLViewer/frame.cpp	/^void Frame::setOrientationWithConstraint(Quaternion& orientation)$/;"	f	class:Frame
setOrigin	OcTreeDrawer.cpp	/^  void OcTreeDrawer::setOrigin(octomap::pose6d t){$/;"	f	class:octomap::OcTreeDrawer
setPathKey	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setPathKey(int key, int index)$/;"	f	class:QGLViewer
setPhysicalDistanceToScreen	extern/QGLViewer/camera.h	/^	void setPhysicalDistanceToScreen(float distance) { Q_UNUSED(distance); qWarning("setPhysicalDistanceToScreen is deprecated, use setPhysicalScreenWidth instead"); };$/;"	f	class:qglviewer::Camera
setPhysicalScreenWidth	extern/QGLViewer/camera.h	/^    void setPhysicalScreenWidth(float width) { physicalScreenWidth_ = width; };$/;"	f	class:qglviewer::Camera
setPlayKeyFramePathStateKey	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setPlayKeyFramePathStateKey(int buttonState)$/;"	f	class:QGLViewer
setPlayPathKeyboardModifiers	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setPlayPathKeyboardModifiers(Qt::KeyboardModifiers modifiers)$/;"	f	class:QGLViewer
setPlayPathStateKey	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setPlayPathStateKey(int buttonState)$/;"	f	class:QGLViewer
setPosition	extern/QGLViewer/camera.h	/^    void setPosition(const Vec& pos) { frame()->setPosition(pos); };$/;"	f	class:qglviewer::Camera
setPosition	extern/QGLViewer/frame.cpp	/^void Frame::setPosition(const Vec& position)$/;"	f	class:Frame
setPosition	extern/QGLViewer/frame.cpp	/^void Frame::setPosition(float x, float y, float z)$/;"	f	class:Frame
setPositionAndOrientation	extern/QGLViewer/frame.cpp	/^void Frame::setPositionAndOrientation(const Vec& position, const Quaternion& orientation)$/;"	f	class:Frame
setPositionAndOrientationWithConstraint	extern/QGLViewer/frame.cpp	/^void Frame::setPositionAndOrientationWithConstraint(Vec& position, Quaternion& orientation)$/;"	f	class:Frame
setPositionWithConstraint	extern/QGLViewer/frame.cpp	/^void Frame::setPositionWithConstraint(Vec& position)$/;"	f	class:Frame
setProgressFunction	extern/QGLViewer/VRender/VRender.h	/^			void setProgressFunction(ProgressFunction pf) { _progress_function = pf ; }$/;"	f	class:vrender::VRenderParams
setReferenceFrame	extern/QGLViewer/frame.cpp	/^void Frame::setReferenceFrame(const Frame* const refFrame)$/;"	f	class:Frame
setResolution	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::setResolution(double resolution){$/;"	f	class:ViewerSettingsPanel
setRevolveAroundPoint	extern/QGLViewer/camera.cpp	/^void Camera::setRevolveAroundPoint(const Vec& rap)$/;"	f	class:Camera
setRevolveAroundPoint	extern/QGLViewer/manipulatedCameraFrame.h	/^    void setRevolveAroundPoint(const Vec& revolveAroundPoint) { revolveAroundPoint_ = revolveAroundPoint; }$/;"	f	class:qglviewer::ManipulatedCameraFrame
setRevolveAroundPointFromPixel	extern/QGLViewer/camera.cpp	/^bool Camera::setRevolveAroundPointFromPixel(const QPoint& pixel)$/;"	f	class:Camera
setRobotTrajectoryAvailable	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::setRobotTrajectoryAvailable(bool available) {$/;"	f	class:ViewerSettingsPanelCamera
setRotation	extern/QGLViewer/frame.cpp	/^void Frame::setRotation(double q0, double q1, double q2, double q3)$/;"	f	class:Frame
setRotation	extern/QGLViewer/frame.h	/^    void setRotation(const Quaternion& rotation) { q_ = rotation; Q_EMIT modified(); };$/;"	f	class:qglviewer::Frame
setRotationConstraint	extern/QGLViewer/constraint.cpp	/^void AxisPlaneConstraint::setRotationConstraint(Type type, const Vec& direction)$/;"	f	class:AxisPlaneConstraint
setRotationConstraintDirection	extern/QGLViewer/constraint.cpp	/^void AxisPlaneConstraint::setRotationConstraintDirection(const Vec& direction)$/;"	f	class:AxisPlaneConstraint
setRotationConstraintType	extern/QGLViewer/constraint.cpp	/^void AxisPlaneConstraint::setRotationConstraintType(Type type)$/;"	f	class:AxisPlaneConstraint
setRotationSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    void setRotationSensitivity(float sensitivity) { rotSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame
setRotationWithConstraint	extern/QGLViewer/frame.cpp	/^void Frame::setRotationWithConstraint(Quaternion& rotation)$/;"	f	class:Frame
setScanGraph	CameraFollowMode.cpp	/^void CameraFollowMode::setScanGraph(octomap::ScanGraph *graph) {$/;"	f	class:CameraFollowMode
setScanGraph	PointcloudDrawer.cpp	/^  void PointcloudDrawer::setScanGraph(const ScanGraph& graph){$/;"	f	class:octomap::PointcloudDrawer
setScanGraph	TrajectoryDrawer.cpp	/^  void TrajectoryDrawer::setScanGraph(const octomap::ScanGraph& graph){$/;"	f	class:octomap::TrajectoryDrawer
setSceneBoundingBox	ViewerWidget.cpp	/^void ViewerWidget::setSceneBoundingBox(const qglviewer::Vec& min, const qglviewer::Vec& max){$/;"	f	class:octomap::ViewerWidget
setSceneBoundingBox	extern/QGLViewer/camera.cpp	/^void Camera::setSceneBoundingBox(const Vec& min, const Vec& max)$/;"	f	class:Camera
setSceneBoundingBox	extern/QGLViewer/qglviewer.h	/^		void setSceneBoundingBox(const qglviewer::Vec& min, const qglviewer::Vec& max) { camera()->setSceneBoundingBox(min,max); }$/;"	f	class:QGLViewer
setSceneCenter	extern/QGLViewer/camera.cpp	/^void Camera::setSceneCenter(const Vec& center)$/;"	f	class:Camera
setSceneCenter	extern/QGLViewer/qglviewer.h	/^		virtual void setSceneCenter(const qglviewer::Vec& center) { camera()->setSceneCenter(center); }$/;"	f	class:QGLViewer
setSceneCenterFromPixel	extern/QGLViewer/camera.cpp	/^bool Camera::setSceneCenterFromPixel(const QPoint& pixel)$/;"	f	class:Camera
setSceneRadius	extern/QGLViewer/camera.cpp	/^void Camera::setSceneRadius(float radius)$/;"	f	class:Camera
setSceneRadius	extern/QGLViewer/qglviewer.h	/^		virtual void setSceneRadius(float radius) { camera()->setSceneRadius(radius); }$/;"	f	class:QGLViewer
setScreenWidthAndHeight	extern/QGLViewer/camera.cpp	/^void Camera::setScreenWidthAndHeight(int width, int height)$/;"	f	class:Camera
setSelectBufferSize	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setSelectBufferSize(int size)$/;"	f	class:QGLViewer
setSelectRegionHeight	extern/QGLViewer/qglviewer.h	/^		void setSelectRegionHeight(int height) { selectRegionHeight_ = height; };$/;"	f	class:QGLViewer
setSelectRegionWidth	extern/QGLViewer/qglviewer.h	/^		void setSelectRegionWidth(int width) { selectRegionWidth_ = width; };$/;"	f	class:QGLViewer
setSelectedName	extern/QGLViewer/qglviewer.h	/^		void setSelectedName(int id) { selectedObjectId_=id; };$/;"	f	class:QGLViewer
setShortcut	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setShortcut(KeyboardAction action, unsigned int key)$/;"	f	class:QGLViewer
setSnapshotCounter	extern/QGLViewer/qglviewer.h	/^	void setSnapshotCounter(int counter) { snapshotCounter_ = counter; };$/;"	f	class:QGLViewer
setSnapshotFileName	extern/QGLViewer/saveSnapshot.cpp	/^void QGLViewer::setSnapshotFileName(const QString& name)$/;"	f	class:QGLViewer
setSnapshotFormat	extern/QGLViewer/qglviewer.h	/^	void setSnapshotFormat(const QString& format) { snapshotFormat_ = format; };$/;"	f	class:QGLViewer
setSnapshotQuality	extern/QGLViewer/qglviewer.h	/^	void setSnapshotQuality(int quality) { snapshotQuality_ = quality; };$/;"	f	class:QGLViewer
setSortMethod	extern/QGLViewer/VRender/VRender.h	/^			void setSortMethod(VRenderParams::VRenderSortMethod s) { _sortMethod = s ; }$/;"	f	class:vrender::VRenderParams
setSpinningQuaternion	extern/QGLViewer/manipulatedFrame.h	/^    void setSpinningQuaternion(const Quaternion& spinningQuaternion) { spinningQuaternion_ = spinningQuaternion; }$/;"	f	class:qglviewer::ManipulatedFrame
setSpinningSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    void setSpinningSensitivity(float sensitivity) { spinningSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame
setStateFileName	extern/QGLViewer/qglviewer.h	/^		void setStateFileName(const QString& name) { stateFileName_ = name; };$/;"	f	class:QGLViewer
setStereoDisplay	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setStereoDisplay(bool stereo)$/;"	f	class:QGLViewer
setStopped	ViewerSettingsPanelCamera.cpp	/^void ViewerSettingsPanelCamera::setStopped(){$/;"	f	class:ViewerSettingsPanelCamera
setTextIsEnabled	extern/QGLViewer/qglviewer.h	/^		void setTextIsEnabled(bool enable=true) { textIsEnabled_ = enable; Q_EMIT textIsEnabledChanged(enable); if (updateGLOK_) updateGL(); };$/;"	f	class:QGLViewer
setTranslation	extern/QGLViewer/frame.cpp	/^void Frame::setTranslation(float x, float y, float z)$/;"	f	class:Frame
setTranslation	extern/QGLViewer/frame.h	/^    void setTranslation(const Vec& translation) { t_ = translation; Q_EMIT modified(); };$/;"	f	class:qglviewer::Frame
setTranslationAndRotation	extern/QGLViewer/frame.cpp	/^void Frame::setTranslationAndRotation(const Vec& translation, const Quaternion& rotation)$/;"	f	class:Frame
setTranslationAndRotationWithConstraint	extern/QGLViewer/frame.cpp	/^void Frame::setTranslationAndRotationWithConstraint(Vec& translation, Quaternion& rotation)$/;"	f	class:Frame
setTranslationConstraint	extern/QGLViewer/constraint.cpp	/^void AxisPlaneConstraint::setTranslationConstraint(Type type, const Vec& direction)$/;"	f	class:AxisPlaneConstraint
setTranslationConstraintDirection	extern/QGLViewer/constraint.cpp	/^void AxisPlaneConstraint::setTranslationConstraintDirection(const Vec& direction)$/;"	f	class:AxisPlaneConstraint
setTranslationConstraintType	extern/QGLViewer/constraint.h	/^    void setTranslationConstraintType(Type type) { translationConstraintType_ = type; };$/;"	f	class:qglviewer::AxisPlaneConstraint
setTranslationSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    void setTranslationSensitivity(float sensitivity) { transSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame
setTranslationWithConstraint	extern/QGLViewer/frame.cpp	/^void Frame::setTranslationWithConstraint(Vec& translation)$/;"	f	class:Frame
setTreeDepth	ViewerSettingsPanel.cpp	/^void ViewerSettingsPanel::setTreeDepth(int depth){$/;"	f	class:ViewerSettingsPanel
setType	extern/QGLViewer/camera.cpp	/^void Camera::setType(Type type)$/;"	f	class:Camera
setUpVector	extern/QGLViewer/camera.cpp	/^void Camera::setUpVector(const Vec& up, bool noMove)$/;"	f	class:Camera
setValue	extern/QGLViewer/quaternion.h	/^		void setValue(double q0, double q1, double q2, double q3)$/;"	f	class:qglviewer::Quaternion
setValue	extern/QGLViewer/vec.h	/^  void setValue(double X, double Y, double Z)$/;"	f	class:qglviewer::Vec
setViewDirection	extern/QGLViewer/camera.cpp	/^void Camera::setViewDirection(const Vec& direction)$/;"	f	class:Camera
setVisualHintsMask	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setVisualHintsMask(int mask, int delay)$/;"	f	class:QGLViewer
setWheelBinding	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::setWheelBinding(Qt::KeyboardModifiers modifiers, MouseHandler handler, MouseAction action, bool withConstraint)$/;"	f	class:QGLViewer
setWheelSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    void setWheelSensitivity(float sensitivity) { wheelSensitivity_ = sensitivity; };$/;"	f	class:qglviewer::ManipulatedFrame
setX	extern/QGLViewer/VRender/Vector2.h	/^			inline void  setX(double r) { _xyz[0] = r; }$/;"	f	class:vrender::Vector2
setX	extern/QGLViewer/VRender/Vector3.h	/^			inline void  setX(double r) { _xyz[0] = r; }$/;"	f	class:vrender::Vector3
setXY	extern/QGLViewer/VRender/Vector2.h	/^			inline void  setXY (double x,double y) { _xyz[0] = x; _xyz[1] = y; }$/;"	f	class:vrender::Vector2
setXYZ	extern/QGLViewer/VRender/NVector3.cpp	/^void NVector3::setXYZ(double x,double y,double z,bool normalization)$/;"	f	class:NVector3
setXYZ	extern/QGLViewer/VRender/Vector3.h	/^			inline void  setXYZ (double x,double y,double z) { _xyz[0] = x; _xyz[1] = y; _xyz[2] = z; }$/;"	f	class:vrender::Vector3
setY	extern/QGLViewer/VRender/Vector2.h	/^			inline void  setY(double r) { _xyz[1] = r; }$/;"	f	class:vrender::Vector2
setY	extern/QGLViewer/VRender/Vector3.h	/^			inline void  setY(double r) { _xyz[1] = r; }$/;"	f	class:vrender::Vector3
setZ	extern/QGLViewer/VRender/Vector3.h	/^			inline void  setZ(double r) { _xyz[2] = r; }$/;"	f	class:vrender::Vector3
setZClippingCoefficient	extern/QGLViewer/camera.h	/^    void setZClippingCoefficient(float coef) { zClippingCoef_ = coef; }$/;"	f	class:qglviewer::Camera
setZNearCoefficient	extern/QGLViewer/camera.h	/^    void setZNearCoefficient(float coef) { zNearCoef_ = coef; };$/;"	f	class:qglviewer::Camera
settingAsReferenceFrameWillCreateALoop	extern/QGLViewer/frame.cpp	/^bool Frame::settingAsReferenceFrameWillCreateALoop(const Frame* const frame)$/;"	f	class:Frame
setupUi	extern/QGLViewer/ui_ImageInterface.h	/^    void setupUi(QDialog *ImageInterface)$/;"	f	class:Ui_ImageInterface
setupUi	extern/QGLViewer/ui_VRenderInterface.h	/^    void setupUi(QDialog *VRenderInterface)$/;"	f	class:Ui_VRenderInterface
shortcut	extern/QGLViewer/qglviewer.cpp	/^unsigned int QGLViewer::shortcut(KeyboardAction action) const$/;"	f	class:QGLViewer
shortcutBindingsString	extern/QGLViewer/qglviewer.h	/^	virtual QString shortcutBindingsString () const { return keyboardString(); }$/;"	f	class:QGLViewer
showEntireScene	extern/QGLViewer/camera.cpp	/^void Camera::showEntireScene()$/;"	f	class:Camera
showEntireScene	extern/QGLViewer/qglviewer.h	/^		void showEntireScene() { camera()->showEntireScene(); if (updateGLOK_) updateGL(); }$/;"	f	class:QGLViewer
showInfo	ViewerGui.cpp	/^void ViewerGui::showInfo(QString string, bool newline) {$/;"	f	class:octomap::ViewerGui
showOcTree	ViewerGui.cpp	/^void ViewerGui::showOcTree() {$/;"	f	class:octomap::ViewerGui
showProgressDialog	extern/QGLViewer/saveSnapshot.cpp	/^void ProgressDialog::showProgressDialog(QGLWidget* parent)$/;"	f	class:ProgressDialog
size	extern/QGLViewer/VRender/VRender.h	/^			int& size()  { static int size=1000000; return size ; }$/;"	f	class:vrender::VRenderParams
sizeHint	ViewerSettingsPanelCamera.cpp	/^QSize ViewerSettingsPanelCamera::sizeHint() const {$/;"	f	class:ViewerSettingsPanelCamera
sizeHint	extern/QGLViewer/qglviewer.h	/^	virtual QSize sizeHint() const { return QSize(600, 400); }$/;"	f	class:QGLViewer
sizeInBuffer	extern/QGLViewer/VRender/Primitive.h	/^        static int sizeInBuffer() { return 7 ; }$/;"	f	class:vrender::Feedback3DColor
slerp	extern/QGLViewer/quaternion.cpp	/^Quaternion Quaternion::slerp(const Quaternion& a, const Quaternion& b, float t, bool allowFlip)$/;"	f	class:Quaternion
snapshotCounter	extern/QGLViewer/qglviewer.h	/^	int snapshotCounter() const { return snapshotCounter_; };$/;"	f	class:QGLViewer
snapshotCounter_	extern/QGLViewer/qglviewer.h	/^	int snapshotCounter_, snapshotQuality_;$/;"	m	class:QGLViewer
snapshotFileName	extern/QGLViewer/qglviewer.h	/^	const QString& snapshotFileName() const { return snapshotFileName_; };$/;"	f	class:QGLViewer
snapshotFileName_	extern/QGLViewer/qglviewer.h	/^	QString snapshotFileName_, snapshotFormat_;$/;"	m	class:QGLViewer
snapshotFilename	extern/QGLViewer/saveSnapshot.cpp	/^const QString& QGLViewer::snapshotFilename() const$/;"	f	class:QGLViewer
snapshotFormat	extern/QGLViewer/qglviewer.h	/^	const QString& snapshotFormat() const { return snapshotFormat_; };$/;"	f	class:QGLViewer
snapshotFormat_	extern/QGLViewer/qglviewer.h	/^	QString snapshotFileName_, snapshotFormat_;$/;"	m	class:QGLViewer
snapshotQuality	extern/QGLViewer/qglviewer.h	/^	int snapshotQuality() { return snapshotQuality_; };$/;"	f	class:QGLViewer
snapshotQuality_	extern/QGLViewer/qglviewer.h	/^	int snapshotCounter_, snapshotQuality_;$/;"	m	class:QGLViewer
snapshotToClipboard	extern/QGLViewer/saveSnapshot.cpp	/^void QGLViewer::snapshotToClipboard()$/;"	f	class:QGLViewer
sommet3DColor	extern/QGLViewer/VRender/Primitive.cpp	/^const Feedback3DColor& Point::sommet3DColor(int) const$/;"	f	class:Point
sommet3DColor	extern/QGLViewer/VRender/Primitive.cpp	/^const Feedback3DColor& Polygone::sommet3DColor(int i) const$/;"	f	class:Polygone
sommet3DColor	extern/QGLViewer/VRender/Primitive.cpp	/^const Feedback3DColor& Segment::sommet3DColor(int i) const$/;"	f	class:Segment
sortLabel	extern/QGLViewer/ui_VRenderInterface.h	/^    QLabel *sortLabel;$/;"	m	class:Ui_VRenderInterface
sortMethod	extern/QGLViewer/VRender/VRender.h	/^			int sortMethod()    { return _sortMethod; }$/;"	f	class:vrender::VRenderParams
sortMethod	extern/QGLViewer/ui_VRenderInterface.h	/^    QComboBox *sortMethod;$/;"	m	class:Ui_VRenderInterface
sortPrimitives	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^void BSPSortMethod::sortPrimitives(std::vector<PtrPrimitive>& primitive_tab,VRenderParams& vparams)$/;"	f	class:BSPSortMethod
sortPrimitives	extern/QGLViewer/VRender/SortMethod.h	/^			virtual void sortPrimitives(std::vector<PtrPrimitive>&,VRenderParams&) {}$/;"	f	class:vrender::DontSortMethod
sortPrimitives	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortMethod::sortPrimitives(vector<PtrPrimitive>& primitive_tab,VRenderParams& vparams)$/;"	f	class:vrender::TopologicalSortMethod
spacerItem	extern/QGLViewer/ui_ImageInterface.h	/^    QSpacerItem *spacerItem;$/;"	m	class:Ui_ImageInterface
spacerItem	extern/QGLViewer/ui_VRenderInterface.h	/^    QSpacerItem *spacerItem;$/;"	m	class:Ui_VRenderInterface
spacerItem1	extern/QGLViewer/ui_ImageInterface.h	/^    QSpacerItem *spacerItem1;$/;"	m	class:Ui_ImageInterface
spacerItem2	extern/QGLViewer/ui_ImageInterface.h	/^    QSpacerItem *spacerItem2;$/;"	m	class:Ui_ImageInterface
spacerItem3	extern/QGLViewer/ui_ImageInterface.h	/^    QSpacerItem *spacerItem3;$/;"	m	class:Ui_ImageInterface
spacerItem4	extern/QGLViewer/ui_ImageInterface.h	/^    QSpacerItem *spacerItem4;$/;"	m	class:Ui_ImageInterface
spewPoint	extern/QGLViewer/VRender/EPSExporter.cpp	/^void EPSExporter::spewPoint(const Point *P, QTextStream& out)$/;"	f	class:EPSExporter
spewPoint	extern/QGLViewer/VRender/FIGExporter.cpp	/^void FIGExporter::spewPoint(const Point *P, QTextStream& out)$/;"	f	class:FIGExporter
spewPolygone	extern/QGLViewer/VRender/EPSExporter.cpp	/^void EPSExporter::spewPolygone(const Polygone *P, QTextStream& out)$/;"	f	class:EPSExporter
spewPolygone	extern/QGLViewer/VRender/FIGExporter.cpp	/^void FIGExporter::spewPolygone(const Polygone *P, QTextStream& out)$/;"	f	class:FIGExporter
spewSegment	extern/QGLViewer/VRender/EPSExporter.cpp	/^void EPSExporter::spewSegment(const Segment *S, QTextStream& out)$/;"	f	class:EPSExporter
spewSegment	extern/QGLViewer/VRender/FIGExporter.cpp	/^void FIGExporter::spewSegment(const Segment *S, QTextStream& out)$/;"	f	class:FIGExporter
spin	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::spin()$/;"	f	class:ManipulatedCameraFrame
spin	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::spin()$/;"	f	class:ManipulatedFrame
spinUpdate	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::spinUpdate()$/;"	f	class:ManipulatedFrame
spinningQuaternion	extern/QGLViewer/manipulatedFrame.h	/^    Quaternion spinningQuaternion() const { return spinningQuaternion_; }$/;"	f	class:qglviewer::ManipulatedFrame
spinningQuaternion_	extern/QGLViewer/manipulatedFrame.h	/^    Quaternion spinningQuaternion_;$/;"	m	class:qglviewer::ManipulatedFrame
spinningSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    float spinningSensitivity() const { return spinningSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame
spinningSensitivity_	extern/QGLViewer/manipulatedFrame.h	/^    float spinningSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame
spinningTimer_	extern/QGLViewer/manipulatedFrame.h	/^    QTimer spinningTimer_;$/;"	m	class:qglviewer::ManipulatedFrame
splineCacheIsValid_	extern/QGLViewer/keyFrameInterpolator.h	/^    bool splineCacheIsValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator
split	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^void PrimitivePositioning::split(Point *P,const NVector3& v,double C,Primitive * & P_plus,Primitive * & P_moins)$/;"	f	class:PrimitivePositioning
split	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^void PrimitivePositioning::split(Polygone *P,const NVector3& v,double C,Primitive *& P_plus,Primitive *& P_moins)$/;"	f	class:PrimitivePositioning
split	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^void PrimitivePositioning::split(Segment *S,const NVector3& v,double C,Primitive * & P_plus,Primitive * & P_moins)$/;"	f	class:PrimitivePositioning
splitPrimitive	extern/QGLViewer/VRender/PrimitivePositioning.cpp	/^void PrimitivePositioning::splitPrimitive(Primitive *P,const NVector3& v,double c, Primitive *& prim_up,Primitive *& prim_lo)$/;"	f	class:PrimitivePositioning
spun	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^void qglviewer::ManipulatedFrame::spun()$/;"	f	class:qglviewer::ManipulatedFrame
sqNorm	extern/QGLViewer/vec.h	/^  double sqNorm() const { return x*x + y*y + z*z; }$/;"	f	class:qglviewer::Vec
squad	extern/QGLViewer/quaternion.cpp	/^Quaternion Quaternion::squad(const Quaternion& a, const Quaternion& tgA, const Quaternion& tgB, const Quaternion& b, float t)$/;"	f	class:Quaternion
squadTangent	extern/QGLViewer/quaternion.cpp	/^Quaternion Quaternion::squadTangent(const Quaternion& before, const Quaternion& center, const Quaternion& after)$/;"	f	class:Quaternion
squareNorm	extern/QGLViewer/VRender/NVector3.h	/^    inline double squareNorm() const {return 1.0;}$/;"	f	class:vrender::NVector3
squareNorm	extern/QGLViewer/VRender/Vector2.cpp	/^double Vector2::squareNorm () const$/;"	f	class:Vector2
squareNorm	extern/QGLViewer/VRender/Vector3.cpp	/^double Vector3::squareNorm () const$/;"	f	class:Vector3
squaredNorm	extern/QGLViewer/vec.h	/^  double squaredNorm() const { return x*x + y*y + z*z; }$/;"	f	class:qglviewer::Vec
st_node	extern/QGLViewer/VRender/gpc.cpp	/^} st_node;$/;"	t	typeref:struct:st_shape	file:
st_shape	extern/QGLViewer/VRender/gpc.cpp	/^typedef struct st_shape             \/* Sorted edge table                 *\/$/;"	s	file:
startAction	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::startAction(int ma, bool withConstraint)$/;"	f	class:ManipulatedCameraFrame
startAction	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::startAction(int ma, bool withConstraint)$/;"	f	class:ManipulatedFrame
startAnimation	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::startAnimation()$/;"	f	class:QGLViewer
startInterpolation	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::startInterpolation(int period)$/;"	f	class:KeyFrameInterpolator
startScreenCoordinatesSystem	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::startScreenCoordinatesSystem(bool upward) const$/;"	f	class:QGLViewer
startSpinning	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::startSpinning(int updateInterval)$/;"	f	class:ManipulatedFrame
stateFileName	extern/QGLViewer/qglviewer.cpp	/^QString QGLViewer::stateFileName() const$/;"	f	class:QGLViewer
stateFileName_	extern/QGLViewer/qglviewer.h	/^	QString stateFileName_;$/;"	m	class:QGLViewer
staticMetaObject	extern/QGLViewer/.moc/moc_camera.cpp	/^const QMetaObject qglviewer::Camera::staticMetaObject = {$/;"	m	class:qglviewer::Camera	file:
staticMetaObject	extern/QGLViewer/.moc/moc_frame.cpp	/^const QMetaObject qglviewer::Frame::staticMetaObject = {$/;"	m	class:qglviewer::Frame	file:
staticMetaObject	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^const QMetaObject qglviewer::KeyFrameInterpolator::staticMetaObject = {$/;"	m	class:qglviewer::KeyFrameInterpolator	file:
staticMetaObject	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^const QMetaObject qglviewer::ManipulatedCameraFrame::staticMetaObject = {$/;"	m	class:qglviewer::ManipulatedCameraFrame	file:
staticMetaObject	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^const QMetaObject qglviewer::ManipulatedFrame::staticMetaObject = {$/;"	m	class:qglviewer::ManipulatedFrame	file:
staticMetaObject	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^const QMetaObject QGLViewer::staticMetaObject = {$/;"	m	class:QGLViewer	file:
staticMetaObjectExtraData	extern/QGLViewer/.moc/moc_camera.cpp	/^const QMetaObjectExtraData qglviewer::Camera::staticMetaObjectExtraData = {$/;"	m	class:qglviewer::Camera	file:
staticMetaObjectExtraData	extern/QGLViewer/.moc/moc_frame.cpp	/^const QMetaObjectExtraData qglviewer::Frame::staticMetaObjectExtraData = {$/;"	m	class:qglviewer::Frame	file:
staticMetaObjectExtraData	extern/QGLViewer/.moc/moc_keyFrameInterpolator.cpp	/^const QMetaObjectExtraData qglviewer::KeyFrameInterpolator::staticMetaObjectExtraData = {$/;"	m	class:qglviewer::KeyFrameInterpolator	file:
staticMetaObjectExtraData	extern/QGLViewer/.moc/moc_manipulatedCameraFrame.cpp	/^const QMetaObjectExtraData qglviewer::ManipulatedCameraFrame::staticMetaObjectExtraData = {$/;"	m	class:qglviewer::ManipulatedCameraFrame	file:
staticMetaObjectExtraData	extern/QGLViewer/.moc/moc_manipulatedFrame.cpp	/^const QMetaObjectExtraData qglviewer::ManipulatedFrame::staticMetaObjectExtraData = {$/;"	m	class:qglviewer::ManipulatedFrame	file:
staticMetaObjectExtraData	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^const QMetaObjectExtraData QGLViewer::staticMetaObjectExtraData = {$/;"	m	class:QGLViewer	file:
stereoChanged	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::stereoChanged(bool _t1)$/;"	f	class:QGLViewer
stereo_	extern/QGLViewer/qglviewer.h	/^	bool stereo_;		\/\/ stereo display$/;"	m	class:QGLViewer
stopAnimation	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::stopAnimation()$/;"	f	class:QGLViewer
stopCameraPath	ViewerWidget.cpp	/^void ViewerWidget::stopCameraPath(int id) {$/;"	f	class:octomap::ViewerWidget
stopInterpolation	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::stopInterpolation()$/;"	f	class:KeyFrameInterpolator
stopScreenCoordinatesSystem	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::stopScreenCoordinatesSystem() const$/;"	f	class:QGLViewer
stopSpinning	extern/QGLViewer/manipulatedFrame.h	/^    virtual void stopSpinning() { spinningTimer_.stop(); isSpinning_ = false; };$/;"	f	class:qglviewer::ManipulatedFrame
strip	extern/QGLViewer/VRender/gpc.h	/^  gpc_vertex_list    *strip;        \/* Tristrip array pointer            *\/$/;"	m	struct:__anon5
succ	extern/QGLViewer/VRender/gpc.cpp	/^		edge_node  *succ;         			 \/* Edge connected at the upper end   *\/$/;"	m	class:edge_node	file:
suppressPrecedence	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::suppressPrecedence(int a,int b,vector< vector<int> >& precedence_graph)$/;"	f	class:vrender::TopologicalSortUtils
t_	extern/QGLViewer/frame.h	/^    Vec t_;$/;"	m	class:qglviewer::Frame
tableLine	extern/QGLViewer/qglviewer.cpp	/^static QString tableLine(const QString& left, const QString& right)$/;"	f	file:
textIsEnabled	extern/QGLViewer/qglviewer.h	/^	bool textIsEnabled() const { return textIsEnabled_; };$/;"	f	class:QGLViewer
textIsEnabledChanged	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::textIsEnabledChanged(bool _t1)$/;"	f	class:QGLViewer
textIsEnabled_	extern/QGLViewer/qglviewer.h	/^	bool textIsEnabled_;	\/\/ drawText() actually draws text or not$/;"	m	class:QGLViewer
textScale	extern/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion
tgP	extern/QGLViewer/keyFrameInterpolator.h	/^      Vec tgP() const { return tgP_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame
tgP_	extern/QGLViewer/keyFrameInterpolator.h	/^      Vec p_, tgP_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame
tgQ	extern/QGLViewer/keyFrameInterpolator.h	/^      Quaternion tgQ() const { return tgQ_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame
tgQ_	extern/QGLViewer/keyFrameInterpolator.h	/^      Quaternion q_, tgQ_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame
tightenBBox	extern/QGLViewer/ui_VRenderInterface.h	/^    QCheckBox *tightenBBox;$/;"	m	class:Ui_VRenderInterface
tileRegion_	extern/QGLViewer/qglviewer.h	/^	TileRegion* tileRegion_;$/;"	m	class:QGLViewer
time	extern/QGLViewer/keyFrameInterpolator.h	/^      float time() const { return time_; }$/;"	f	class:qglviewer::KeyFrameInterpolator::KeyFrame
time_	extern/QGLViewer/keyFrameInterpolator.h	/^      float time_;$/;"	m	class:qglviewer::KeyFrameInterpolator::KeyFrame
timerEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::timerEvent(QTimerEvent *)$/;"	f	class:QGLViewer
timer_	extern/QGLViewer/keyFrameInterpolator.h	/^    QTimer timer_;$/;"	m	class:qglviewer::KeyFrameInterpolator
toggleAnimation	extern/QGLViewer/qglviewer.h	/^		void toggleAnimation() { if (animationIsStarted()) stopAnimation(); else startAnimation(); };$/;"	f	class:QGLViewer
toggleAxisIsDrawn	extern/QGLViewer/qglviewer.h	/^		void toggleAxisIsDrawn() { setAxisIsDrawn(!axisIsDrawn()); };$/;"	f	class:QGLViewer
toggleCameraIsEdited	extern/QGLViewer/qglviewer.h	/^		void toggleCameraIsEdited() { setCameraIsEdited(!cameraIsEdited()); };$/;"	f	class:QGLViewer
toggleCameraMode	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::toggleCameraMode()$/;"	f	class:QGLViewer
toggleFPSIsDisplayed	extern/QGLViewer/qglviewer.h	/^		void toggleFPSIsDisplayed() { setFPSIsDisplayed(!FPSIsDisplayed()); };$/;"	f	class:QGLViewer
toggleFullScreen	extern/QGLViewer/qglviewer.h	/^		void toggleFullScreen() { setFullScreen(!isFullScreen()); };$/;"	f	class:QGLViewer
toggleGridIsDrawn	extern/QGLViewer/qglviewer.h	/^		void toggleGridIsDrawn() { setGridIsDrawn(!gridIsDrawn()); };$/;"	f	class:QGLViewer
toggleInterpolation	extern/QGLViewer/keyFrameInterpolator.h	/^    void toggleInterpolation() { if (interpolationIsStarted()) stopInterpolation(); else startInterpolation(); };$/;"	f	class:qglviewer::KeyFrameInterpolator
toggleStereoDisplay	extern/QGLViewer/qglviewer.h	/^		void toggleStereoDisplay() { setStereoDisplay(!stereo_); };$/;"	f	class:QGLViewer
toggleTextIsEnabled	extern/QGLViewer/qglviewer.h	/^		void toggleTextIsEnabled() { setTextIsEnabled(!textIsEnabled()); };$/;"	f	class:QGLViewer
top	extern/QGLViewer/VRender/gpc.cpp	/^		gpc_vertex          top;          \/* Edge upper (x, y) coordinate      *\/$/;"	m	class:edge_node	file:
topologicalSort	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::topologicalSort(vector< vector<int> >& precedence_graph,$/;"	f	class:vrender::TopologicalSortUtils
topologicalSortBreakCycles	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^void TopologicalSortUtils::topologicalSortBreakCycles(vector< vector<int> >& precedence_graph,$/;"	f	class:vrender::TopologicalSortUtils
transSensitivity_	extern/QGLViewer/manipulatedFrame.h	/^    float transSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame
transformOf	extern/QGLViewer/frame.cpp	/^Vec Frame::transformOf(const Vec& src) const$/;"	f	class:Frame
transformOfFrom	extern/QGLViewer/frame.cpp	/^Vec Frame::transformOfFrom(const Vec& src, const Frame* const from) const$/;"	f	class:Frame
transformOfIn	extern/QGLViewer/frame.cpp	/^Vec Frame::transformOfIn(const Vec& src, const Frame* const in) const$/;"	f	class:Frame
translate	extern/QGLViewer/frame.cpp	/^void Frame::translate(Vec& t)$/;"	f	class:Frame
translate	extern/QGLViewer/frame.cpp	/^void Frame::translate(const Vec& t)$/;"	f	class:Frame
translate	extern/QGLViewer/frame.cpp	/^void Frame::translate(float x, float y, float z)$/;"	f	class:Frame
translate	extern/QGLViewer/frame.cpp	/^void Frame::translate(float& x, float& y, float& z)$/;"	f	class:Frame
translation	extern/QGLViewer/frame.h	/^    Vec translation() const { return t_; };$/;"	f	class:qglviewer::Frame
translationConstraintDir_	extern/QGLViewer/constraint.h	/^    Vec translationConstraintDir_;$/;"	m	class:qglviewer::AxisPlaneConstraint
translationConstraintDirection	extern/QGLViewer/constraint.h	/^    Vec translationConstraintDirection() const { return translationConstraintDir_; };$/;"	f	class:qglviewer::AxisPlaneConstraint
translationConstraintType	extern/QGLViewer/constraint.h	/^    Type translationConstraintType() const { return translationConstraintType_; };$/;"	f	class:qglviewer::AxisPlaneConstraint
translationConstraintType_	extern/QGLViewer/constraint.h	/^    Type translationConstraintType_;$/;"	m	class:qglviewer::AxisPlaneConstraint
translationSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    float translationSensitivity() const { return transSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame
turnQuaternion	extern/QGLViewer/manipulatedCameraFrame.cpp	/^Quaternion ManipulatedCameraFrame::turnQuaternion(int x, const Camera* const camera)$/;"	f	class:ManipulatedCameraFrame
type	extern/QGLViewer/VRender/gpc.cpp	/^		int                 type;         \/* Clip \/ subject edge flag          *\/$/;"	m	class:edge_node	file:
type	extern/QGLViewer/camera.h	/^    Type type() const { return type_; };$/;"	f	class:qglviewer::Camera
type_	extern/QGLViewer/camera.h	/^    Type type_; \/\/ PERSPECTIVE or ORTHOGRAPHIC$/;"	m	class:qglviewer::Camera
unit	extern/QGLViewer/vec.h	/^  Vec unit() const$/;"	f	class:qglviewer::Vec
unprojectedCoordinatesOf	extern/QGLViewer/camera.cpp	/^Vec Camera::unprojectedCoordinatesOf(const Vec& src, const Frame* frame) const$/;"	f	class:Camera
upVector	extern/QGLViewer/camera.h	/^    Vec upVector() const$/;"	f	class:qglviewer::Camera
update	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::update()$/;"	f	class:KeyFrameInterpolator
updateCameraPath	ViewerWidget.cpp	/^void ViewerWidget::updateCameraPath(int id, int frame) {$/;"	f	class:octomap::ViewerWidget
updateCurrentKeyFrameForTime	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::updateCurrentKeyFrameForTime(float time)$/;"	f	class:KeyFrameInterpolator
updateFlyUpVector	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::updateFlyUpVector()$/;"	f	class:ManipulatedCameraFrame
updateGLOK_	extern/QGLViewer/qglviewer.h	/^	bool updateGLOK_;$/;"	m	class:QGLViewer
updateModifiedFrameValues	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::updateModifiedFrameValues()$/;"	f	class:KeyFrameInterpolator
updateNodesInBBX	ViewerGui.cpp	/^void ViewerGui::updateNodesInBBX(const point3d& min, const point3d& max, bool occupied){$/;"	f	class:octomap::ViewerGui
updateProgress	extern/QGLViewer/saveSnapshot.cpp	/^void ProgressDialog::updateProgress(float progress, const QString& stepString)$/;"	f	class:ProgressDialog
updateSplineCache	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::updateSplineCache()$/;"	f	class:KeyFrameInterpolator
updateValuesFromPointer	extern/QGLViewer/keyFrameInterpolator.cpp	/^void KeyFrameInterpolator::KeyFrame::updateValuesFromPointer()$/;"	f	class:KeyFrameInterpolator::KeyFrame
v	extern/QGLViewer/VRender/gpc.cpp	/^		vertex_node        *v[2];         \/* Left and right vertex list ptrs   *\/$/;"	m	class:polygon_node	file:
v1	extern/QGLViewer/keyFrameInterpolator.h	/^    Vec v1, v2;$/;"	m	class:qglviewer::KeyFrameInterpolator
v2	extern/QGLViewer/keyFrameInterpolator.h	/^    Vec v1, v2;$/;"	m	class:qglviewer::KeyFrameInterpolator
v_shape	extern/QGLViewer/VRender/gpc.cpp	/^typedef struct v_shape              \/* Internal vertex list datatype     *\/$/;"	s	file:
value	extern/QGLViewer/qglviewer.cpp	59;"	d	file:
valuesAreValid_	extern/QGLViewer/keyFrameInterpolator.h	/^    bool valuesAreValid_;$/;"	m	class:qglviewer::KeyFrameInterpolator
vboxLayout	extern/QGLViewer/ui_ImageInterface.h	/^    QVBoxLayout *vboxLayout;$/;"	m	class:Ui_ImageInterface
vboxLayout	extern/QGLViewer/ui_VRenderInterface.h	/^    QVBoxLayout *vboxLayout;$/;"	m	class:Ui_VRenderInterface
vertex	extern/QGLViewer/VRender/Primitive.cpp	/^const Vector3& Point::vertex(int) const$/;"	f	class:Point
vertex	extern/QGLViewer/VRender/Primitive.cpp	/^const Vector3& Polygone::vertex(int i) const$/;"	f	class:Polygone
vertex	extern/QGLViewer/VRender/Primitive.cpp	/^const Vector3& Segment::vertex(int i) const$/;"	f	class:Segment
vertex	extern/QGLViewer/VRender/gpc.cpp	/^		gpc_vertex          vertex;       \/* Piggy-backed contour vertex data  *\/$/;"	m	class:edge_node	file:
vertex	extern/QGLViewer/VRender/gpc.h	/^  gpc_vertex         *vertex;       \/* Vertex array pointer              *\/$/;"	m	struct:__anon3
vertex_node	extern/QGLViewer/VRender/gpc.cpp	/^} vertex_node;$/;"	t	typeref:struct:v_shape	file:
vertex_type	extern/QGLViewer/VRender/gpc.cpp	/^} vertex_type;$/;"	t	typeref:enum:__anon8	file:
viewDirection	extern/QGLViewer/camera.h	/^    Vec viewDirection() const { return frame()->inverseTransformOf(Vec(0.0, 0.0, -1.0)); };$/;"	f	class:qglviewer::Camera
viewerInitialized	extern/QGLViewer/.moc/moc_qglviewer.cpp	/^void QGLViewer::viewerInitialized()$/;"	f	class:QGLViewer
visualHint_	extern/QGLViewer/qglviewer.h	/^	int visualHint_;$/;"	m	class:QGLViewer
vrender	extern/QGLViewer/VRender/AxisAlignedBox.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/Exporter.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/NVector3.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/Optimizer.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/ParserGL.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/Primitive.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/PrimitivePositioning.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/SortMethod.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/TopologicalSortMethod.cpp	/^namespace vrender$/;"	n	file:
vrender	extern/QGLViewer/VRender/Types.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/VRender.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/Vector2.h	/^namespace vrender$/;"	n
vrender	extern/QGLViewer/VRender/Vector3.h	/^namespace vrender$/;"	n
warning	extern/QGLViewer/domUtils.h	/^  static void warning(const QString& message)$/;"	f	class:DomUtils
wheelAction	extern/QGLViewer/qglviewer.cpp	/^QGLViewer::MouseAction QGLViewer::wheelAction(Qt::KeyboardModifiers modifiers) const$/;"	f	class:QGLViewer
wheelBinding_	extern/QGLViewer/qglviewer.h	/^    QMap<Qt::KeyboardModifiers, MouseActionPrivate> wheelBinding_;$/;"	m	class:QGLViewer
wheelButtonState	extern/QGLViewer/qglviewer.cpp	/^int QGLViewer::wheelButtonState(MouseHandler handler, MouseAction action, bool withConstraint) const$/;"	f	class:QGLViewer
wheelEvent	extern/QGLViewer/manipulatedCameraFrame.cpp	/^void ManipulatedCameraFrame::wheelEvent(QWheelEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedCameraFrame
wheelEvent	extern/QGLViewer/manipulatedFrame.cpp	/^void ManipulatedFrame::wheelEvent(QWheelEvent* const event, Camera* const camera)$/;"	f	class:ManipulatedFrame
wheelEvent	extern/QGLViewer/mouseGrabber.h	/^    virtual void wheelEvent(QWheelEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };$/;"	f	class:qglviewer::MouseGrabber
wheelEvent	extern/QGLViewer/qglviewer.cpp	/^void QGLViewer::wheelEvent(QWheelEvent* e)$/;"	f	class:QGLViewer
wheelHandler	extern/QGLViewer/qglviewer.cpp	/^int QGLViewer::wheelHandler(Qt::KeyboardModifiers modifiers) const$/;"	f	class:QGLViewer
wheelSensitivity	extern/QGLViewer/manipulatedFrame.h	/^    float wheelSensitivity() const { return wheelSensitivity_; };$/;"	f	class:qglviewer::ManipulatedFrame
wheelSensitivity_	extern/QGLViewer/manipulatedFrame.h	/^    float wheelSensitivity_;$/;"	m	class:qglviewer::ManipulatedFrame
whiteBackground	extern/QGLViewer/ui_ImageInterface.h	/^    QCheckBox *whiteBackground;$/;"	m	class:Ui_ImageInterface
withConstraint	extern/QGLViewer/qglviewer.h	/^		bool withConstraint;$/;"	m	struct:QGLViewer::MouseActionPrivate
worldCoordinatesOf	extern/QGLViewer/camera.h	/^    Vec worldCoordinatesOf(const Vec& src) const { return frame()->inverseCoordinatesOf(src); };$/;"	f	class:qglviewer::Camera
worldInverse	extern/QGLViewer/frame.h	/^    Frame worldInverse() const { return Frame(-(orientation().inverseRotate(position())), orientation().inverse()); }$/;"	f	class:qglviewer::Frame
worldMatrix	extern/QGLViewer/frame.cpp	/^const GLdouble* Frame::worldMatrix() const$/;"	f	class:Frame
writeFooter	extern/QGLViewer/VRender/EPSExporter.cpp	/^void EPSExporter::writeFooter(QTextStream& out) const$/;"	f	class:EPSExporter
writeFooter	extern/QGLViewer/VRender/EPSExporter.cpp	/^void PSExporter::writeFooter(QTextStream& out) const$/;"	f	class:PSExporter
writeFooter	extern/QGLViewer/VRender/FIGExporter.cpp	/^void FIGExporter::writeFooter(QTextStream& out) const$/;"	f	class:FIGExporter
writeHeader	extern/QGLViewer/VRender/EPSExporter.cpp	/^void EPSExporter::writeHeader(QTextStream& out) const$/;"	f	class:EPSExporter
writeHeader	extern/QGLViewer/VRender/FIGExporter.cpp	/^void FIGExporter::writeHeader(QTextStream& out) const$/;"	f	class:FIGExporter
x	extern/QGLViewer/VRender/NVector3.h	/^    inline double x() const {return _n[0];}$/;"	f	class:vrender::NVector3
x	extern/QGLViewer/VRender/Primitive.h	/^        inline FLOAT x() const { return _pos[0] ; }$/;"	f	class:vrender::Feedback3DColor
x	extern/QGLViewer/VRender/Vector2.h	/^			inline double  x() const { return _xyz[0]; }$/;"	f	class:vrender::Vector2
x	extern/QGLViewer/VRender/Vector3.h	/^			inline double  x() const { return _xyz[0]; }$/;"	f	class:vrender::Vector3
x	extern/QGLViewer/VRender/gpc.cpp	/^  double              x;            \/* X coordinate component            *\/$/;"	m	struct:v_shape	file:
x	extern/QGLViewer/VRender/gpc.h	/^  double              x;            \/* Vertex x component                *\/$/;"	m	struct:__anon2
x	extern/QGLViewer/vec.h	/^  double x, y, z;$/;"	m	class:qglviewer::Vec
xMax	extern/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion
xMin	extern/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion
xb	extern/QGLViewer/VRender/gpc.cpp	/^		double              xb;           \/* Scanbeam bottom x coordinate      *\/$/;"	m	class:edge_node	file:
xb	extern/QGLViewer/VRender/gpc.cpp	/^  double              xb;           \/* Scanbeam bottom x coordinate      *\/$/;"	m	struct:st_shape	file:
xmax	extern/QGLViewer/VRender/ParserGL.h	/^			inline GLfloat xmax() const { return _xmax ; }$/;"	f	class:vrender::ParserGL
xmax	extern/QGLViewer/VRender/gpc.cpp	/^  double             xmax;          \/* Maximum x coordinate              *\/$/;"	m	struct:bbox_shape	file:
xmin	extern/QGLViewer/VRender/ParserGL.h	/^			inline GLfloat xmin() const { return _xmin ; }$/;"	f	class:vrender::ParserGL
xmin	extern/QGLViewer/VRender/gpc.cpp	/^  double             xmin;          \/* Minimum x coordinate              *\/$/;"	m	struct:bbox_shape	file:
xt	extern/QGLViewer/VRender/gpc.cpp	/^		double              xt;           \/* Scanbeam top x coordinate         *\/$/;"	m	class:edge_node	file:
xt	extern/QGLViewer/VRender/gpc.cpp	/^  double              xt;           \/* Scanbeam top x coordinate         *\/$/;"	m	struct:st_shape	file:
y	extern/QGLViewer/VRender/NVector3.h	/^    inline double y() const {return _n[1];}$/;"	f	class:vrender::NVector3
y	extern/QGLViewer/VRender/Primitive.h	/^        inline FLOAT y() const { return _pos[1] ; }$/;"	f	class:vrender::Feedback3DColor
y	extern/QGLViewer/VRender/Vector2.h	/^			inline double  y() const { return _xyz[1]; }$/;"	f	class:vrender::Vector2
y	extern/QGLViewer/VRender/Vector3.h	/^			inline double  y() const { return _xyz[1]; }$/;"	f	class:vrender::Vector3
y	extern/QGLViewer/VRender/gpc.cpp	/^		double              y;            \/* Y coordinate at local minimum     *\/$/;"	m	class:lmt_node	file:
y	extern/QGLViewer/VRender/gpc.cpp	/^  double              y;            \/* Scanbeam node y value             *\/$/;"	m	struct:sbt_t_shape	file:
y	extern/QGLViewer/VRender/gpc.cpp	/^  double              y;            \/* Y coordinate component            *\/$/;"	m	struct:v_shape	file:
y	extern/QGLViewer/VRender/gpc.h	/^  double              y;            \/* vertex y component                *\/$/;"	m	struct:__anon2
y	extern/QGLViewer/vec.h	/^  double x, y, z;$/;"	m	class:qglviewer::Vec
yMax	extern/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion
yMin	extern/QGLViewer/qglviewer.h	/^	class TileRegion { public : double xMin, yMin, xMax, yMax, textScale; };$/;"	m	class:QGLViewer::TileRegion
ymax	extern/QGLViewer/VRender/ParserGL.h	/^			inline GLfloat ymax() const { return _ymax ; }$/;"	f	class:vrender::ParserGL
ymax	extern/QGLViewer/VRender/gpc.cpp	/^  double             ymax;          \/* Maximum y coordinate              *\/$/;"	m	struct:bbox_shape	file:
ymin	extern/QGLViewer/VRender/ParserGL.h	/^			inline GLfloat ymin() const { return _ymin ; }$/;"	f	class:vrender::ParserGL
ymin	extern/QGLViewer/VRender/gpc.cpp	/^  double             ymin;          \/* Minimum y coordinate              *\/$/;"	m	struct:bbox_shape	file:
z	extern/QGLViewer/VRender/NVector3.h	/^    inline double z() const {return _n[2];}$/;"	f	class:vrender::NVector3
z	extern/QGLViewer/VRender/Primitive.h	/^        inline FLOAT z() const { return _pos[2] ; }$/;"	f	class:vrender::Feedback3DColor
z	extern/QGLViewer/VRender/Vector3.h	/^			inline double  z() const { return _xyz[2]; }$/;"	f	class:vrender::Vector3
z	extern/QGLViewer/vec.h	/^  double x, y, z;$/;"	m	class:qglviewer::Vec
zClippingCoef_	extern/QGLViewer/camera.h	/^    float zClippingCoef_;$/;"	m	class:qglviewer::Camera
zClippingCoefficient	extern/QGLViewer/camera.h	/^    float zClippingCoefficient() const { return zClippingCoef_; }$/;"	f	class:qglviewer::Camera
zFar	extern/QGLViewer/camera.cpp	/^float Camera::zFar() const$/;"	f	class:Camera
zNear	extern/QGLViewer/camera.cpp	/^float Camera::zNear() const$/;"	f	class:Camera
zNearCoef_	extern/QGLViewer/camera.h	/^    float zNearCoef_;$/;"	m	class:qglviewer::Camera
zNearCoefficient	extern/QGLViewer/camera.h	/^    float zNearCoefficient() const { return zNearCoef_; };$/;"	f	class:qglviewer::Camera
zSize	extern/QGLViewer/VRender/SortMethod.h	/^			FLOAT zSize ;$/;"	m	class:vrender::SortMethod
zmax	extern/QGLViewer/VRender/ParserGL.h	/^			inline GLfloat zmax() const { return _zmax ; }$/;"	f	class:vrender::ParserGL
zmin	extern/QGLViewer/VRender/ParserGL.h	/^			inline GLfloat zmin() const { return _zmin ; }$/;"	f	class:vrender::ParserGL
~AxisPlaneConstraint	extern/QGLViewer/constraint.h	/^    virtual ~AxisPlaneConstraint() {};$/;"	f	class:qglviewer::AxisPlaneConstraint
~BSPNode	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^BSPNode::~BSPNode()$/;"	f	class:BSPNode
~BSPSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^			virtual ~BSPSortMethod() {}$/;"	f	class:vrender::BSPSortMethod
~BSPTree	extern/QGLViewer/VRender/BSPSortMethod.cpp	/^BSPTree::~BSPTree()$/;"	f	class:BSPTree
~BackFaceCullingOptimizer	extern/QGLViewer/VRender/Optimizer.h	/^			virtual ~BackFaceCullingOptimizer() {} ;$/;"	f	class:vrender::BackFaceCullingOptimizer
~Camera	extern/QGLViewer/camera.cpp	/^Camera::~Camera()$/;"	f	class:Camera
~CameraConstraint	extern/QGLViewer/constraint.h	/^    virtual ~CameraConstraint() {};$/;"	f	class:qglviewer::CameraConstraint
~CameraFollowMode	CameraFollowMode.cpp	/^CameraFollowMode::~CameraFollowMode() {$/;"	f	class:CameraFollowMode
~ColorOcTreeDrawer	ColorOcTreeDrawer.cpp	/^  ColorOcTreeDrawer::~ColorOcTreeDrawer() {$/;"	f	class:octomap::ColorOcTreeDrawer
~Constraint	extern/QGLViewer/constraint.h	/^    virtual ~Constraint() {};$/;"	f	class:qglviewer::Constraint
~DontSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^			virtual ~DontSortMethod() {}$/;"	f	class:vrender::DontSortMethod
~EPSExporter	extern/QGLViewer/VRender/Exporter.h	/^			virtual ~EPSExporter() {};$/;"	f	class:vrender::EPSExporter
~Exporter	extern/QGLViewer/VRender/Exporter.h	/^			virtual ~Exporter() {};$/;"	f	class:vrender::Exporter
~FIGExporter	extern/QGLViewer/VRender/Exporter.h	/^			virtual ~FIGExporter() {};$/;"	f	class:vrender::FIGExporter
~Frame	extern/QGLViewer/frame.h	/^    virtual ~Frame() {};$/;"	f	class:qglviewer::Frame
~KeyFrameInterpolator	extern/QGLViewer/keyFrameInterpolator.cpp	/^KeyFrameInterpolator::~KeyFrameInterpolator()$/;"	f	class:KeyFrameInterpolator
~LocalConstraint	extern/QGLViewer/constraint.h	/^    virtual ~LocalConstraint() {};$/;"	f	class:qglviewer::LocalConstraint
~ManipulatedCameraFrame	extern/QGLViewer/manipulatedCameraFrame.h	/^    virtual ~ManipulatedCameraFrame() {};$/;"	f	class:qglviewer::ManipulatedCameraFrame
~ManipulatedFrame	extern/QGLViewer/manipulatedFrame.h	/^    virtual ~ManipulatedFrame() {};$/;"	f	class:qglviewer::ManipulatedFrame
~MouseGrabber	extern/QGLViewer/mouseGrabber.h	/^    virtual ~MouseGrabber() { MouseGrabber::MouseGrabberPool_.removeAll(this); };$/;"	f	class:qglviewer::MouseGrabber
~MouseGrabber	extern/QGLViewer/mouseGrabber.h	/^    virtual ~MouseGrabber() { MouseGrabber::MouseGrabberPool_.removeRef(this); };$/;"	f	class:qglviewer::MouseGrabber
~OcTreeDrawer	OcTreeDrawer.cpp	/^  OcTreeDrawer::~OcTreeDrawer() {$/;"	f	class:octomap::OcTreeDrawer
~Optimizer	extern/QGLViewer/VRender/Optimizer.h	/^			virtual ~Optimizer() {} ;$/;"	f	class:vrender::Optimizer
~PSExporter	extern/QGLViewer/VRender/Exporter.h	/^			virtual ~PSExporter() {};$/;"	f	class:vrender::PSExporter
~Point	extern/QGLViewer/VRender/Primitive.h	/^        virtual ~Point() {}$/;"	f	class:vrender::Point
~PointcloudDrawer	PointcloudDrawer.cpp	/^  PointcloudDrawer::~PointcloudDrawer() {$/;"	f	class:octomap::PointcloudDrawer
~Polygone	extern/QGLViewer/VRender/Primitive.h	/^        virtual ~Polygone() {}$/;"	f	class:vrender::Polygone
~Primitive	extern/QGLViewer/VRender/Primitive.h	/^        virtual ~Primitive() {}$/;"	f	class:vrender::Primitive
~PrimitiveSplitOptimizer	extern/QGLViewer/VRender/Optimizer.h	/^			virtual ~PrimitiveSplitOptimizer() {} ;$/;"	f	class:vrender::PrimitiveSplitOptimizer
~QGLViewer	extern/QGLViewer/qglviewer.cpp	/^QGLViewer::~QGLViewer()$/;"	f	class:QGLViewer
~Segment	extern/QGLViewer/VRender/Primitive.h	/^        virtual ~Segment() {}$/;"	f	class:vrender::Segment
~SelectionBox	SelectionBox.cpp	/^SelectionBox::~SelectionBox(){$/;"	f	class:octomap::SelectionBox
~SortMethod	extern/QGLViewer/VRender/SortMethod.h	/^			virtual ~SortMethod() {}$/;"	f	class:vrender::SortMethod
~TopologicalSortMethod	extern/QGLViewer/VRender/SortMethod.h	/^			virtual ~TopologicalSortMethod() {}$/;"	f	class:vrender::TopologicalSortMethod
~TrajectoryDrawer	TrajectoryDrawer.cpp	/^  TrajectoryDrawer::~TrajectoryDrawer() {$/;"	f	class:octomap::TrajectoryDrawer
~VRenderParams	extern/QGLViewer/VRender/VRender.cpp	/^VRenderParams::~VRenderParams()$/;"	f	class:VRenderParams
~Vector2	extern/QGLViewer/VRender/Vector2.cpp	/^Vector2::~Vector2 ()$/;"	f	class:Vector2
~Vector3	extern/QGLViewer/VRender/Vector3.cpp	/^Vector3::~Vector3 ()$/;"	f	class:Vector3
~ViewerGui	ViewerGui.cpp	/^ViewerGui::~ViewerGui() {$/;"	f	class:octomap::ViewerGui
~ViewerSettings	ViewerSettings.cpp	/^ViewerSettings::~ViewerSettings()$/;"	f	class:ViewerSettings
~ViewerSettingsPanel	ViewerSettingsPanel.cpp	/^ViewerSettingsPanel::~ViewerSettingsPanel()$/;"	f	class:ViewerSettingsPanel
~ViewerSettingsPanelCamera	ViewerSettingsPanelCamera.cpp	/^ViewerSettingsPanelCamera::~ViewerSettingsPanelCamera()$/;"	f	class:ViewerSettingsPanelCamera
~VisibilityOptimizer	extern/QGLViewer/VRender/Optimizer.h	/^			virtual ~VisibilityOptimizer() {} ;$/;"	f	class:vrender::VisibilityOptimizer
~WorldConstraint	extern/QGLViewer/constraint.h	/^    virtual ~WorldConstraint() {};$/;"	f	class:qglviewer::WorldConstraint
